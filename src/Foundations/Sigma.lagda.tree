\date{2025-02-19}
\taxon{module}
\title{Sigma types}
\import{stt-macros}
\meta{module}{\startverb Foundations.Sigma \stopverb}

% ```agda
\agda{
module Foundations.Sigma where

open import Foundations.Universes
}
% ```

\subtree[stt-001A]{
\taxon{definition}
\title{The Sigma type}
\meta{defines}{\startverb ["Σ", "_,_", "Σ.fst", "Σ.snd"] \stopverb}

% ```agda
\agda{
infixr 3 _,_

record Σ {𝓤 𝓥} (A : Type 𝓤) (B : A → Type 𝓥) : Type (𝓤 ⊔ 𝓥) where
  constructor _,_
  field
    fst : A
    snd : B fst

open Σ public

{-# BUILTIN SIGMA Σ #-}
}
% ```
}

\subtree[stt-001B]{
\taxon{notation}

\p{
  In prose, we use a combination of the big sigma notation #{\Sigma_{x : A} B(x)}, as well as the nupurl style notation: #{(x : A) \times B(x)}. To mirror this in the agda development, we introduce the following syntax: }

% ```agda
\agda{
syntax Σ A (λ x → B) = Σ[ x ∶ A ] B
}
% ```

\p{Additionally, given a family of types #{B : A \to \cal{U}}, we write #{\startverb \~{B} \stopverb} to signify the total space #{\Sigma_{a : A} B(a)}, and use #{\pi : \tot{B} \to A} to refer to the first projection.}

}


\subtree[stt-001C]{
\taxon{definition}
\title{Non-dependent product}
\meta{defines}{\startverb ["_×_"] \stopverb}


% ```agda
\agda{

_×_ : ∀ {𝓤 𝓥} → Type 𝓤 → Type 𝓥 → Type (𝓤 ⊔ 𝓥)
A × B = Σ A λ _ → B

}
% ```
}

\subtree[stt-006X]{
\date{2025-06-29}
\title{(Non-dependant) diagonal maps}
\taxon{definition}

\p{For any type #{X}, there is a map #{X \to X \times X}, written
   #{\Delta}.}

%```agda
\agda{
Δ× : ∀ {𝓤} (A : Type 𝓤) → A → A × A
Δ× A a = (a , a)
}
%```
}
