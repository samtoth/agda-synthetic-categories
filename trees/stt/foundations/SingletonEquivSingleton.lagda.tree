\date{2025-02-26}
\taxon{theorem}
\author{samueltoth}

\import{stt-macros}


% ```agda
\agda{
module foundations.SingletonEquivSingleton where

open import foundations.universe
open import foundations.Identity
open import foundations.Functions
open import foundations.CoherentIsomorphism
open import foundations.Singleton
open import foundations.Embedding
open import foundations.Sigma

}
% ```

\p{If a type is equivalent to a (sub)singleton type it is also (sub)singleton}

\proof{
\p{Suppose we have an equivalence #{f : A \toeq B}, and #{A} is a singleton, then we need to show for any two
terms #{x,y : B}, we need an identification #{x = y}. But becuase #{f} is an equivalence, it surfices to consider two terms
#{a,b : A}, and find an identification #{f(a) = f(b)}.}

% ```agda
\agda{
equiv-singleton→singleton : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (e : A ≃ B) → is-singleton A → is-singleton B
equiv-singleton→singleton (f , e) (mk-contr a sing)
  = mk-contr (f a) λ x → ap f (sing (bwd x)) ∙ ε x where open is-equiv e
}
% ```
}
