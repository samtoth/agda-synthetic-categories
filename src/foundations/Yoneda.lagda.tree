\date{2025-04-18}


\taxon{module}

\import{stt-macros}

\p{Just a wip thought about yoneda embeddings}
\author{samueltoth}



% ```agda
\agda{
{-# OPTIONS --allow-unsolved-metas #-}

open import foundations.FunExt
open import foundations.Universes 
open import foundations.Univalence

module foundations.Yoneda (fe : FunExt-global) where

open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.EquivProp
open import foundations.Singleton
open import foundations.Functions
open import foundations.Sigma
open import foundations.Identity
open import foundations.EquivContrFibre


is-equiv←postcomp : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (f : A → B)
        → (H : ∀ {𝓦} {X : Type 𝓦} → is-equiv {B = A → X} (_∘ f))
        → is-equiv f
is-equiv←postcomp f H = is-equiv←qiso iso where
  module e {𝓦} {X : Type 𝓦} = is-equiv (H {𝓦} {X})
  open e

  iso : quasi-iso f
  iso .fst = bwd id
  iso .snd .fst = happly (ε id)
  iso .snd .snd = happly
    (ap fst (is-prop←is-single (is-contr-map←is-equiv H f)
      (f ∘ bwd id , ap (f ∘_) (ε id)) (id , refl)) )


is-equiv←precomp : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (f : A → B)
        → (H : ∀ {𝓦} {X : Type 𝓦} → is-equiv {B = X → B} (f ∘_))
        → is-equiv f
is-equiv←precomp f H = is-equiv←qiso iso where
  module e {𝓦} {X : Type 𝓦} = is-equiv (H {𝓦} {X})
  open e

  iso : quasi-iso f
  iso .fst = bwd id
  iso .snd .fst = happly
    (ap fst
      (is-prop←is-single (is-contr-map←is-equiv H f)
                          ((bwd id ∘ f) , ap (_∘ f) (ε id))
                          (id , refl)))
  iso .snd .snd = happly (ε id)


≃←same-up : ∀ {𝓤 𝓥} → {A : Type 𝓤} {B : Type 𝓥}
            → (∀ {𝓦} {C : Type 𝓦} → (A → C) ≃ (B → C)) → (A ≃ B) 
≃←same-up e = mk≃ (_≃_.bwd e id) (is-equiv←postcomp (_≃_.bwd e id) {!(e e⁻¹) ._≃_.has-is-eqv!})
}
% ```
