\date{2025-05-20}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.PullbackPath \stopverb}
\import{stt-macros}

\title{Paths in pullbacks}


% ```agda
\agda{
module Foundations.PullbackPath where

open import Foundations.Universes
open import Foundations.Identity
open import Foundations.DependentIdentity
open import Foundations.Functions
open import Foundations.Sigma
open import Foundations.SigmaPath
open import Foundations.CoherentIsomorphism
open import Foundations.IdentityEquiv
open import Foundations.FibrewiseEquiv
open import Foundations.SigmaProperties
open import Foundations.CanonicalPullbacks
open import Foundations.Square
}
% ```


\subtree[stt-004J]{
\taxon{definition}
\title{Paths in pullbacks}

% ```agda
\agda{
module _ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type  𝓥} {C : Type 𝓦}
         {f : A → B} {g : C → B} where

  pullback-Path : ∀ (p q : Pullback f g) → Type _
  pullback-Path (a , b , p) (a' , b' , q)
    = Σ[ P ∶ (a ＝ a') ] Σ[ Q ∶ (b ＝ b') ] (ap f P ∙ q ＝ p ∙ ap g Q)

  pullback-path : ∀ (p q : Pullback f g) → (p ＝ q) ≃ pullback-Path p q
  pullback-path P@(a , b , p) Q@(a' , b' , q)
    = (a , b , p) ＝ (a' , b' , q)                     ≃⟨ Σ-path e⁻¹ ⟩
      (Σ[ P ∶ (a ＝ a')]
        (tr (λ a'' → Σ[ c ∶ C ]
        (f a'' ＝ g c)) P (b , p) ＝ (b' , q)))
                                                      ≃⟨ Σ-ap-≃ (λ
                                                       P → equiv←Id (Σ-tr ∙-))⟩
      Σ[ P ∶ (a ＝ a') ]
        ((b , tr (λ a → f a ＝ g b) P p) ＝ (b' , q)) ≃⟨ Σ-ap-≃ (λ
                                                        P → Σ-path e⁻¹) ⟩
      (Σ[ P ∶ (a ＝ a')] Σ[ Q ∶ (b ＝ b')]
        (tr (λ b'' → f a' ＝ g b'') Q
          (tr (λ a'' → f a'' ＝ g b) P p) ＝ q))        ≃⟨ Σ-ap-≃ (λ
                                                        P → Σ-ap-≃ λ
                                                          Q → lem e⁻¹) ⟩
      pullback-Path P Q ≃∎ where

     lem : {P : a ＝ a'}
      {Q : b ＝ b'} →
      (ap f P ∙ q ＝ p ∙ ap g Q)
       ≃
      (tr (λ b'' → f a' ＝ g b'') Q (tr (λ a'' → f a'' ＝ g b) P p) ＝ q)
     lem {refl} {refl} = (equiv←Id (-∙ ∙-reflr p)) ∙≃ sym≃

  pullback-path→ : ∀ {p q : Pullback f g} → pullback-Path p q → (p ＝ q)
  pullback-path→ (refl , refl , refl)
    = Σ-path→ (refl , (Σ-path→ (refl , sym (∙-reflr _))))

  pullback-path-ap₁
    : ∀ {p q : Pullback f g} → {P : pullback-Path p q}
      → ap pb.π₁ (pullback-path→ P) ＝ fst P
  pullback-path-ap₁ {P = (refl , refl , refl)} = Σ-path-ap-fst

  postulate
    pullback-path-ap₂
      : ∀ {p q : Pullback f g} → {P : pullback-Path p q}
      → ap pb.π₂ (pullback-path→ P) ＝ fst (snd P)

}
% ```
}
