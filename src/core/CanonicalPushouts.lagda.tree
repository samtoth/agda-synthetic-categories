\date{2025-04-15}
\title{Properties of the canonical pushouts}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.CanonicalPushouts \stopverb}

\import{stt-macros}

% ```agda
\agda{
module core.CanonicalPushouts where

open import foundations.Prelude
open import ufAxioms
open import ergonomics.Extensionality
}
% ```


\subtree[stt-002L]{
\taxon{theorem}
\title{Canonical pushouts are pushouts}

% ```agda
\agda{
Pushout-is-pushoutω : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                       {C : Type 𝓦} {f : A → B} {g : A → C}
                     → is-pushoutω (mk-span _ f g) pushout
Pushout-is-pushoutω {f = f} {g} = is-equiv←qiso iso where
  iso : quasi-iso (cocone-map (mk-span _ f g) pushout)
  iso .fst = pushout-rec
  iso .snd .fst f = ext! (pushout-ind _ λ where
    .CoconeD.p _ → refl
    .CoconeD.q _ → refl
    .CoconeD.filler a → IdP-func←Square (glue a) refl refl
                         (Square-degen-hor _ _ (pushout-rec-apβ a)))
  iso .snd .snd (mk-cocone p q filler)
    = ap (mk-cocone p q) (ext! pushout-rec-apβ)


pushout-rec-is-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                       {C : Type 𝓦} {f : A → B} {g : A → C}
                       {𝓠} {Q : Type 𝓠}
                      → is-equiv (pushout-rec {f = f} {g} {Q = Q})
pushout-rec-is-equiv {Q = Q} = is-equiv⁻¹ (Pushout-is-pushoutω)
}
% ```

}

\subtree[stt-004G]{
\taxon{definition}
\date{2025-05-17}
\title{The cogap map}
\meta{defines}{\startverb ["cogap"] \stopverb}

\p{
In paralel to pullbacks, we sometimes call pushout-rec the cogap map.
Given a cocone #{C} under a span #{S}, we can define a the
cogap-map from the pushout of #{S} and the apex of #{C}.
}

% ```agda
\agda{
cogap : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
        {f : A → B} {g : A → C}
        {𝓜} {D : Type 𝓜}
      → Cocone (mk-span A f g) D
      → Pushout f g → D
cogap = pushout-rec
}
% ```
}

\subtree[stt-005M]{
  \taxon{definition}
  \title{The codiagonal map}
  \p{Given a map #{f : B \to C}, we can define the map #{\Nabla_f : B +^A B \to C}
  called the codiagonal map.}

%```agda
\agda{
∇ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
      (f : A → B)
    → Pushout f f → B
∇ f = pushout-rec (mk-cocone id id ~refl)
}
%```
}
