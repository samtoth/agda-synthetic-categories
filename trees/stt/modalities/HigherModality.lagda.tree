\date{2025-02-21}
\title{Higher Modalities}

\import{stt-macros}

% ```agda
\agda{
module modalities.HigherModality where

open import foundations.Prelude

}
% ```

\transclude{stt-000G}


% ```agda
\agda{
record HigherModality : Typeω where
  field
    ○ : ∀ {𝓤} → Type 𝓤 → Type 𝓤
    ○-η : ∀ {𝓤} {A : Type 𝓤} → A → ○ A
    ○-ind : ∀ {𝓤 𝓥} {A : Type 𝓤} (P : ○ A → Type 𝓥) → (f : (a : A) → P (○-η a)) → (ma : ○ A) → P ma
    ○-β : ∀ {𝓤 𝓥} {A : Type 𝓤} (P : ○ A → Type 𝓥) → (f : (a : A) → P (○-η a)) → (a : A) → ○-ind P f (○-η a) ＝ f a

  is-○-modal : ∀ {𝓤} → Type 𝓤 → Type 𝓤
  is-○-modal A = is-equiv (○-η {A = A})

  field
    ＝-is-○-modal : ∀ {𝓤} {A : Type 𝓤} {x y : A} → is-○-modal (x ＝ y)

  opaque
    ○-rec : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (A → ○ B) → (○ A → ○ B) 
    ○-rec = ○-ind (λ _ → _)

    ○-recβ :  ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → ○ B) (a : A) → ○-rec f (○-η a) ＝ f a
    ○-recβ = ○-β (λ _ → _)
}
% ```

\subtree{
\taxon{theorem}
\title{#{\bigcirc A} is modal}

% ```agda
\agda{
  ○-elim : ∀ {𝓤} {A : Type 𝓤} → ○ (○ A) → ○ A
  ○-elim = ○-rec λ x → x

  ○-is-○-modal : ∀ {𝓤} {A : Type 𝓤} → is-○-modal (○ A)
  ○-is-○-modal = {!!}
}
% ```

}
