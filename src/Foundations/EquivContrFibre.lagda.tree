\date{2025-02-24}
\taxon{module}

\meta{module}{\startverb Foundations.EquivContrFibre \stopverb}

\title{Equivalences have singleton fibres}

\import{stt-macros}

% ```agda
\agda{
module Foundations.EquivContrFibre where

open import Foundations.Universes
open import Foundations.CoherentIsomorphism
open import Foundations.Functions
open import Foundations.Singleton
open import Foundations.Sigma
open import Foundations.SigmaPath
open import Foundations.FibrePath
open import Foundations.Identity
open import Foundations.Homotopy
open import Foundations.DependentIdentity
open import Foundations.PathReasoning
open import Foundations.QuasiIsomorphism
}
% ```

\subtree[stt-001X]{
\taxon{theorem}
\title{Equivalences are contractible maps}

\p{
Given a map #{f : A \toeq B}, then for any #{b : B}, the type of fibres of #{f} at #{b} is contractible.
}

\meta{defines}{\startverb ["is-contr-map←is-equiv"] \stopverb}

\proof{
\citet{4.2.6}{HoTT}

\p{Recall that from the equivalence we have the data: #{\eta : f f^{-1} \sim id}, #{\varepsilon : f^{-1} f \sim id} and the
coherator #{\tau : f\varepsilon \sim \eta f}}

\p{First we can give the centre of contraction, #{(f^{-1}(b), \eta_b)}. Now given any other #{(a', p : f(a') = b)} in the fibre, we construct an identification #{(f^{-1}(b), \eta_b) = (a , p)}. By [the charecterisation of paths in fibres](FibrePath.lagda), it surfices to
find a #{\gamma : f^{-1}(b) = a}, and an identification #{f(\gamma) \cdot p = \eta_b}. Let #{\gamma} be #{f^{-1}(p^{-1}) \cdot \varepsilon_a}, and the required identification follows from path-induction and the coherator. \qed}

% ```agda
\agda{
is-contr-map←is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-equiv f → is-contr-map f
is-contr-map←is-equiv {f = f} eq b = mk-singl (bwd b , ε b) contr where
  open is-equiv eq

  lem : ∀ a p → ap f ((ap bwd (sym p)) ∙ η a) ∙ p ＝ ε b
  lem a refl = ap f (η a) ∙ refl  ＝⟨ ∙-reflr _ ⟩
                ap f (η a)        ＝⟨ coherent a ⟩
                ε (f a)           ∎


  contr : (x : fibre f b) → (bwd b , ε b) ＝ x
  contr (a , p) = _≃_.bwd fibre-path≃ ((ap bwd (sym p)) ∙ η a , lem a p)

}
% ```
}
}

\subtree[stt-001W]{
\taxon{corollary}

\p{A map is an equivalence iff it has contractible fibres}

\meta{defines}{\startverb ["is-equiv←is-contr-map"] \stopverb}

\proof{
% ```agda
\agda{
is-equiv←is-contr-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-contr-map f → is-equiv f
is-equiv←is-contr-map {f = f} feq = is-equiv←qiso lem where
  module ctr x = is-singleton (feq x)

  g : _ → _
  g b = ctr.centre b .fst

  lem : quasi-iso f
  lem .fst = g
  lem .snd .fst a = Σ-path-fst (ctr.central (f a) (a , refl))
  lem .snd .snd b with feq b 
  ... | mk-singl (fst₁ , refl) central₁ = refl
}
% ```
}
}
