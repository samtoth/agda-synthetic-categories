\date{2025-02-19}
\import{stt-macros}
\title{Singleton types}
\taxon{module}
\meta{module}{\startverb foundations.Singleton \stopverb}


% ```agda
\agda{
module foundations.Singleton where

open import foundations.Universes
open import foundations.Identity
open import foundations.Unit
open import foundations.Sigma
}
% ```

\subtree[stt-0006]{

\taxon{definition}
\meta{defines}{\startverb ["is-singleton", "mk-singl", "is-singleton.centre", "is-singleon.central" ] \stopverb}

\p{A type is called a singleton when it has a unique inhabitant. Alluding to the #{\infty}-groupoid semantics of HoTT, we also sometimes call these types contractible.
}

% ```agda
\agda{

record is-singleton {𝓤} (A : Type 𝓤) : Type 𝓤 where
  constructor mk-singl
  field
    centre : A
    central : ∀ x → centre ＝ x

open is-singleton public
}
% ```

}

\subtree[stt-001D]{
\taxon{example}

\meta{defines}{\startverb ["𝟙-is-singleton"] \stopverb}
\p{The unit type is a singleton type}

% ```agda
\agda{
𝟙-is-singleton : is-singleton 𝟙
𝟙-is-singleton = mk-singl tt (λ _ → refl)
}
% ```
}


\subtree[stt-0007]{
\taxon{definition}
\title{The canonical singleton types}

\meta{defines}{\startverb ["Sing"] \stopverb}

\p{Given a type #{A : \UU} with a point #{a : A}, we define a type #{\textrm{Sing}(A,a) : \UU := \Sigma_{x : X}(a = x)}.
Under the #{\infty}-groupoid interpretation of type theory, this is the slice category of A under a (or equivalently coslice category).
} 

% ```agda
\agda{
Sing : ∀ {𝓤} (A : Type 𝓤) (a : A) → Type 𝓤
Sing A a = Σ A (λ x → a ＝ x)
}
% ```
}


\subtree[stt-001E]{
\taxon{theorem}
\title{Contractibility of singletons}
\meta{defines}{["Sing-is-singleton"]}

\p{ #{\textrm{Sing}(A,a)} is a singleton for any #{A : \UU} and #{a : A}.}

\proof{
\p{Clearly, it is inhabited with inhabitant #{(a, \refl)}. To show that any other #{(x,p) : \textrm{Sing}(A,a)} is equal to #{(a,\refl)}, we use identity induction, and the #{\eta}-rule for pair types.} 

% ```agda
\agda{
Sing-is-singleton : ∀ {𝓤} {A : Type 𝓤} {a : A} → is-singleton (Sing A a)
Sing-is-singleton = mk-singl (_ , refl) (λ where (._ , refl) → refl)
}
% ```
}
}


\subtree[stt-0008]{
\title{Subsingletons}

\p{An important class of types are those which are subtypes of singleton types, and we call these types propositions.
}


 \subtree[stt-0009]{
   \taxon{definition}
   \title{Proposition}
   \meta{defines}{\startverb ["is-prop"] \stopverb}

   \p{A proposition is a type for which for any two inhabitants, there is a term of #{x = y}. Sometimes we call propositions subsingletons.}

   % ```agda
   \agda{
is-prop : ∀ {𝓤} → Type 𝓤 → Type 𝓤
is-prop A = ∀ (x y : A) → x ＝ y
   }
   % ```
 }

 \subtree[stt-000A]{
   \taxon{theorm}
   \p{Every singleton is a subsingleton}

   \meta{defines}{\startverb ["is-prop←is-single"] \stopverb}

   % ```agda
   \agda{
is-prop←is-single : ∀ {𝓤} {A : Type 𝓤} → is-singleton A → is-prop A
is-prop←is-single (mk-singl centre central) x y = sym (central x) ∙ central y
   }
   % ```
 }
}

\subtree[stt-000P]{
\taxon{theorem}
\meta{defines}{\startverb ["is-prop←is-single-if-inhabited"] \stopverb}
\p{We can show that a type is a proposition by assuming it is inhabited then showing it is a singleton}

% ```agda
\agda{
is-prop←is-single-if-inhabited : ∀ {𝓤} {A : Type 𝓤} → (A → is-singleton A) → is-prop A
is-prop←is-single-if-inhabited f x = is-prop←is-single (f x) x
}
% ```
}

\subtree[stt-002U]{
\taxon{theorem}
\title{Props have singleton paths}

% TODO cite Rijke Intro to HoTT

\meta{defines}{\startverb ["＝-singleton←is-prop"] \stopverb}

% ```agda
\agda{
＝-singleton←is-prop : ∀ {𝓤} {A : Type 𝓤} →
          is-prop A →
         ∀ (a b : A) → is-singleton (a ＝ b)
＝-singleton←is-prop prop a b
  = mk-singl (sym (prop a a) ∙ prop a b)
    λ where refl → ∙-sym' (prop a a)
}
% ```
}
