\title{(Pre)Postwhiskering}
\date{2025-06-26}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.Postwhisker \stopverb}
\import{stt-macros}

%```agda
\agda{
module core.Postwhisker where

open import foundations.Prelude
open import ufAxioms
open import core.Arrow
open import core.ArrowEquiv
}
%```


\subtree[stt-006G]{
\title{Postwhiskering a homotopy}
\taxon{definition}


%```agda
\agda{
postwhisker : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                  {X : Type 𝓦} (f : A → B)
                → ∀ (g h : B → X)
                → g ~ h → g ∘ f ~ h ∘ f
postwhisker f g h = _▸ f

prewhisker : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                  (X : Type 𝓦) (f : A → B)
                → ∀ {g h : X → A}
                → g ~ h → f ∘ g ~ f ∘ h
prewhisker X f = f ◂_
}
%```
}


\subtree[stt-006I]{
\title{Funext for Postwhsikering}
\taxon{theorem}

\p{Let #{f : A \to B}, and #{g,h : B \to C}, then
postwhiskering by #{f} is an equivalence iff #{\rm{ap}_{- \circ f}^{g,h}} is.}

%```agda
\agda{
postwhisker←ap-compose : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
            {C : Type 𝓦}
           (f : A → B)
           (g h : B → C)
         → Arrow-map
             (ap (postcomp C f) {g} {h})
             (postwhisker f g h)
postwhisker←ap-compose _ _ _ .Arrow-map.top = happly
postwhisker←ap-compose _ _ _ .Arrow-map.bot = happly
postwhisker←ap-compose _ _ _ .Arrow-map.comm refl = refl

postwhisker-funext : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                    {C : Type 𝓦}
                    {f : A → B}
                    {g h : B → C}
                  → is-Arrow-equiv (postwhisker←ap-compose f g h)
postwhisker-funext .fst = global-funext
postwhisker-funext .snd = global-funext


postwhisker-is-equiv←ap-compose
  : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
      {C : Type 𝓦}
      {f : A → B}
      {g h : B → C}
    → is-equiv (ap (postcomp C f) {g} {h})
    → is-equiv (postwhisker f g h)
postwhisker-is-equiv←ap-compose e
  = is-equiv←Arrow-equiv {F = postwhisker←ap-compose _ _ _}
                         postwhisker-funext
                         e

}
%```
}

\subtree[stt-006H]{
\title{Postwhiskering by an equiavalence is an equivalence}
\taxon{corollary}

%```agda
\agda{
postwhisker-equiv-is-equiv
  : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
      {f : A → B} → is-equiv f
    → ∀ {C : Type 𝓦} {g h : B → C}
      → is-equiv (postwhisker f g h)
postwhisker-equiv-is-equiv e
  = postwhisker-is-equiv←ap-compose
     (is-embedding←is-equiv (postcomp-equiv e))
}
%```
}
