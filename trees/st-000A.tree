\date{2025-03-10}
\title{Literate programming with forester and Agda}
\author{samueltoth}

\p{Literate programming (introducted by Knuth 1987), is...

When writing in Agda, literate programming is almost the default choice, with the majority of the large public
libraries utilizing it in some form or another.}

\ul{
 \li{[The 1lab](1lab) and [[agda-unimath]] make use of the markdown-literate mode supported by Agda, which is then rendered
     to HTML, with varying degres of additional functionalities.}
 \li{In [[typeTopology]], they simply use plain text literate Agda files. The text and additional features
     of type-topology are less featured than the other mentioned libraries; however much of the novel content in type topology
     has originated from or ended up being written up as research papers, with the agda formalisation being linked}
}

\subtree[st-000C]{
\title{My first approach}

}

\subtree[st-000B]{
\taxon{Desiderata}

\ol{
 \li{Searchability: }
 \li{Discoverability: }
 \li{Seperating module organisation from expositorial organisation. One of the inherant tensions in writing formalised
     libraries of mathematics is that the organisation of the code for authors or users of the library has different
     requirements to the presentation for readers of the library in complete written form.}
 \li{Common mathematical type setting desires. In writing the non-formal part of a library, it is extremely benfitial to
     have the normal suite of tools available to clearly and cleanly write mathematics. Primarily means access to a latex
     environment, and in particular the ability to draw commutative diagrams. Of the discussed libraries only [[1lab]] has
     the capability to draw commutative diagrams (with agda-unimath using ASCII diagrams) and type topology not including
     this at all.}
}
}