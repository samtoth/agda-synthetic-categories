\date{2025-06-04}
\author{samultoth}
\taxon{module}
\meta{module}{\startverb modalities.Factorisation \stopverb}
\import{stt-macros}
\title{Orthogonal Factorisation Systems}

%```agda
\agda{
module modalities.Factorisation where

open import ufAxioms
open import foundations.Prelude
}
%```

\subtree[stt-004W]{
\title{Wide subcategory}
\taxon{definition}
\p{We define the type of wide subcategories of #{\UU} - that is subtypes
   of all arrows which are closed under composition and identity.}

%```agda
\agda{
record Wide-subcat 𝓤 𝓥 : Type (lsuc (𝓤 ⊔ 𝓥)) where
  field
    K : ∀ {A B : Type 𝓤} → Subtype (A → B) 𝓥
    K-id : ∀ {A : Type 𝓤} → id {A = A} ∈ K
    _K∘_ : ∀ {A B C : Type 𝓤} {g : B → C} {f : A → B}
           → g ∈ K → f ∈ K → g ∘ f ∈ K

}
%```
}

\subtree[stt-004X]{
\title{Factorisation}
\taxon{definition}

%```agda
\agda{
record Factorisation {𝓤 𝓥} (LL RR : Wide-subcat 𝓤 𝓥)
                     {A B : Type 𝓤} (f : A → B) : Type (lsuc 𝓤 ⊔ 𝓥) where
  open Wide-subcat LL renaming (K to L) using ()
  open Wide-subcat RR renaming (K to R) using ()
  field
    Im : Type 𝓤
    l : A → Im
    r : Im → B
    l∈L : l ∈ L
    r∈R : r ∈ R

    comm : r ∘ l ＝ f
}
%```
}

\subtree[stt-004V]{
\title{Orthogonal Factorisation System}
\taxon{definition}

%```agda
\agda{
record Orthogonal-factorisation 𝓤 𝓥 : Type (lsuc (𝓤 ⊔ 𝓥)) where
  field
    Ll Rr : Wide-subcat 𝓤 𝓥
  open Wide-subcat Ll renaming (K to L; K-id to L-id; _K∘_ to _L∘_)
  open Wide-subcat Rr renaming (K to R; K-id to R-id; _K∘_ to _R∘_)

  field
    factorisation : ∀ {A B : Type 𝓤} (f : A → B)
                    → is-singleton (Factorisation Ll Rr f)
}
%```
}
