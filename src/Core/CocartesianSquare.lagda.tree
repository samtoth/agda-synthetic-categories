\date{2025-07-29}
\title{Cocartesian squares}
\author{samueltoth}
\taxon{module}
\meta{module}{Core.CartesianSquare}
\import{stt-macros}

%```agda
\agda{
module Core.CocartesianSquare where

open import ufAxioms
open import Foundations.Prelude
open import Foundations.Pushout

open import Core.Arrow
open import Core.CanonicalPushouts
}
%```


\subtree[stt-007V]{
\title{Co-cartesian squares}
\taxon{defintion}

\p{Given a square:}

\quiver{
\begin{tikzcd}
	A && X \\
	\\
	B && Y
	\arrow["{f'}", from=1-1, to=1-3]
	\arrow["f"', from=1-1, to=3-1]
	\arrow["g", from=1-3, to=3-3]
	\arrow["{g'}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{we say that the square is cocartesian if the square [given by
postcomposition](stt-003P) is a [cartesian square](stt-003V).}

%```agda
\agda{
is-cocartesian : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥}
                   {X : Type 𝓦} {Y : Type 𝓜}
                   {f : A → B} {g : X → Y}
                 → Arrow-map f g → (𝓠 : Level)
                 → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓜 ⊔ lsuc 𝓠)
is-cocartesian F 𝓠 = ∀ (Q : Type 𝓠)
                     → is-cartesian (postcomp-square F Q)


is-cocartesianω : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥}
                    {X : Type 𝓦} {Y : Type 𝓜}
                    {f : A → B} {g : X → Y}
                  → Arrow-map f g
                  → Typeω
is-cocartesianω F = ∀ {𝓠} (Q : Type 𝓠)
                    → is-cartesian (postcomp-square F Q)
}
%```
}

\subtree[stt-007W]{
\title{Cocartesian squares are pushouts}
\taxon{theorem}

\proof{An easy consequence of \ref{stt-003C} and \ref{stt-007Y}}

%```agda
\agda{
is-pushout←is-cocartesian
  : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥}
      {X : Type 𝓦} {Y : Type 𝓜}
      {f : A → B} {g : X → Y}
      (F : Arrow-map f g)
    → is-cocartesianω F → is-pushoutω _ (Cocone←Arrow-map F .snd)
is-pushout←is-cocartesian {f = f} {g} F cc
  = is-pushout←postcomp-pullback _
       (λ Q → is-pullback←is-cartesian (postcomp-square F Q) (cc Q))

is-cocartesian←is-pushout
  : ∀ {𝓤 𝓥 𝓦 𝓜} {S : Span 𝓤 𝓥 𝓦} {D : Type 𝓜} {C : Cocone S D}
    → is-pushoutω S C → is-cocartesianω (Arrow-map←Cocone C)
is-cocartesian←is-pushout po Q
  = is-cartesian←is-pullback
      (postcomp-square (Arrow-map←Cocone _) Q)
      (postcomp-pullback←is-pushout _ po Q)
}
%```
}


\subtree[stt-0080]{
\title{Pushouts squares of equivalences}
\taxon{theorem}

\p{Given an equivalence #{f} and any map #{g}, together with a
square #{f \to g}, the square is cocartesian iff #{g} is an
equivalence.}

\proof{
\p{We have the following square given by postcomposition:}
\quiver{
\begin{tikzcd}
	{Q^Y} &&& {Q^B} \\
	& \bullet \\
	\\
	{Q^X} &&& {Q^A}
	\arrow["{Q^b}", from=1-1, to=1-4]
	\arrow["{\rm{gap}}", dashed, from=1-1, to=2-2]
	\arrow["{Q^g}"', from=1-1, to=4-1]
	\arrow["{Q^f}", from=1-4, to=4-4]
	\arrow[from=2-2, to=1-4]
	\arrow["\sim", from=2-2, to=4-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-2, to=4-4]
	\arrow["{Q^t}"', from=4-1, to=4-4]
\end{tikzcd}
}

\p{By \ref{stt-007Z}, the projection from the pullback to #{Q^X} is an
equivalence because #{Q^f} is. Then we have a triangle which, by the
[3 for 2](stt-003E) property, shows that #{Q^g} is an equivalence iff
the gap map is.}
}

%```agda
\agda{
cocartesian←equiv-map
  : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥} {X : Type 𝓦}
      {Y : Type 𝓜} {f : A → B} {g : X → Y}
      (F : Arrow-map f g)
    → is-equiv f
    → is-equiv g
    → is-cocartesianω F
cocartesian←equiv-map F feq geq Q
  = is-cartesian←is-pullback (postcomp-square F Q)
      (is-pullback←gap (Cone←Arrow-map (postcomp-square F Q) .snd)
        (3-for-2
           (pullback-equiv₁ (postcomp-equiv feq))
           (postcomp-equiv geq))) where
  module F = Arrow-map F

dom-is-equiv←cocartesian
  : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥} {X : Type 𝓦}
      {Y : Type 𝓜} {f : A → B} {g : X → Y}
      (F : Arrow-map f g)
    → is-equiv f
    → is-cocartesianω F
    → is-equiv g
dom-is-equiv←cocartesian F feq cart = is-equiv←postcomp _
  λ {_} {Q} →  is-equiv-∘
      (pullback-equiv₁ (postcomp-equiv feq))
      (gap-is-equiv←is-pullback
        (Cone←Arrow-map (postcomp-square F Q) .snd)
        (is-pullback←is-cartesian _ (cart Q)))
}
%```
}
