\date{2025-06-12}
\title{Axiomatising a sharp modality}
\taxon{module}
\meta{module}{\startverb modalities.Flat.Sharp \stopverb}
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
module modalities.Flat.Sharp where

open import foundations.Prelude
open import ufAxioms
open import modalities.Flat.Flat


postulate
  sharp-ptws : ∀ {@♭ 𝓤} {𝓥} {@♭ Γ : Type 𝓤}
                 (B : @♭ Γ → Type 𝓥)
                 → Γ → Type 𝓥

  -- crisp-sharp-ptws : ∀ {@♭ 𝓤} {𝓥} {@♭ Γ : Type 𝓤}
  --                      {B : @♭ Γ → Type 𝓥}
  --                     → (@♭ x : Γ) → sharp-ptws B x ＝ B x

  sharp-ptws-unit : ∀ {@♭ 𝓤} {𝓥} {@♭ Γ : Type 𝓤}
                       {B : @♭ Γ → Type 𝓥}
                     → ((@♭ x : Γ) → B x)
                     → (x : Γ) → sharp-ptws B x

  sharp-ptws-elim : ∀ {@♭ 𝓤} {𝓥} {@♭ Γ : Type 𝓤}
                      {B : @♭ Γ → Type 𝓥}
                      → ((@♭ x : Γ) → sharp-ptws B x)
                      → (x : Γ) → sharp-ptws B x

syntax sharp-ptws (λ x → A) = ⟨♯| x ↦ A ⟩

syntax sharp-ptws-unit (λ x → A) = mod♯⟨ x ↦ A ⟩

⟨♯|_⟩ : ∀ {𝓤} → Type 𝓤 → Type 𝓤
⟨♯| A ⟩ = ⟨♯| _ ↦ A ⟩ tt

♯-η : ∀ {𝓤} {A : Type 𝓤} → A → ⟨♯| A ⟩
♯-η a = mod♯⟨ _ ↦ a ⟩ tt

postulate
  ♯-crisp-ind : ∀ {@♭ 𝓤} {𝓥} {@♭ A : Type 𝓤} (B : A → Type 𝓥)
                → ((@♭ x : A) → B x) → (x : A) → ⟨♯| B x ⟩

}
%```
