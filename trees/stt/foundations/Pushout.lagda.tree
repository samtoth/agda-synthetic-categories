\date{2025-03-07}
\title{Pushouts}
\author{samueltoth}


\import{stt-macros}

% ```agda
\agda{
{-# OPTIONS --allow-unsolved-metas #-}
module foundations.Pushout where

open import foundations.universe
open import foundations.Functions
open import foundations.Identity
open import foundations.CoherentIsomorphism
open import foundations.QuasiIsomorphism
open import foundations.EquivSingleton
open import foundations.Singleton
open import foundations.Sigma
open import foundations.Homotopy
open import foundations.DependentIdentity
open import foundations.DependentHomotopy
open import foundations.SigmaPath
open import foundations.FunExt
}
% ```


\subtree[stt-0015]{
\taxon{definition}

\title{Spans}

\p{
    A span is a diagram of types: #{C \xleftarrow{f} A \xrightarrow{g} B}.
}

% ```agda
\agda{
record Span 𝓤 𝓥 𝓦 : Type (lsuc (𝓤 ⊔ 𝓥 ⊔ 𝓦)) where
  constructor mk-span
  field
    Centre : Type 𝓤
    {Left} : Type 𝓥
    left   : Centre → Left
    {Right} : Type 𝓦
    right : Centre → Right
}
% ```

}

\subtree[stt-0016]{
 \taxon{definition}
 \title{cocone}
 \p{
  Given a span #{s : C \xleftarrow{f} A \xrightarrow{g} B}, and a type #{Q}, we define the type of #{Q}-cocones over #{s} to be the structure with:
   \ul{
     \li{A function #{i : C \to Q}}
     \li{A function #{j : B \to Q}}
     \li{A path #{i \circ f = j \circ g}}
}
}

% ```agda
\agda{
record Cocone  {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦) {𝓛} (Carrier : Type 𝓛)
        : Type (lsuc (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛))  where
  constructor mk-cocone
  open Span S
  field
    p       : Left → Carrier
    q       : Right → Carrier
    filler  : p ∘ left ~ q ∘ right 


record CoconeD {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦)
               {𝓛} {Q : Type 𝓛} (cc : Cocone S Q)
               {𝓜} (P : Q → Type 𝓜) : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛 ⊔ 𝓜) where
  constructor mk-coconeD
  open Span S
  open Cocone cc
  field
    p : (l : Left) → P (p l) 
    q : (r : Right) → P (q r)
    filler : HomotopyP (P ◂ filler) (p ∘ left) (q ∘ right)

module _ {𝓤 𝓥 𝓦} {S : Span 𝓤 𝓥 𝓦}
               {𝓛} {Q : Type 𝓛} {cc : Cocone S Q}
               {𝓜} {P : Q → Type 𝓜}  where
  open CoconeD
  open Span S
  module cc = Cocone cc


  record coconeᵈ~ (a b : CoconeD S cc P) : Type (𝓤 ⊔ 𝓦 ⊔ 𝓥 ⊔ 𝓜) where
    module a = CoconeD a
    module b = CoconeD b
    field
      p~ : a.p ~ b.p
      q~ : a.q ~ b.q
      filler~ : HomotopyP (λ c → ap₂ (IdP ((P ◂ cc.filler) c)) (p~ (left c)) (q~ (right c)))
                  a.filler
                  b.filler

  record coconeᵈ-path (a b : CoconeD S cc P) : Type (𝓤 ⊔ 𝓦 ⊔ 𝓥 ⊔ 𝓜) where
    module a = CoconeD a
    module b = CoconeD b
    field
      p＝ : a.p ＝ b.p
      q＝ : a.q ＝ b.q
      filler＝ : IdP (ap₂ (HomotopyP (P ◂ cc.filler)) (ap (_∘ left) p＝) (ap (_∘ right) q＝))
                    a.filler b.filler

  path←cocone~ : FunExtGlobal → ∀ {a b : CoconeD S cc P} → coconeᵈ~ a b → coconeᵈ-path a b
  path←cocone~ fe record { p~ = p~ ; q~ = q~ ; filler~ = filler~ }
    = record { p＝ = funext→ fe p~ ; q＝ = funext→ fe q~ ; filler＝ = {!!} ∙ funext→ fe filler~ } where open WithFunExt

  from-coconeᵈ-path : ∀ {a b : CoconeD S cc P} → coconeᵈ-path a b → a ＝ b
  from-coconeᵈ-path record { p＝ = refl ; q＝ = refl ; filler＝ = refl } = refl

  funext-coconeᵈ→ : FunExtGlobal → ∀ {a b : CoconeD S cc P} → coconeᵈ~ a b → a ＝ b
  funext-coconeᵈ→ fe = from-coconeᵈ-path ∘ path←cocone~ fe
}
% ```
}


\subtree[stt-0017]{
  \taxon{definition}
  \title{is-pushout}

  \p{
    Given a span of types #{C \xleftarrow{f} A \xrightarrow{g} B}, we say that a type #{D} is it's pushout if it is the universal cocone. In other words it fits universally into the following commutative diagram:
  }

  \quiver{
  \begin{tikzcd}
	A && B \\
	\\
	C && D \\
        &&& Q
	\arrow["g", from=1-1, to=1-3]
	\arrow["f"', from=1-1, to=3-1]
	\arrow[from=1-3, to=3-3]
	\arrow[bend left, from=1-3, to=4-4]
	\arrow[from=3-1, to=3-3]
	\arrow[bend right, from=3-1, to=4-4]
	\arrow["\lrcorner"{anchor=center, pos=0.125, rotate=180}, draw=none, from=3-3, to=1-1]
	\arrow[dashed, from=3-3, to=4-4]
  \end{tikzcd}
  }

  \p{In the language of type theory, given a cocone #{C}, this can be encoded by requiring
     that the obvious map #{(C \to Q) \to \mathrm{Cocone(Q)}} given by precomposition
     is an equivalence.
  }


% ```agda
\agda{
module _ {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦) where
  construct-cocone : ∀ {𝓛 𝓜} {C : Type 𝓛} (C-cc : Cocone S C)
                {Q : Type 𝓜} → (C → Q) → Cocone S Q
  construct-cocone C f = mk-cocone (f ∘ p) (f ∘ q) λ a → ap f (filler a) where open Cocone C

  is-pushout : ∀ {𝓛} {C : Type 𝓛} → Cocone S C → Type _
  is-pushout {𝓛} C = ∀ {Q : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛)} → is-equiv (construct-cocone C {Q})

  is-pushoutω : ∀ {𝓛} {C : Type 𝓛} → Cocone S C → Typeω
  is-pushoutω {𝓛} C = ∀ {𝓜} {Q : Type 𝓜} → is-equiv (construct-cocone C {Q})
}
% ```
}

% ```agda
\agda{
  construct-coconeᵈ : ∀ {𝓛 𝓜} {C : Type 𝓛} (C-cc : Cocone S C)
                      → {Q : C → Type 𝓜}
                      → ((c : C) → Q c)
                      → CoconeD S C-cc Q 
  construct-coconeᵈ C f = mk-coconeD (f ∘ p) (f ∘ q) (apᵈ f ∘ filler) where open Cocone C

  is-pushoutᵈ : ∀ {𝓛} {C : Type 𝓛} → Cocone S C → Type _
  is-pushoutᵈ {𝓛} {C} Cc =  ∀ {Q : C → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛)} → is-equiv (construct-coconeᵈ Cc {Q})

  
  is-pushoutωᵈ : ∀ {𝓛} {C : Type 𝓛} → Cocone S C → Typeω
  is-pushoutωᵈ {𝓛} {C} Cc = ∀ {𝓜} {Q : C → Type 𝓜} → is-equiv (construct-coconeᵈ Cc {Q})
}
% ```

\subtree[stt-0018]{
\taxon{theorem}
\title{Uniqueness of pushouts}
\meta{assumes}{Univalence}

\p{Pushouts, like all universal constructions, are unique if they exist. We will show 
that the type of cocones that are pushouts is a subsingleton}

\proof{

% ```agda
\agda{
-- module _ {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦) where
--   pushouts-unique : ∀ {𝓛} → is-subsingleton (Σ[ X ∶ Type 𝓛 ] Σ[ C ∶ Cocone S X ] is-pushout S C)
--   pushouts-unique = {!!}
}
% ```

}
}

% ```agda
\agda{
has-pushouts : ∀ 𝓤 → Type (lsuc 𝓤)
has-pushouts 𝓤 = ∀ (S : Span 𝓤 𝓤 𝓤)
                  → Σ[ P ∶ Type 𝓤 ] Σ[ C ∶ Cocone S P ]
                       is-pushout S C

record Ind-Pushout {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦) : Typeω where
  open Span S public

  field
    Pushout : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦)
    cocone : Cocone S Pushout

  open Cocone cocone public renaming (p to ι₁ ; q to ι₂ ; filler to glue)

  open CoconeD

  field
    pushout-ind : ∀ {𝓠} (Q : Pushout → Type 𝓠) → CoconeD S cocone Q → (x : Pushout) → Q x

    pushout-indβ1 : ∀ {𝓠} {Q : Pushout → Type 𝓠} → {c : CoconeD S cocone Q} →
                      ∀ x → pushout-ind Q c (ι₁ x) ＝ c .p x

    pushout-indβ2 : ∀ {𝓠} {Q : Pushout → Type 𝓠} → {c : CoconeD S cocone Q} →
                      ∀ x → pushout-ind Q c (ι₂ x) ＝ c .q x

  field
    pushout-ind-apβ : ∀ {𝓠} {Q : Pushout → Type 𝓠} {c : CoconeD S cocone Q}
                      → HomotopyP (λ c → ap₂ (IdP (ap Q (glue c))) (pushout-indβ1 (left c)) (pushout-indβ2 (right c)))
                                  (apᵈ (pushout-ind Q c) ∘ glue) 
                                  (c .filler)
  Dependent←cocone : ∀ {𝓠} {Q : Type 𝓠} →
                      Cocone S Q → CoconeD S cocone λ _ → Q
  Dependent←cocone (mk-cocone p q eq) = mk-coconeD p q λ c → tr-constant (glue c) (p (left c)) ∙ eq c

  pushout-ind-equiv :  FunExtGlobal → ∀ {𝓠} {Q : Pushout → Type 𝓠} 
                      → is-equiv (pushout-ind Q)
  pushout-ind-equiv FE {Q = Q} = is-equiv←qiso I where
    open WithFunExt

    I : quasi-iso (pushout-ind Q)
    I .fst = construct-coconeᵈ S cocone 
    I .snd .fst C@(mk-coconeD p q eq) = funext-coconeᵈ→ FE II where
       II : coconeᵈ~ ((construct-coconeᵈ S cocone ∘ pushout-ind Q) C) C 
       II .coconeᵈ~.p~ = pushout-indβ1
       II .coconeᵈ~.q~ = pushout-indβ2
       II .coconeᵈ~.filler~ = pushout-ind-apβ
    I .snd .snd f = funext→ FE (pushout-ind (λ z → (pushout-ind Q ∘ I .fst) f z ＝ f z)
                               (mk-coconeD pushout-indβ1 pushout-indβ2 {!!})) 


  pushout-rec : ∀ {𝓠} {Q : Type 𝓠} → Cocone S Q → Pushout → Q
  pushout-rec {Q = Q} cc = pushout-ind (λ _ → Q) (mk-coconeD (cc .Cocone.p) (cc .Cocone.q)
                            λ a → tr-constant  (glue a) (cc .Cocone.p (left a)) ∙ cc .Cocone.filler a) 

  pushout-rec-equiv : FunExtGlobal → ∀ {𝓠} {Q : Type 𝓠} 
                      → is-equiv (pushout-rec {Q = Q})
  pushout-rec-equiv fe = is-equiv←qiso I where
    open WithFunExt

    I : quasi-iso pushout-rec
    I .fst = construct-cocone S cocone
    I .snd .fst = {!!}
    I .snd .snd f = funext→ fe (pushout-ind (λ z → (pushout-rec ∘ I .fst) f z ＝ f z)
                            (mk-coconeD pushout-indβ1 pushout-indβ2 λ a → ?))



global-pushouts : Typeω
global-pushouts = ∀ {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦) → Ind-Pushout S

}
% ```
