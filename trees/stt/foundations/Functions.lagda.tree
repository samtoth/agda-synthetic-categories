\date{2025-02-20}
\title{Function types}

\import{stt-macros}

% ```agda
\agda{
module foundations.Functions where

open import foundations.universe
open import foundations.Sigma
open import foundations.Identity
open import foundations.Singleton
}
% ```



% ```agda
\agda{
id : ∀ {𝓤} {A : Type 𝓤} → A → A
id a = a
{-# INLINE id #-}

infixr 40 _∘_
_∘_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {C : {a : A} → B a → Type 𝓦}
      → (f : {a : A} → (b : B a) → C b) → (g : (a : A) → B a) → (a : A) → C (g a)
f ∘ g = λ a → f (g a)


happly : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {f g : (a : A) → B a} → f ＝ g → (a : A) → f a ＝ g a
happly refl a = refl

}
% ```



\subtree{
\title{Functions are functors}
% ```agda
\agda{
ap : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {x y : A} → (f : A → B) → x ＝ y → f x ＝ f y
ap f refl = refl

ap-id : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {x : A} → (f : A → B) → ap f (refl {a = x}) ＝ refl
ap-id f = refl

ap-comp : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {x y z : A} → (f : A → B) → (p : x ＝ y) → (q : y ＝ z) → ap f (p ∙ q) ＝ ap f p ∙ ap f q
ap-comp f refl p = refl
}
% ```

}

\subtree{
\taxon{definition}
\title{Fibres}
\p{Given a function #{f : A \to B}, we define the fibre of #{f} at #{b : B}, notated #{\fibre{f}{a}} to be the type
#{\Sigma_{a : A}{f(a) = b}}. }

\p{Note that this is subtly different to the preimage, as we can show that #{\Sigma_{(b : B)} \fibre{f}{b}} is equivalent to #{A} itself.}

% ```agda
\agda{

fibre : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → B → Type (𝓤 ⊔ 𝓥)
fibre f b = Σ _ λ a → f a ＝ b

total-fibre : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
total-fibre f = Σ _ (fibre f)
}
% ```
}

\p{The fibre type gives us a useful tool for talking about properties of maps. Generally if we have a property of types for example being #{n}-connected, we reuse the same terminology on maps to mean all fibres of the map have the corresponding property.}


\subtree{
\taxon{definition}
\title{propositional maps}

\p{We call a map propositional if the fibres are all sub-singletons. We will learn later that this is equivalent to the property of a map being an embedding.
This notion is a generalisation of injective set functions, infact if we - for a moment - imagine fibre to mean preimage, then a function of sets is injecte if each preimage is either empty or has a unique inhabitant.}

% ```agda
\agda{
is-prop-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-prop-map f = ∀ b → is-subsingleton (fibre f b)
}
% ```
}


\subtree{
\taxon{definition}
\title{contractible maps}

\p{A map is said to be contractible if each of its fibres is a singleton (is contractible). We will see later that this is one of many notions of an equivalence of maps.}

\agda{
is-contr-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-contr-map f = ∀ b → is-singleton (fibre f b)
}
% ```
}

