\date{2025-02-24}
\title{Univalence Universes}
\author{samueltoth}

\import{stt-macros}

% ```agda
\agda{
{-# OPTIONS --postfix-projections #-}
module foundations.Univalence where

open import foundations.universe
open import foundations.Identity
open import foundations.FunctionInverses
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Functions
open import foundations.Sigma
open import foundations.Embedding

}
% ```

\subtree[stt-000L]{
\taxon{definition}
\title{Univalence}
\p{A universe #{\UU} is said to be univalent if for any types #{A, B : \UU}, the map #{A = B \to A \simeq B} is an equivalence.}

% ```agda
\agda{
is-univalent : (𝓤 : Level) → Type (lsuc 𝓤)
is-univalent 𝓤 = ∀ {A B : Type 𝓤} → is-equiv (id→equiv {𝓤} {A} {B})
}
% ```

\p{Global univalence (or just univalence) says that every universe is univalent. This can be stated in agda because it features a universe #{\omega}, containing all \em{small} universes.}


% ```agda
\agda{
Univalence : Typeω
Univalence = ∀ {𝓤} → is-univalent 𝓤
}
% ```
}

% ```agda
\agda{
}
% ```

\subtree{
\title{Univalence implies the J rule for equivalences}
\taxon{theorem}

\p{}

% ```agda
\agda{
module WithLocalUnivalence {𝓤} (UU : is-univalent 𝓤) where
  ua : ∀ {A B : Type 𝓤} → A ≃ B → A ＝ B
  ua e = is-equiv.bwd UU e

  ua-linv : ∀ {A B : Type 𝓤} → (p : A ≃ B) → id→equiv (ua p) ＝ p
  ua-linv p = is-equiv.section-fwd UU .snd p

  ua-idequiv : ∀ {A : Type 𝓤} → ua {A} idequiv ＝ refl
  ua-idequiv {A} = {!!} where
    I : id→equiv (ua {A} idequiv) ＝ id→equiv refl
    I = ua-linv idequiv

  

  -- equiv-J : ∀ {𝓥} {A : Type 𝓤} (P : ∀ B (p : A ≃ B) → Type 𝓥) → P A idequiv → ∀ B (p : A ≃ B) → P B p
  -- equiv-J P prefl B p  = J (λ B p → P B {!id→equiv p!}) prefl (ua p)

  ua-comp : ∀ {A B C : Type 𝓤} {e1 : A ≃ B} {e2 : B ≃ C} → ua  e1 ∙ ua e2 ＝ ua (equiv-comp e1 e2)
  ua-comp = {!!}
}
% ```
}


\subtree{
\tag{ergonomics}
\title{An interface into univalence}

\p{We want to make an ergonomic interface into univalence, in particular we make certain operations on identities compute on univalence}

% ```agda
\agda{
module WithGlobalUnivalence (GU : Univalence) where
  
}
% ```
}

