\date{2025-02-24}
\taxon{theorem}
\title{Equivalences have singleton fibres}

\import{stt-macros}

% ```agda
\agda{
module foundations.EquivContrFibre where

open import foundations.universe
open import foundations.CoherentIsomorphism
open import foundations.Functions
open import foundations.Singleton
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.FibrePath
open import foundations.Identity
open import foundations.Homotopy
open import foundations.DependentIdentity
open import foundations.PathReasoning
}
% ```

\p{



}

% ```agda
\agda{
is-equiv→is-contr-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-equiv f → is-contr-map f
is-equiv→is-contr-map {f = f} eq b = mk-contr (bwd b , η b) contr where
  open is-equiv eq

  lem : ∀ a p → ap f ((ap bwd (sym p)) ∙ ε a) ∙ p ＝ η b
  lem a refl = ap f (ε a) ∙ refl ＝⟨ ∙-reflr _ ⟩
                ap f (ε a)        ＝⟨ coherent a ⟩
                η (f a)           ∎


  contr : (x : fibre f b) → (bwd b , η b) ＝ x
  contr (a , p) = _≃_.bwd fibre-path ((ap bwd (sym p)) ∙ ε a , lem a p)

}
% ```
