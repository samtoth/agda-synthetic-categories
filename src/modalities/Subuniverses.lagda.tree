\taxon{module}
\title{(Reflective) Subuniverses}
\author{samueltoth}
\date{2025-05-09}
\meta{module}{\startverb modalities.Subuniverses \stopverb}
\import{stt-macros}

% ```agda
\agda{
module modalities.Subuniverses where

open import foundations.Prelude
open import ufAxioms
open import modalities.HigherModality
open import core.Postwhisker
open import core.PiSection
}
% ```


\subtree[stt-003Z]{
\taxon{definition}
\title{Subuniverse}

\p{A subuniverse is a subtype of some universe}

% ```agda
\agda{
SubU : ∀ (𝓤 𝓥 : Level) → Type (lsuc (𝓤 ⊔ 𝓥))
SubU 𝓤 𝓥 = Subtype (Type 𝓤) 𝓥
}
% ```
}

\subtree[stt-0040]{
\title{Reflector}
\taxon{definition}
\meta{defines}{\startverb ["Reflector", "Reflector.○", "Reflector.○∈S",
                           "Reflector.η-○", "Reflector.reflects", "mk-rfltor"] \stopverb}
\p{Given a subuniverse #{S} of #{\UU}, we say that a type #{A : \UU} has a reflection
if there is a type #{○ A} in #{S} and a map #{\eta_○ : A \to \circ A} such that any map from #{A}
into a type in #{S} factors through #{\eta}. This final condition can be stated by
asking postcomposition by #{\eta} to be an equivalence for all types in #{S}.}

% ```agda
\agda{
record is-reflector
        {𝓤 𝓥} (S : SubU 𝓤 𝓥)
        (A : Type 𝓤) (○A : Type 𝓤)
        (η : A → ○A) : Type (lsuc 𝓤 ⊔ 𝓥) where
  constructor mk-is-rfltor
  field
    ○∈S : ○A ∈ S
    reflects : ∀ {C : Type 𝓤} → C ∈ S → is-equiv (postcomp C η)

  ○-elim : ∀ {C : Type 𝓤} → C ∈ S → (A → C) → (○A → C)
  ○-elim cs = is-equiv.bwd (reflects cs)

  ○-elim-β : ∀ {C : Type 𝓤} (p : C ∈ S) (f : A → C)
             → ○-elim p f ∘ η ~ f
  ○-elim-β p f a = happly (is-equiv.ε (reflects p) f) a

  module ∈S▸η {C : Type 𝓤} {g h} (C∈S : C ∈ S)
    = is-equiv (postwhisker-is-equiv←ap-compose {A = A} {g = g}{h}
                         (is-embedding←is-equiv (reflects C∈S)))

record Reflector {𝓤 𝓥} (S : SubU 𝓤 𝓥)
              (A : Type 𝓤) : Type (lsuc 𝓤 ⊔ 𝓥) where
  constructor mk-rfltor
  field
    ○ : Type 𝓤
    η : A → ○
    has-is-reflector : is-reflector S A ○ η

  open is-reflector has-is-reflector public
}
% ```
}

\subtree[stt-0042]{
\title{A subuniverse contains #{\bigcirc} modal types}
\taxon{theorem}

\p{In [[modalities.HigherModality]], we start by defining the reflectors, and say that a type
is #{\bigcirc}-modal if the reflection map is an equivalence. In this setting, this definition
is a theorem.}

% ```agda
\agda{
in-subU←η-is-equiv : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥}
                       {A : Type 𝓤}
                     → (RA : Reflector S A)
                     → is-equiv (RA .Reflector.η)
                     → A ∈ S
in-subU←η-is-equiv {S = S} RA eq
  = tr (_∈ S)
       (ua (mk≃ η eq e⁻¹))
       ○∈S where open Reflector RA
}
% ```

\p{We can also show that a type is in #{S} iff #{\eta_\circ} has a retract}

% ```agda
\agda{
η-has-retract←in-subU : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥}
                       {A : Type 𝓤}
                       (RA : Reflector S A)
                       → A ∈ S
                       → retract (RA .Reflector.η)
η-has-retract←in-subU RA a∈S = (bwd id , happly (ε id)) where
  open Reflector RA
  open is-equiv (reflects a∈S)

η-is-equiv←retract : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥}
                         {A : Type 𝓤}
                         (RA : Reflector S A)
                       → retract (RA .Reflector.η)
                       → is-equiv (RA .Reflector.η)
η-is-equiv←retract RA (f , ret)
  = is-equiv←qiso
      ( f
      , ret
      , ∈S▸η.bwd ○∈S (η ◂ ret)) where open Reflector RA

in-subU←η-retract : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥}
                       {A : Type 𝓤}
                       (RA : Reflector S A)
                       → retract (RA .Reflector.η)
                       → A ∈ S
in-subU←η-retract RA ρ = in-subU←η-is-equiv RA (η-is-equiv←retract RA ρ)
}
% ```
}


\subtree[stt-0041]{
\title{Reflective subuniverse}
\taxon{definition}
\meta{defines}{\startverb ["Reflective", "mk-reflective", "is-reflective.has-reflectors"] \stopverb}
\p{A subuniverse is reflective if it has all reflectors.}

% ```agda
\agda{
record Reflective {𝓤 𝓥} (S : SubU 𝓤 𝓥) : Type (lsuc 𝓤 ⊔ 𝓥) where
  constructor mk-reflective
  field
    ○ : Type 𝓤 → Type 𝓤
    η : ∀ {A} → A → ○ A
    has-is-reflector : ∀ {A} → is-reflector S A (○ A) η

  module R {A} = is-reflector (has-is-reflector {A})
  open R public

  module ▸η {A} {B} {g h}
    = is-equiv (postwhisker-is-equiv←ap-compose {g = g}{h}
                         (is-embedding←is-equiv (reflects {A = B} (○∈S {A}))))

  reflector : ∀ (A : Type 𝓤) → Reflector S A
  reflector A = mk-rfltor (○ A) η has-is-reflector

}
% ```
}

\subtree[stt-006L]{
\date{2025-06-25}
\title{Modal types are closed under Identity}
\taxon{lemma}

%```agda
\agda{

η＝-retract : ∀ {𝓤 𝓥} {A : Type 𝓤}
                {x y : A}
                {S : SubU 𝓤 𝓥}
                (RS : Reflective S)
              → A ∈ S
              → retract (Reflective.η RS {x ＝ y})
η＝-retract RS a = (∈S▸η.bwd a id , happly (∈S▸η.ε a id)) where open Reflective RS

is-modal-＝ : ∀ {𝓤 𝓥} {A : Type 𝓤}
                {x y : A}
                {S : SubU 𝓤 𝓥}
                (RS : Reflective S)
              → A ∈ S
              → (x ＝ y) ∈ S
is-modal-＝ {A = A}{x}{y} RS a
  = in-subU←η-retract (reflector (x ＝ y)) (η＝-retract RS a) where
  open Reflective RS
}
%```
}

\subtree[stt-004U]{
\date{2025-06-04}
\taxon{definition}
\title{Sigma closed reflective subuniverses}

\p{A reflective subuniverse \SS is said to be sigma closed when given
   #{A : \UU} and #{B : A \to \UU} such that #{A \in \SS} and #{B(a) \in \SS}
   for all #{a : A}, the type #{\Sigma_{(a : A)}B(a)} is in \SS.}

%```agda
\agda{
is-Σ-closed : ∀ {𝓤 𝓥} (S : SubU 𝓤 𝓥) → Type _
is-Σ-closed {𝓤} S = ∀ {A : Type 𝓤} {B : A → Type 𝓤}
                       → A ∈ S → (∀ a → B a ∈ S)
                       → (Σ[ a ∶ A ] B a) ∈ S
}
%```
}



\subtree[stt-006F]{
\taxon{theorem}
\date{2025-06-25}
\title{Sigma closed reflective subuniverses are higher modalities}

\p{Every #{\Sigma}-closed reflective subuniverse
#{(S, \bigcirc, \eta)} gives rise to a higher modality}

\proof{
\p{We have the data of the modal operator and unit, as well as the fact that
modal types are closed under Identity, so we just need to show that this data
satisfies the modal induction principal for [higher modalities](stt-000G).}

\p{Let #{P : \bigcirc A \to \UU} and #{f : \Pi_{(x : A)} \bigcirc P(\eta(x))},
then to define a map #{\Pi_{(x : \bigcirc A)} \bigcirc P(x)}, [it suffices](stt-006J)
to define a section of #{\pi : \Sigma_{(x : \bigcirc A)} \bigcirc P(x) \to \bigcirc
A}.}

\p{Because #{S} is closed under #{\Sigma} types, we can use the universal property
of the reflector at #{A} to define a map
#{\bar{f} : \bigcirc A \to \Sigma_{(x : \bigcirc A)} \bigcirc P(x)} just by it's action
on #{\eta(x)} for #{x : A}. This map, is given by #{\eta(x) \mapsto (\eta(x), f(x))}.}

\p{To show that #{\bar{f}} is indeed a section, we first note that
the universal property of the reflector gives us #{\pi \bar{f} \eta \sim \eta}.
Then because postcomposition by #{\eta} at a modal type is an equivalence,
[so is postwhiskering](stt-006I) by #{\eta} (assuming funext), thus we can apply the
inverse map to get a homotopy #{\pi \bar{f} \sim \id}.}
}

%```agda
\agda{
HigherModality←Σ-ref-SubU
  : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥} (Sref : Reflective S)
      (SΣ : is-Σ-closed S)
    → HigherModality 𝓤
HigherModality←Σ-ref-SubU {𝓤} {S = S} rfl cls
  = mod where
  open HigherModality
  module S = Reflective rfl

  f'' : ∀ {A : Type 𝓤}
          (P : S.○ A → Type 𝓤)
        → (Π A (S.○ ∘ P ∘ S.η))
        → A → Σ (S.○ A) (S.○ ∘ P)
  f'' P f a = (S.η a , f a)

  f' : ∀ {A : Type 𝓤}
          (P : S.○ A → Type 𝓤)
        → (Π A (S.○ ∘ P ∘ S.η))
        → S.○ A → Σ (S.○ A) (S.○ ∘ P)
  f' P f = S.○-elim (cls S.○∈S λ _ → S.○∈S)
                 (f'' P f)
  secη : ∀ {A : Type 𝓤}
          {P : S.○ A → Type 𝓤}
          {f : Π A (S.○ ∘ P ∘ S.η)}
        → fst ∘ f' P f ∘ S.η ~ S.η
  secη = fst ◂ S.○-elim-β _ _

  sec : ∀ {A : Type 𝓤}
          (P : S.○ A → Type 𝓤)
        → (Π A (S.○ ∘ P ∘ S.η))
        → section (fst {B = S.○ ∘ P})
  sec {A} P f = (f' P f , S.▸η.bwd secη)

  mod : HigherModality 𝓤
  mod .○_ A = S.○ A
  mod .○-η = S.η
  mod .○-ind P f = Π←section (sec P f)
  mod .○-β P f a
    = tr (S.○ ∘ P) (S.▸η.bwd secη (S.η a)) (snd (f' P f (S.η a)))
         ＝⟨ ap (λ p → tr (S.○ ∘ P) p (snd (f' P f (S.η a)))) (happly (S.▸η.ε secη) a) ⟩
      tr (S.○ ∘ P) (ap fst (S.○-elim-β _ (f'' P f) a)) (snd (f' P f (S.η a)))
         ＝⟨ ap (λ p → coe p (snd (f' P f (S.η a)))) (sym (ap-∘ (S.○ ∘ P) fst _)) ⟩
      tr (S.○ ∘ P ∘ fst) (S.○-elim-β _ (f'' P f) a) (snd (f' P f (S.η a)))
         ＝⟨ apᵈ snd (S.○-elim-β _ (f'' P f) a) ⟩
      snd (f'' P f a)
         ＝⟨⟩
      f a ∎
  mod .＝-○-is-○-modal = η-is-equiv←retract
                          (S.reflector _)
                          (η＝-retract rfl S.○∈S)
}
%```
}
