\date{2025-02-24}
\title{Embeddings}

\import{stt-macros}

\p{Embeddings are the homotopy coherent generalisation of injective functions}

% ```agda
\agda{
module foundations.Embedding where

open import foundations.Universes
open import foundations.Functions
open import foundations.Identity
open import foundations.Homotopy
open import foundations.CoherentIsomorphism
open import foundations.QuasiIsomorphism
open import foundations.Sigma
open import foundations.FunctionInverses
open import foundations.PathReasoning
open import foundations.EquivContrFibre
open import foundations.Singleton
}
% ```

\subtree{
\title{embedding}
\taxon{definition}

\p{A function #{f : A \to B} is an embedding if #{f^* : x = y \to f(x) = f(y)} is an embedding}

% ```agda
\agda{

is-embedding : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-embedding f = ∀ {x y} → is-equiv (ap f {x} {y})

unap : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-embedding f → ∀ {x y} → f x ＝ f y → x ＝ y
unap emb = is-equiv.bwd emb
}
% ```
}


\subtree{
\taxon{theorem}
\title{Equivalences are embeddings}

% ```agda
\agda{

is-embedding←is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-equiv f → is-embedding f 
is-embedding←is-equiv {B = B} {f = f} eq {x} {y} = is-equiv←qiso qiso' where
  open is-equiv eq renaming (bwd to finv)
}
% ```

\proof{
\p{Suppose #{f} is an equivalence, we will find a quasi-inserve to #{\textit{ap}_f}.
Given an identity #{p : f x = f y}, we obtain #{f^{-1}(f(x)) = f^{-1}(f(y))} by applying the inverse. }

% ```agda
\agda{
  inverse : f x ＝ f y → x ＝ y
  inverse p = {- x          ＝⟨ -} sym (η x) ∙ -- ⟩
              {- finv (f x) ＝⟨ -} ap finv p ∙ -- ⟩
              {- finv (f y) ＝⟨ -} η y -- ⟩
              {- y          ∎ -}
}
% ```

% ```agda
\agda{
  ret : retract-witness (ap f) inverse
  ret refl = inverse refl         ＝⟨⟩
             sym (η x) ∙ refl ∙ η y  ＝⟨ refl ⟩
             sym (η x) ∙ η x         ＝⟨ ∙-sym' (η x) ⟩
             refl ∎
}
% ```





% ```agda
\agda{
  sec : ap f ∘ inverse ~ id
  sec p = ap f (inverse p)                                 ＝⟨⟩
          ap f (sym (η x) ∙ ap finv p ∙ η y)               ＝⟨  ap-∙∙ f (sym (η x)) (ap finv p) (η y) ⟩
          ap f (sym (η x)) ∙ ap f (ap finv p) ∙ ap f (η y) ＝⟨ refl {a = ap f (sym (η x))} ⟩∙⟨ sym (ap-∘ f finv p) ⟩∙⟨ coherent y ⟩
          ap f (sym (η x)) ∙ ap (f ∘ finv) p ∙ ε (f y)     ＝⟨ refl {a = ap f (sym (η x))} ⟩∙⟨ sym (homotopy-natural ε p ) ⟩
          ap f (sym (η x)) ∙ ε (f x) ∙ ap id p             ＝⟨ refl {a = ap f (sym (η x))} ⟩∙⟨ sym (coherent x) ⟩∙⟨ ap-id _ ⟩
          ap f (sym (η x)) ∙ ap f (η x) ∙ p                ＝⟨ ∙.pullr B {a = ap f (η x)} (sym (ap-∙ f (sym (η x)) (η x))) {f = p} ⟩
          ap f (sym (η x) ∙ η (x)) ∙ p                     ＝⟨ ∙.elimr B (ap (ap f) (∙-sym' (η x))) {f = p} ⟩
          p ∎
}
% ```

% ```agda
\agda{
  qiso' : quasi-iso (ap f)
  qiso' .fst = inverse
  qiso' .snd .fst = ret
  qiso' .snd .snd = sec
}
% ```

}
}
