\date{2025-02-24}
\title{Embeddings}
\meta{module}{\startverb foundations.Embeddings \stopverb}
\import{stt-macros}

\p{Embeddings are the homotopy coherent generalisation of injective functions}

% ```agda
\agda{
module foundations.Embedding where

open import foundations.Universes
open import foundations.Functions
open import foundations.Identity
open import foundations.Homotopy
open import foundations.CoherentIsomorphism
open import foundations.QuasiIsomorphism
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.FibrePath
open import foundations.FunctionInverses
open import foundations.PathReasoning
open import foundations.EquivContrFibre
open import foundations.Singleton
open import foundations.IdentitySystem
}
% ```

\subtree{
\title{embedding}
\meta{defines}{\startverb ["is-embedding", "unap", "_◂emb_"] \stopverb}
\taxon{definition}

\p{A function #{f : A \to B} is an embedding if #{f^* : x = y \to f(x) = f(y)} is an embedding}

% ```agda
\agda{
is-embedding : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-embedding f = ∀ {x y} → is-equiv (ap f {x} {y})

unap : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
       → is-embedding f → ∀ {x y} → f x ＝ f y → x ＝ y
unap emb = is-equiv.bwd emb

_◂emb_  : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
          → is-embedding f → ∀ {𝓦} {C : Type 𝓦} {g h : C → A}
          → f ∘ g ~ f ∘ h → g ~ h
(fe ◂emb h) a = unap fe (h a)

embedding≃ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
               {f : A → B}
             → is-embedding f
             → ∀ x y
             → (f x ＝ f y)
             ≃ (x ＝ y)
embedding≃ emb _ _ = mk≃ (unap emb) (is-equiv⁻¹ emb)
}
% ```
}


\subtree{
\taxon{theorem}
\title{Equivalences are embeddings}

% ```agda
\agda{
is-embedding←is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
                        → is-equiv f → is-embedding f
is-embedding←is-equiv {B = B} {f = f} eq {x} {y} = ap-equiv←equiv eq

unap-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
       → is-equiv f → ∀ {x y} → f x ＝ f y → x ＝ y
unap-equiv eq = unap (is-embedding←is-equiv eq)

infixr 32 _◂eqv_
infixl 33 _▸eqv_

_◂eqv_  : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
          → is-equiv f → ∀ {𝓦} {C : Type 𝓦} {g h : C → A}
          → f ∘ g ~ f ∘ h → g ~ h
fe ◂eqv h = is-embedding←is-equiv fe ◂emb h

_▸eqv_ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
          → ∀ {𝓦} {C : Type 𝓦} {g h : B → C}
          → g ∘ f ~ h ∘ f → is-equiv f →  g ~ h
(_▸eqv_) {g = g} {h} H fe
  = (g ◂ ε ~⁻¹) ~∙ H ▸ bwd ~∙ h ◂ ε where open is-equiv fe

}
% ```
}

\subtree[stt-0043]{
\title{Embeddings from retracts}

\p{A map is an embedding if it has a retract. (Note that the opposite direction does not hold)}

% ```agda
\agda{
-- is-embedding←retract : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
--                          {f : A → B}
--                          → retract f
--                          → is-embedding f
-- is-embedding←retract {f = f} r = is-equiv←qiso iso where
--   g = r .fst
--   glinv = r .snd

--   lem : is-prop-map f
--   lem .(f y) (x , p) (y , refl)
--     = fibre-path→
--       ( sym (glinv _) ∙ ap g p ∙ glinv _
--       , ∙-reflr _ ∙ {!!})

--   iso : quasi-iso (ap f)
--   iso .fst p = sym (glinv _) ∙ ap g p ∙ glinv _
--   iso .snd .fst refl = ∙-sym' (glinv _)
--   iso .snd .snd p = {!!}

}
% ```
}
