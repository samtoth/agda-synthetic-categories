\date{2025-04-16}
\title{Spheres}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.Spheres \stopverb}

\import{stt-macros}


% ```agda
\agda{
module core.Spheres where

open import foundations.Prelude
open import ufAxioms
open import core.Suspensions 
open import ergonomics.Universal
open import ergonomics.PushoutUniv
open import ergonomics.auto
}
% ```


\subtree[stt-002O]{
\title{#{n}-spheres}
\meta{defines}{\startverb ["Sphere", "Circle"] \stopverb}

% ```agda
\agda{
opaque 
  Sphere : ℕ → Type 
  Sphere zero = ⊥
  Sphere (suc n) = Susp (Sphere n)

Circle : Type
Circle = Sphere 2
}
% ```
}


\subtree[stt-002P]{
\title{Universal property of the circle}

\p{The type of maps out of the circle #{S^1 \to X} is equivalent to loops in #{X} (#{\Sigma_{(x : X)} x = x}) }

\proof{

##{
\begin{align*}
  (S^1 \to X) &\equiv (\Sigma S^0 \to X) \\
              &\simeq (\Sigma 2 \to X)   \\
              &\simeq (\Sigma_{x_N , x_S : X}(2 \to x_N = x_S))   \\
              &\simeq (\Sigma_{x_N , x_S : X}((x_N = x_S) \times (x_N = x_S)))   \\
              &\simeq (\Sigma_{x_N : X}(x_N = x_N))   \\
\end{align*}
}

\p{where the final step follows via the [contractability of singletons](stt-001E)}

}

% ```agda
\agda{
opaque
  unfolding Sphere
  Circle-elim : ∀ {𝓤} {A : Type 𝓤} → (Circle → A) → (Σ[ x ∶ A ] (x ＝ x))
  Circle-elim f = (f N) , ap f (merid (ι₁ tt) ∙ sym (merid (ι₂ tt)))

-- Awaiting reflection machinery to give coconeᵘ ≃ Σ ...

-- Circle-UP≃ : ∀ {𝓤} {A : Type 𝓤} → (Circle → A) ≃ (Σ[ x ∶ A ] (x ＝ x))
-- Circle-UP≃ {A = A}
--   = (Circle → _)                             ≃⟨ Univ≃' auto! ⟩
--     Coconeᵘ A                                ≃⟨ {!!} ⟩
--     (Σ[ x ∶ A ] Σ[ y ∶ A ] (Susp ⊥ → x ＝ y)) ≃⟨ Σ-ap-≃ (λ a → Σ-ap-≃ (λ b → {!!})) ⟩
--     (Σ[ x ∶ A ] Σ[ y ∶ A ]
--       ((x ＝ y) × (x ＝ y)))                  ≃⟨ Σ-ap-≃ (λ a → Σ-singl') ⟩
--     Σ A (λ x → x ＝ x) ≃∎ 

}
% ```
}


