\date{2025-04-17}
\taxon{module}
\title{Universal property of the [Empty Type](Foundations.Empty)}
\import{stt-macros}

\meta{module}{\startverb Foundations.EmptyUP \stopverb}

% ```agda
\agda{
open import Foundations.Universes
open import Foundations.FunExt

module Foundations.EmptyUP (fe : FunExt-global) where

open import Foundations.Empty
open import Foundations.Unit
open import Foundations.Identity
open import Foundations.QuasiIsomorphism
open import Foundations.CoherentIsomorphism
open import Foundations.Sigma
open import Foundations.Functions
open import Foundations.EquivOfSingleton
open import Foundations.Singleton
}
% ```

\subtree[stt-002X]{
\taxon{theorem}
\meta{defines}{\startverb ["unit-ev-is-equiv", "unit-UP≃"] \stopverb}

% ```agda
\agda{

K¡-𝟙-is-equiv : ∀ {𝓤} {A : Type 𝓤} → is-equiv (λ (_ : 𝟙) → ¡_ {A = A})
K¡-𝟙-is-equiv = is-equiv←qiso iso where
  iso : quasi-iso _
  iso .fst _ = _
  iso .snd .fst _ = refl
  iso .snd .snd f = WithFunExt-global.funext→ fe λ ()

K¡-sing-is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
                   → is-singleton A
                   → is-equiv (λ (_ : A) → ¡_ {A = B})
K¡-sing-is-equiv s = is-equiv←qiso iso where
  iso : quasi-iso _
  iso .fst _ = s .centre
  iso .snd .fst a = s .central a
  iso .snd .snd _ = WithFunExt-global.funext→ fe λ ()

∅-UP≃ : ∀ {𝓤} {A : Type 𝓤} → 𝟙 ≃ (∅ → A)
∅-UP≃ = mk≃ (λ _ → ¡_) K¡-𝟙-is-equiv

∅-UP-sing : ∀ {𝓤} {A : Type 𝓤} → is-singleton (∅ → A)
∅-UP-sing = mk-singl ¡_ λ x → WithFunExt-global.funext→ fe (λ ())
}
% ```

}
