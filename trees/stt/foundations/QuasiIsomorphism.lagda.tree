\date{2025-02-21}
\title{Quasi Isomorphisms}

\import{stt-macros}

\p{Naively, an isomorphism is a function with a two-sided inverse. We can encode this directly in HoTT, but there is an issue;
being an isomorphism in this way is \em{not a property} of a type, but instead it is extra structure. This is in contrast to the
(many equivalent) notions of equivalence.}

% ```agda
\agda{
module foundations.QuasiIsomorphism where

open import foundations.universe
open import foundations.Functions
open import foundations.FunctionInverses
open import foundations.Singleton
open import foundations.Sigma
open import foundations.Identity
}
% ```

\subtree{
  \taxon{definition}
  \title{Quasi-isomorphism}
  \p{We want to reserve the word isomorphism for the coherent kind in [[CoherentIsomorphism]], and so here we define the naive kind of
  isomorphism to be called a quasi-isomorphism.}


% ```agda
\agda{
is-quasi-iso : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-quasi-iso f = Σ _ λ g → section-witness f g × retract-witness f g

infix 20 _≅_
record _≅_ {𝓤 𝓥} (A : Type 𝓤) (B : Type 𝓥) : Type (𝓤 ⊔ 𝓥) where
  constructor mk-iso
  field
    fwd : A → B
    fwd-iso : is-quasi-iso fwd 

  bwd : B → A
  bwd = fwd-iso .fst

  section-fwd : section fwd
  section-fwd = bwd , fwd-iso .snd .fst 

  retract-fwd : retract fwd
  retract-fwd = bwd , fwd-iso .snd .snd

  section-bwd : section bwd
  section-bwd = fwd , retract→section {g = bwd} (retract-fwd .snd)

  retract-bwd : retract bwd
  retract-bwd = fwd , section→retract {g = fwd} (section-fwd .snd)


infix 19 _≅⁻¹
_≅⁻¹ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → A ≅ B → B ≅ A
_≅⁻¹ iso = mk-iso bwd (fwd , section-bwd .snd , retract-bwd .snd) where
  open _≅_ iso

}
% ```
}

\subtree[stt-000J]{
\taxon{theorem}
\title{Isomorphisms are equivalences}

% ```agda
\agda{

}
% ```
}
