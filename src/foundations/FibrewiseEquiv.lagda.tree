\date{2025-04-14}
\title{Fibrewise equivalences}
\taxon{module}
\meta{module}{\startverb foundations.FibrewiseEquiv \stopverb}

\import{stt-macros}

% ```agda
\agda{
module foundations.FibrewiseEquiv where

open import foundations.Universes
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.Identity
open import foundations.DependentIdentity
open import foundations.Functions
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
}
% ```

\subtree[stt-0029]{
\taxon{definition}
\meta{defines}{\startverb ["is-fibrewise-equiv"] \stopverb}
\title{Fibrewise equivalence}

% ```agda
\agda{
is-fibrewise-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦} → (∀ a → B a → B' a) → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦)
is-fibrewise-equiv f = ∀ a → is-equiv (f a) 
}
% ```
}


\subtree[stt-0030]{
\taxon{theorem}
\meta{defines}{\startverb ["total-map", "is-total-equiv←is-fibrewise-equiv", "Σ-ap-≃"] \stopverb}
\title{Equivalences on fibres give equivalences on the total}

% ```agda
\agda{
total-map : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦}
               → (f : ∀ a → B a → B' a) → Σ A B → Σ A B'
total-map f (a , b) = (a , f a b)

is-total-equiv←is-fibrewise-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤}
   {B : A → Type 𝓥} {B' : A → Type 𝓦} → {f : ∀ a → B a → B' a}
   → is-fibrewise-equiv f → is-equiv (total-map f)
is-total-equiv←is-fibrewise-equiv {f = f} feq = is-equiv←qiso iso where
  module A x = is-equiv (feq x)
  open A

  iso : quasi-iso (total-map f)
  iso .fst (a , b) = a , bwd a b
  iso .snd .fst (a , b) = Σ-path→ (refl , retract-fwd a .snd b)
  iso .snd .snd (a , b) = Σ-path→ (refl , section-fwd a .snd b)

Σ-ap-≃ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦} → ((a : A) → B a ≃ B' a) →  Σ A B ≃ Σ A B'
Σ-ap-≃ eq = mk≃ (total-map (_≃_.fwd ∘ eq))
                (is-total-equiv←is-fibrewise-equiv (_≃_.has-is-eqv ∘ eq))
}
% ```
}
