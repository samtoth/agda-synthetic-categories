\date{2025-04-18}
\taxon{module}
\title{Equivalences of pre(post)-composed functions}
\author{samueltoth}
\meta{module}{\startverb foundations.CompositionEquiv \stopverb}
\import{stt-macros}


% ```agda
\agda{
open import foundations.FunExt

module foundations.CompositionEquiv (FE : FunExt-global) where

open import foundations.Universes 
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Singleton
open import foundations.Functions
open import foundations.Sigma
open import foundations.Identity
open import foundations.Homotopy
open import foundations.FunctionInverses
open import foundations.FunExt
open import foundations.EquivContrFibre
}
% ```



\subtree[stt-000O]{
\taxon{lemma}
\meta{defines}{\startverb ["precomp-qinv", "precomp-equiv", "precomp-equiv", "family-precomp-qinv",
                           "postcomp-qinv", "postcomp-equiv", "postcomp-≃"] \stopverb}

% HoTT 4.2.8 \citet{4.2.8}{HoTT}

\p{If #{f} has a quasi-inverse, then so do ##{f \circ - : (A \to B) \to (A \to C)} ##{- \circ f : (B \to C) \to (A \to C)}}

\proof{
% ```agda
\agda{
precomp-qinv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} {C : Type 𝓦}
             → quasi-iso f → quasi-iso {B = C → B} (f ∘_)
precomp-qinv {f = f} (g , ret , sec) = (g ∘_) , ret∘ , sec∘ where
  sec∘ : section-witness (_∘_ f) (g ∘_)
  sec∘ h  = WithFunExtω.funext→ FE (sec ▸ h)

  ret∘ : retract-witness (_∘_ f) (g ∘_)
  ret∘ h = WithFunExtω.funext→ FE (ret ▸ h)

precomp-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} {C : Type 𝓦}
                → is-equiv f → is-equiv {B = C → B} (f ∘_)
precomp-equiv eq = is-equiv←qiso (precomp-qinv (qiso←is-equiv eq))                

precomp-≃ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} (e : A ≃ B) {X : Type 𝓦}
                → (X → A) ≃ (X → B)
precomp-≃ (mk≃ f e) = mk≃ (f ∘_) (precomp-equiv e)

family-precomp-qinv : ∀ {𝓤 𝓥 𝓦} {C : Type 𝓦} {A : C → Type 𝓤} {B : C → Type 𝓥} {f : ∀ {c} → A c → B c} 
                → (∀ {q} → quasi-iso (f {q})) → quasi-iso {A = ∀ c → A c} {B = ∀ c → B c} (λ g a → f {a} (g a))
family-precomp-qinv {f = f} eq = (λ g c → eq .fst (g c)) , ret , sec where
   ret : retract-witness (λ g a → f (g a)) (λ g c → eq .fst (g c))
   ret f = WithFunExtω.funext→ FE (λ c → eq .snd .fst (f c))

   sec : section-witness  (λ g a → f (g a)) (λ g c → eq .fst (g c))
   sec g = WithFunExtω.funext→ FE (λ c → eq .snd .snd (g c))

family-precomp-equiv : ∀ {𝓤 𝓥 𝓦} {C : Type 𝓦} {A : C → Type 𝓤} {B : C → Type 𝓥} {f : ∀ {c} → A c → B c} 
                → (∀ {q} → is-equiv (f {q})) → is-equiv {A = ∀ c → A c} {B = ∀ c → B c} (λ g a → f {a} (g a))
family-precomp-equiv eq = is-equiv←qiso (family-precomp-qinv (qiso←is-equiv eq))


postcomp-qinv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} {C : Type 𝓦}
             → quasi-iso f → quasi-iso {B = A → C} (_∘ f)
postcomp-qinv {f = f} (g , η , ε) = (_∘ g) , η∘ , ε∘ where
  η∘ : retract-witness (_∘ f) (_∘ g)
  η∘ h = WithFunExtω.funext→ FE (h ◂ ε)

  ε∘ : section-witness (_∘ f) (_∘ g)
  ε∘ h = WithFunExtω.funext→ FE (h ◂ η)

postcomp-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} {C : Type 𝓦}
                → is-equiv f → is-equiv {B = A → C} (_∘ f)
postcomp-equiv eq = is-equiv←qiso (postcomp-qinv (qiso←is-equiv eq))


postcomp-≃ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} (e : A ≃ B) {C : Type 𝓦}
                → (B → C) ≃ (A → C)
postcomp-≃ (mk≃ f e) = mk≃ (_∘ f) (postcomp-equiv e)

}
% ```
}
}

\subtree[stt-003N]{
\taxon{theorem}
\title{equivalences from composition equivalences}
\p{We can extend this to show that the following are equivalent:}

\ul{
\li{#{f : A \to B} is an equivalence}
\li{#{- \circ f} is an equivalence}
\li{#{f \circ -} is an equivalence}
}

% ```agda
\agda{
is-equiv←postcomp : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (f : A → B)
        → (H : ∀ {𝓦} {X : Type 𝓦} → is-equiv {B = A → X} (_∘ f))
        → is-equiv f
is-equiv←postcomp f H = is-equiv←qiso iso where
  module e {𝓦} {X : Type 𝓦} = is-equiv (H {𝓦} {X})
  open e

  iso : quasi-iso f
  iso .fst = bwd id
  iso .snd .fst = happly (ε id)
  iso .snd .snd = happly
    (ap fst (is-prop←is-single (is-contr-map←is-equiv H f)
      (f ∘ bwd id , ap (f ∘_) (ε id)) (id , refl)) )


is-equiv←precomp : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (f : A → B)
        → (H : ∀ {𝓦} {X : Type 𝓦} → is-equiv {B = X → B} (f ∘_))
        → is-equiv f
is-equiv←precomp f H = is-equiv←qiso iso where
  module e {𝓦} {X : Type 𝓦} = is-equiv (H {𝓦} {X})
  open e

  iso : quasi-iso f
  iso .fst = bwd id
  iso .snd .fst = happly
    (ap fst
      (is-prop←is-single (is-contr-map←is-equiv H f)
                          ((bwd id ∘ f) , ap (_∘ f) (ε id))
                          (id , refl)))
  iso .snd .snd = happly (ε id)

}
% ```

}
