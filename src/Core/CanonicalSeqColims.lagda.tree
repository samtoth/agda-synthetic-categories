\date{2025-07-30}
\title{Canonical Sequential Colimits}
\taxon{module}
\meta{module}{Core.CanonicalSeqColims}
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
module Core.CanonicalSeqColims where

open import Foundations.Prelude
open import ufAxioms
open import Core.CanonicalPushouts
open import Core.Coequalisers
}
%```

\subtree[stt-008B]{
\title{Canonical Sequential Colimits}
\taxon{construction}

%```agda
\agda{
Seq-colimit : ∀ {𝓤} → Incr-seq 𝓤 → Type 𝓤
Seq-colimit S = Coeq id incrΣ where open Incr-seq S

seq-colimit : ∀ {𝓤} (S : Incr-seq 𝓤) → Cocone-seq S (Seq-colimit S)
seq-colimit S = mk-cocone-seq (λ {n} a → ι₂ (n , a))
                              λ {n} a → sym (glue (left (n , a)))
                                      ∙ glue (right (n , a))
}
%```
}

\subtree[stt-008C]{
\title{Cocones of canonical sequential colimits}
\taxon{lemma}

\p{Cocones over the span in \ref{stt-008B} defining the canonical
sequential colimits are equivalent to [sequential cocones](stt-0088)}

\proof{
\p{By calculation:}
##{
\begin{align*}
\rm{Cocone}(\rm{Colim}(A)) \simeq&
  \Sigma_{f : Q^{\tilde{A}}} \Sigma_{g : Q^{\tilde{A}}} (f \sim g \times
    \Pi_{a : \tilde{A}} f(a) = g(\rm{suc}(a))) \\
 \simeq& \Sigma_{f : Q^{\tilde{A}}} (f \sim f\ \rm{suc}) \\
 \simeq& \rm{Cocone}_{\rm{seq}}(\rm{Colim}(A))
\end{align*}
}
}

%```agda
\agda{
seq-cocone≃fork : ∀ {𝓤 𝓠} {S : Incr-seq 𝓤} {Q : Type 𝓠}
                  → Fork id (Incr-seq.incrΣ S) Q
                  ≃ Cocone-seq S Q
seq-cocone≃fork {_} {_} {S} {Q}
  = mk≃ map (is-equiv←qiso map-qiso) where
    open Incr-seq S
    Ã = Σ ℕ Point

    map : Fork id incrΣ Q → Cocone-seq S Q
    map (p , H) = mk-cocone-seq (λ a → p (_ , a)) λ a → H (_ , a)

    map-qiso : quasi-iso map
    map-qiso .fst (mk-cocone-seq ι comm)
      = (λ (_ , a) → ι a) , (λ (_ , a) → comm a)
    map-qiso .snd .fst _ = refl
    map-qiso .snd .snd _ = refl

seq-colim-is-colim :  ∀ {𝓤} {S : Incr-seq 𝓤}
                      → is-seq-colim S (seq-colimit S)
seq-colim-is-colim Q = is-equiv-∘ (seq-cocone≃fork ._≃_.has-is-eqv)
                                  coeq-is-coeq
}
%```
}
