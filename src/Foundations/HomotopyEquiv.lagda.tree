\title{Miscelaneous properties of Homotopies}
\taxon{module}
\meta{module}{Foundations.HomotopyEquiv}
\import{stt-macros}

%```agda
\agda{
open import Foundations.FunExt

module Foundations.HomotopyEquiv {𝓤} (FE : FunExtω 𝓤) where

open import Foundations.Universes
open import Foundations.Identity
open import Foundations.Sigma
open import Foundations.Functions
open import Foundations.Homotopy
open import Foundations.QuasiIsomorphism
open import Foundations.CoherentIsomorphism
import Foundations.Reasoning as R

open WithFunExtω FE

-- TODO: Maybe this is bad becase we have funext at all the leaves
--       rather than once at the top of some expression
module ~∙ {𝓥} {A : Type 𝓥} {B : A → Type 𝓤}
  = R (Π A B) _~_ ~refl (λ H K → K ~∙ H)
      (funext→ ∘ ~∙-reflr) (λ _ → refl)
      (λ H K J → funext→ (~∙-assoc J K H))

~∙-is-equiv
  : ∀ {𝓥} {A : Type 𝓥} {B : A → Type 𝓤}
      {f g h : Π A B} (H : f ~ g) → is-equiv {A = g ~ h} (H ~∙_)
~∙-is-equiv H = is-equiv←qiso iso where
  iso : quasi-iso (H ~∙_)
  iso .fst = (H ~⁻¹) ~∙_
  iso .snd .fst K = funext→ (λ a → sym'∙ (H a) (K a) )
  iso .snd .snd K = funext→ (λ a → sym∙ (H a) (K a))

~∙≃ : ∀ {𝓥} {A : Type 𝓥} {B : A → Type 𝓤}
        {f g h : Π A B} (H : f ~ g)
      → g ~ h ≃ f ~ h
~∙≃ H = mk≃ _ (~∙-is-equiv H)

~∙-is-equiv'
  : ∀ {𝓥} {A : Type 𝓥} {B : A → Type 𝓤}
      {f g h : Π A B} (H : g ~ h) → is-equiv {A = f ~ g} (_~∙ H)
~∙-is-equiv' H = is-equiv←qiso iso where
  iso : quasi-iso (_~∙ H)
  iso .fst = _~∙ (H ~⁻¹)
  iso .snd .fst K = ~∙.cancell (funext→ (~∙-sym H))
  iso .snd .snd K = ~∙.cancell (funext→ (~∙-sym' H))

}
%```
