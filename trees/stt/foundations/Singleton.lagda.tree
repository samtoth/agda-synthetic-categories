\date{2025-02-19}
\title{Contractible types}

\import{stt-macros}
\title{Singleton types}

% ```agda
\agda{
module foundations.Singleton where

open import foundations.universe
open import foundations.Identity
open import foundations.Unit
open import foundations.Sigma
}
% ```

\subtree[stt-0006]{

\taxon{definition}

\p{A type is called a singleton when it has a unique inhabitant. Alluding to the homotopy interpretation of HoTT, we also sometimes call types contractible, this is becuase they model contractible spaces in the semantics.
}

% ```agda
\agda{

record is-singleton {𝓤} (A : Type 𝓤) : Type 𝓤 where
  constructor mk-contr
  field
    centre : A
    central : ∀ x → centre ＝ x


open is-singleton public
}
% ```

}

\subtree{
\taxon{example}

\p{The unit type is a singleton type}

\subtree{
\taxon{proof}
% ```agda
\agda{
𝟙-is-singleton : is-singleton 𝟙
𝟙-is-singleton = mk-contr tt (λ _ → refl)
}
% ```
}
}


\subtree[stt-0007]{
\taxon{def}
\title{The Singleton type}

\p{Given a type #{A : \UU} with a point #{a : A}, we define a type #{\textrm{Sing}(A,a) : \UU := \Sigma_{x : X}(a = x)}.
Under the groupoid interpretation of type theory, this is the slice category of A under a (or equivalently coslice category).
} 

% ```agda
\agda{
Sing : ∀ {𝓤} (A : Type 𝓤) (a : A) → Type 𝓤
Sing A a = Σ A (λ x → a ＝ x)
}
% ```


\subtree{
\taxon{theorem}
\title{Contractibility of singletons}
\p{ #{\textrm{Sing}(A,a)} is a singleton for any #{A : \UU} and #{a : A}.}

\subtree{
  \taxon{proof}

  \p{Clearly, it is inhabited with inhabitant #{(a, \refl)}. To show that any other #{(x,p) : \textrm{Sing}(A,a)} is equal to #{(a,\refl)}, we use identity induction, and the #{\eta}-rule for pair types.} 

% ```agda
\agda{
Sing-is-singleton : ∀ {𝓤} {A : Type 𝓤} {a : A} → is-singleton (Sing A a)
Sing-is-singleton = mk-contr (_ , refl) (λ where (._ , refl) → refl)
}
% ```
}
}
}


\subtree[stt-0008]{
\title{Subsingletons}

\p{An important class of types are those which are subtypes of singleton types. We don't have the machinery yet to give a concrete meaning to subtypes, but they correspond to monomorphisms in the model.
}


 \subtree[stt-0009]{
   \taxon{definition}

   \p{A subsingleton is a type for which for any two inhabitants, there is a term of #{x = y}. Sometimes we say a subsingleton is a proposition.}

   % ```agda
   \agda{
is-subsingleton : ∀ {𝓤} → Type 𝓤 → Type 𝓤
is-subsingleton A = ∀ (x y : A) → x ＝ y
   }
   % ```
 }

 \subtree[stt-000A]{
   \taxon{theorm}
   \p{Every singleton is a subsingleton}

   % ```agda
   \agda{
is-singleton→is-subsingleton : ∀ {𝓤} {A : Type 𝓤} → is-singleton A → is-subsingleton A
is-singleton→is-subsingleton (mk-contr centre central) x y = sym (central x) ∙ central y
   }
   % ```
 }

}

\subtree[stt-000P]{
\taxon{theorem}

\p{We can show that a type is a subsingleton by assuming it is inhabited then showing it is a singleton}

\proof{

% ```agda
\agda{
is-singleton-if-inhabited→is-subsingleton : ∀ {𝓤} {A : Type 𝓤} → (A → is-singleton A) → is-subsingleton A
is-singleton-if-inhabited→is-subsingleton f x = is-singleton→is-subsingleton (f x) x

}
% ```

}

}
