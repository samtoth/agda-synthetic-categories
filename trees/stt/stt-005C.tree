\date{2025-06-13}
\title{Limitations of [agda-flat](stt-005B)}
\author{samueltoth}

\p{Agda flat gives you the ability to talk about crisp variables and to define
an inductive type corresponding to the flat modality (see \ref{Modalities.Flat.Flat}).
Natively, it does not contain a type former corresponding to the sharp modality however
it is possible to add an aproximation to such a thing as an axiom.}

\p{It is easy to define what it means for a [higher modality](stt-000G) to have a crisp induction principal,
but the issue is that the variables inside the sharp modal type former should themselves become flat annotated,
 but this is not possible in plain agda-flat.}

\subtree[stt-005D]{
  \title{Existing agda-flat formalisations}

  \ul{
    \li{[DavidJaz/Cohesion](https://github.com/DavidJaz/Cohesion) - which seems to be the implementation
        on which the agda-unimath one is based}
    \li{[dlicata335/cohesion-agda](https://github.com/dlicata335/cohesion-agda)}
    }

\p{They both take the approach of postulating a pointwise type operator for sharp. That is, they take a type family over crisp types and postulate a new type family over a regular type. You can then define e.g. crisp identity induction. It is then recommended to bundle your context into a record type and form sharp operators over these 'contexts'.}
}

\p{Whilst this \em{slight hack} does work, the ergonomics leave a lot to be desired. In an ideal world
there would be an agda switch that enabled the sharp annotations and modal operator as well.}
