\date{2025-03-07}
\title{Improving ergonomics within the library}

\p{Once we have bootstrapped the basics of the library, we wan't to try and make life as easy as possible
when developing maths and writing proofs. In this library we take the philosophy that we should make as much
use of agda's features as possible - and one of the best tools in this regard is instance search (which has been made
more powerful as of agda 2.8.x). Instance search allows us to automatically supply arguments to functions or records - which
can make life a lot easier when having to give routine proofs - such as that a type is of h-level #{n}.
}

\p{There are some caveats to this however. Mathametics inside of HoTT is what a lot of people call proof relevant,
in contrast to set level theories, we don't care just that two types are equal, but we care in particular which identification
we supply. It wouldn't make sense to ask the computer to synthesis a term of type #{\mathbb{N}}, in just the same way
that it wouldn't make sense to ask it to synthesise a path in the circle type.
}


\p{When we introduce a type, we general follow a predictable pattern. We usually characterise the identities of the type
and any universal (mapping in or out) properties.
When we have parameterised data types, we often find ourselves routinely applying these combinators for the whole type,
all the way down. We aim to make our lives easier here by making use of Agda's instance search mechanisms to apply these
charcterisations universally. This technique is not new - and our implementation here is mainly based off the [1lab](stt-0003),
as well as off [[sterling-blah-blah]].
}