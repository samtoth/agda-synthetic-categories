\date{2025-04-16}
\title{Coproducts}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb Foundations.Coproducts \stopverb}

\import{stt-macros}


% ```agda
\agda{
module Foundations.Coproducts where

open import Foundations.Universes
open import Foundations.Functions
open import Foundations.Identity
open import Foundations.Sigma
open import Foundations.QuasiIsomorphism
open import Foundations.CoherentIsomorphism
open import Foundations.FunExt
}
% ```

\subtree[stt-002Y]{
\title{Coproduct types}
\taxon{definition}
\meta{defines}{\startverb ["_⊎_"] \stopverb}

% ```agda
\agda{
data _⊎_ {𝓤 𝓥} (A : Type 𝓤) (B : Type 𝓥) : Type (𝓤 ⊔ 𝓥) where
  inl : A → A ⊎ B
  inr : B → A ⊎ B


⊎[_] : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
         → (A → C) × (B → C) → A ⊎ B → C
⊎[ f , g ] (inl x) = f x
⊎[ f , g ] (inr x) = g x

⊎-ind : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : A ⊎ B → Type 𝓦}
        → (Π A (C ∘ inl) × Π B (C ∘ inr)) → Π _ C
⊎-ind (f , g) (inl x) = f x
⊎-ind (f , g) (inr x) = g x

⊎-ind-is-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                   {C : A ⊎ B → Type 𝓦}
                 → FunExtω 𝓦 → is-equiv (⊎-ind {C = C})
⊎-ind-is-equiv FE = is-equiv←qiso (λ where
  .fst f → (f ∘ inl , f ∘ inr)
  .snd .fst (f , g) → refl
  .snd .snd f → WithFunExtω.funext→ FE λ where
    (inl x) → refl
    (inr x) → refl)

⊎-UP≃ : ∀ {𝓤 𝓥 𝓦} → FunExtω 𝓦
        → {A : Type 𝓤} {B : Type 𝓥}
          {C : A ⊎ B → Type 𝓦}
        → (Π _ (C ∘ inl) × Π _ (C ∘ inr)) ≃ Π _ C
⊎-UP≃ FE = mk≃ _ (⊎-ind-is-equiv FE)
}
% ```

}

