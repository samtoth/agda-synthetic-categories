\date{2025-03-17}
\taxon{module}
\title{Propositional maps are embeddings}
\meta{module}{\startverb Foundations.PropMapEmbedding \stopverb}
\import{stt-macros}

\todo{This section needs some polishing - the proof could benifit from
some diagrams and explanation and we need to find a home for sym-is-equiv
}

% ```agda
\agda{
module Foundations.PropMapEmbedding where

open import Foundations.Universes
open import Foundations.Functions
open import Foundations.Embedding
open import Foundations.EquivContrFibre
open import Foundations.EquivOfSingleton
open import Foundations.Identity
open import Foundations.Sigma
open import Foundations.CoherentIsomorphism
open import Foundations.QuasiIsomorphism
open import Foundations.Singleton
open import Foundations.FunctionInverses
open import Foundations.FibrewiseEquiv
open import Foundations.TotalEquiv
open import Foundations.SigmaPath
open import Foundations.EquivSingleton
}
% ```


% ```agda
\agda{
is-embedding←is-prop-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → {f : A → B}
                         → is-prop-map f → is-embedding f
is-embedding←is-prop-map {f = f} pm {x} {y} = is-fibrewise-equiv←is-total-equiv {f = λ y p → ap f {b = y} p}
                                              I y where

  III : ∀ {𝓤} {X : Type 𝓤} {x y : X} → is-equiv (sym {x = x} {y})
  III = is-equiv←qiso (sym , (λ _ → sym-sym) , λ _ → sym-sym)

  II : fibre f (f x) ≃ Σ _ (λ z → f x ＝ f z)
  II = Σ-ap-≃ (λ a → mk≃ sym III) 

  I : is-equiv (λ (a , b) → (a , ap f b))
  I = is-equiv←single-to-prop
         Sing-is-singleton
         (is-prop←equiv-to-prop II (pm (f x)))
         (total-map _)                           
}
% ```
