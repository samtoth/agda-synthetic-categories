\title{Open Modalities}
\date{2025-06-04}
\taxon{module}
\author{samueltoth}
\import{stt-macros}
\meta{module}{\startverb modalities.instances.OpenModalities \stopverb}

%```agda
\agda{
module modalities.instances.OpenModalities where

open import ufAxioms
open import foundations.Prelude
open import modalities.HigherModality
open import ergonomics.Extensionality
}
%```

\subtree[stt-004T]{
\title{The open modality associate to a proposition}
\taxon{definition}

\p{Given a proposition #{P}, the we can define a [higher modality](stt-000G)
   #{\bigcirc_P} as #{A \mapsto (P \to A)}.}

%```agda
\agda{
const-singleton-is-equiv : ∀ {𝓤} {P : Type 𝓤} (pprop : is-singleton P)
                      → ∀ {𝓥} {A : Type 𝓥}
                      → is-equiv (λ (a : A) (p : P) → a)
const-singleton-is-equiv psing = is-equiv←qiso qiso where
  qiso : quasi-iso _
  qiso .fst pa = pa (psing .centre)
  qiso .snd .fst = ~refl
  qiso .snd .snd pa = ext! (λ a → ap pa (psing .central a))


Open : ∀ {𝓤 𝓥} {P : Type 𝓤} (P-prop : is-prop P) → HigherModality (𝓤 ⊔ 𝓥)
Open {P = P} pprop .HigherModality.○_ A = P → A
Open {P = P} pprop .HigherModality.○-η a _ = a
Open {P = P} pprop .HigherModality.○-ind M f m p
  = tr M (funext→ (λ a → ap m (pprop p a))) (f (m p) p)
Open {P = P} pprop .HigherModality.○-β M f a
  = ext! λ p
          → ap
             (λ P → tr M P (f a p))
             ( ap funext→ (funext→ (λ q → ap-const (pprop p q)))
             ∙ funext-refl)
Open {P = P} pp .HigherModality.＝-○-is-○-modal {A = A}
  = is-equiv←qiso qiso where
  qiso : {x y : P → A} →
         quasi-iso (λ (a : x ＝ y) (p : P) → a)
  qiso .fst pxy = funext→ λ p → happly (pxy p) p
  qiso .snd .fst = funext.η
  qiso .snd .snd pxy
    = funext→ (λ p → ap funext→ (funext→ (λ a →
                         ap (λ p → happly p a) (ap pxy (pp a p))))
                       ∙ funext.η (pxy p))
}
%```
}
