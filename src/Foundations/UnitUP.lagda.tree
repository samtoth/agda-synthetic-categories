\date{2025-04-17}
\taxon{module}
\title{Universal property of the [Unit Type](Foundations.Unit)}
\import{stt-macros}

\meta{module}{\startverb Foundations.UnitUP \stopverb}


% ```agda
\agda{
module Foundations.UnitUP where

open import Foundations.Universes
open import Foundations.Unit
open import Foundations.Identity
open import Foundations.QuasiIsomorphism
open import Foundations.CoherentIsomorphism
open import Foundations.Sigma
open import Foundations.Functions
open import Foundations.Singleton
open import Foundations.FunExt
}
% ```

\subtree[stt-002Q]{
\taxon{theorem}
\meta{defines}{\startverb ["unit-ev-is-equiv", "unit-UP≃"] \stopverb}

% ```agda
\agda{

unit-ev-is-equiv : ∀ {𝓤} {A : Type 𝓤} → is-equiv (ev {B = λ _ → A} tt)
unit-ev-is-equiv = is-equiv←qiso iso where
  iso : quasi-iso (ev tt)
  iso .fst a _ = a
  iso .snd .fst _ = refl
  iso .snd .snd _ = refl

unit-UP≃ : ∀ {𝓤} {A : Type 𝓤} → (𝟙 → A) ≃ A
unit-UP≃ = mk≃ (ev tt) unit-ev-is-equiv

unit-const-is-equiv : ∀ {𝓤} {A : Type 𝓤} → is-equiv (const A 𝟙)
unit-const-is-equiv = is-equiv⁻¹ unit-ev-is-equiv
}
% ```

}

\subtree[stt-006S]{
\date{2025-06-27}
\title{Universal property for singleton types}
\taxon{theorem}

% ```agda
\agda{
sing-ev-is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
                   → FunExtω 𝓥
                   → (s : is-singleton A)
                   → is-equiv (ev {B = λ _ → B} (centre s))
sing-ev-is-equiv FE s = is-equiv←qiso iso where
  iso : quasi-iso (ev (centre s))
  iso .fst a _ = a
  iso .snd .fst f = WithFunExtω.funext→ FE (λ a → ap f (central s a))
  iso .snd .snd _ = refl

sing-UP≃ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
           → FunExtω 𝓥
           → (s : is-singleton A)
           → (A → B) ≃ B
sing-UP≃ FE sing = mk≃ (ev (sing .centre)) (sing-ev-is-equiv FE sing)

sing-const-is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
                      → FunExtω 𝓥
                      → (s : is-singleton A)
                      → is-equiv (const B A)
sing-const-is-equiv FE s = is-equiv⁻¹ (sing-ev-is-equiv FE s)
}
% ```

}
