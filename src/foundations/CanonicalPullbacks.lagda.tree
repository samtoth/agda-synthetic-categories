\date{2025-04-22}

\title{Canonical pullbacks}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb foundations.CanonicalPullbacks \stopverb}

\import{stt-macros}

% ```agda
\agda{
module foundations.CanonicalPullbacks where

open import foundations.Universes
open import foundations.Span
open import foundations.Functions
open import foundations.Identity
open import foundations.Homotopy
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Pullbacks
open import foundations.Sigma
open import foundations.SigmaProperties
open import foundations.3for2
open import foundations.EquivProp
open import foundations.EquivHomotopy
open import foundations.FibrewiseEquiv
open import foundations.IdentityEquiv
import foundations.FunExt as FE
import foundations.CompositionEquiv as CE
}
% ```


\subtree[stt-003J]{
\taxon{definition}
\title{The canonical pullback of a cospan}
\meta{defines}{\startverb ["Pullback", "pullback"] \stopverb}

\p{For any cospan #{B \xrightarrow{f} A \xleftarrow{g} C}, there exists a pullback
   cone defined as: #{(\Sigma_{(x : B)}\Sigma_{(y : C)}(f(x) = g(y)), \pi_1, \pi_2)}
   which we call the canonical pullback of #{f} and #{g}. It is written #{B \times_A A}.}

% ```agda
\agda{
module _ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
         (f : B → A) (g : C → A) where
 Pullback : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦)
 Pullback = Σ[ x ∶ B ] Σ[ y ∶ C ] (f x ＝ g y)

 pullback : Cone (mk-cospan A f g) Pullback
 pullback = mk-cone fst (fst ∘ snd) (snd ∘ snd)

 module pb where open Cone pullback public renaming (i to π₁; j to π₂)
}
% ```
}

\subtree[stt-003L]{
\taxon{definition}
\title{The gap map}
\meta{defines}{\startverb ["gap"] \stopverb}

\p{
Given a cone #{C} over a span #{S}, we can define a map called the gap-map from
the apex of #{C} to the pullback of #{S}.
}

% ```agda
\agda{
gap : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
        {f : B → A} {g : C → A}
        {𝓜} {D : Type 𝓜}
      → Cone (mk-cospan A f g) D
      → D → Pullback f g
gap (mk-cone i j filler) d = (i d , j d , filler d)
}
% ```
}

\subtree[stt-003K]{
\taxon{theorem}
\title{Canonical pullbacks are pullbacks}

\meta{defines}{\startverb ["pullback-is-pullback"] \stopverb}

\p{This either follows from noticing that the gap map on the pullback cone itself
is definitionally a section and a retraction of [cone-map](stt-003I), or from
repeatedly applying the universal property of sigma types:}

##{
\begin{align*}
  (Q \to \Sigma_{(x : B)}\Sigma_{(y : C)}(f(x) = g(y)))
    &\simeq \Sigma_{(i : Q \to B)}((q : Q) \to (\Sigma_{(y : C)}(f(i(q)) = g(y)))) \\
    &\simeq \Sigma_{(i : Q \to B)}\Sigma_{(j : Q \to C)}((q : Q) \to f(i(q)) = g(j(q))) \\
    &\simeq \textrm{Cone}_S(Q) 
\end{align*}
}

% ```agda
\agda{
pullback-is-pullback : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
                         {f : B → A} {g : C → A}
                       → is-pullbackω (mk-cospan _ f g) (pullback f g)
pullback-is-pullback {f = f} {g = g} Q
  = is-equiv←qiso (gap , ~refl , ~refl)
}
% ```
}

% ```agda
\agda{
module WithFunExt (FE : FE.FunExt-global) where
  open FE.WithFunExt-global FE
  open CE FE
}
% ```

\subtree[stt-003M]{
\taxon{theorem}
\title{Pullbacks via the gap map}
\p{A cone #{D} is a pullback iff #{\textrm{gap}(D)} is an equivalence}
\meta{defines}{\startverb ["is-pullback←gap", "gap-is-equiv←is-pullback"] \stopverb}

\proof{
\p{We need to show that for any #{Q}, #{\textrm{gap}(D) : D \toeq B \times_A C} is an
equivalence iff 
#{\textrm{cone-map}(D) : (Q \to D) \to Cone_S(Q)} is.
We know that #{- \circ \textrm{gap}(D) : (Q \to D) \to (Q \to B \times_A C)} is an equivalence
iff the gap map is, so we use then use the fact canonical pullbacks are pullbacks and
[[foundations.3for2]] to finish the proof. The situation can be summarised as follows:
}
\quiver{
\begin{tikzcd}
        {Q \to D} && {Q \to B \times_A C} \\
	\\
	& {\textrm{Cone}_S(Q)}
	\arrow["{- \circ \textrm{gap}(D)}", from=1-1, to=1-3]
	\arrow["{\textrm{cone-map}(D)}"'{pos=0.4}, from=1-1, to=3-2]
	\arrow["\sim", from=1-3, to=3-2]
\end{tikzcd}
}
}

% ```agda
\agda{
  is-pullback←gap : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
                      {f : B → A} {g : C → A}
                      {𝓜} {D : Type 𝓜}
                      (C : Cone (mk-cospan _ f g) D)
                    → is-equiv (gap C)
                    → is-pullbackω (mk-cospan _ f g) C
  is-pullback←gap C ge@(mk-eqv bwd qi) Q
    = is-equiv-∘ (pullback-is-pullback Q) (precomp-equiv ge)

  gap-is-equiv←is-pullback : ∀ {𝓤 𝓥 𝓦}
                      {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
                      {f : B → A} {g : C → A}
                      {𝓜} {D : Type 𝓜}
                      (C : Cone (mk-cospan _ f g) D)
                     → is-pullbackω (mk-cospan _ f g) C
                     → is-equiv (gap C)
  gap-is-equiv←is-pullback C Cpb
    = is-equiv←precomp (gap C)
      λ {_} {Q} → 3-for-2 (pullback-is-pullback Q) (Cpb Q)
}
% ```
}

\subtree[stt-003O]{
\taxon{theorem}
\title{Fibres of projections}

\p{Given a cospan, #{A \xrightarrow{f} C \xleftarrow{g} B}, we can classify the fibres of maps #{\pi_1 : A \times_C B \to A} and #{\pi_2 : A \times_C B \to B}:}

##{ \textrm{fib}_{\pi_1}(a) \simeq \textrm{fib}_{g}(f(a)) \\
    \textrm{fib}_{\pi_2}(b) \simeq \textrm{fib}_{f}(g(a)) 
}

\proof{
\p{This follows from [elementary properties of the #{\Sigma} type](foundations.SigmaProperties): }
% ```agda
\agda{

module _ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
         (f : B → A) (g : C → A) where
  open pb f g

  fib-π₁ : ∀ b → fibre π₁ b ≃ fibre g (f b)
  fib-π₁ b
    = fibre π₁ b                                    ≃⟨⟩
      Σ[ p ∶ Pullback _ _ ] ((π₁ p) ＝ b)            ≃⟨ Σ-assoc ⟩
      (Σ[ b' ∶ B ]
        ((Σ[ c ∶ C ] (f b' ＝ g c)) × (b' ＝ b)))    ≃⟨ Σ-ap-≃ (λ b → ×-swap) ⟩
      Σ[ b' ∶ B ] ((b' ＝ b) ×
        (Σ[ c ∶ C ] (f b' ＝ g c)))                  ≃⟨ Σ-＝singl ⟩
      (Σ[ c ∶ C ] (f b ＝ g c))                      ≃⟨ Σ-ap-≃ (λ c → sym≃) ⟩
      fibre g (f b) ≃∎

  fib-π₂ : ∀ c → fibre π₂ c ≃ fibre f (g c)
  fib-π₂ c
    = fibre π₂ c                                    ≃⟨⟩
      Σ[ p ∶ Pullback _ _ ] ((π₂ p) ＝ c)            ≃⟨ Σ-assoc ⟩
      (Σ[ b ∶ B ]
        ((Σ[ p ∶ (Σ[ c' ∶ C ] (f b ＝ g c')) ]
          (fst p ＝ c))))                           ≃⟨ Σ-ap-≃ (λ b → Σ-assoc) ⟩
      (Σ[ b ∶ B ]
        ((Σ[ c' ∶ C ] ((f b ＝ g c') × (c' ＝ c)))))  ≃⟨ Σ-ap-≃ (λ b → Σ-ap-≃ (λ c → ×-swap)) ⟩
      (Σ[ b ∶ B ]
        ((Σ[ c' ∶ C ] ((c' ＝ c) × (f b ＝ g c')))))  ≃⟨ Σ-ap-≃ (λ b → Σ-＝singl) ⟩
      (Σ[ b ∶ B ] (f b ＝ g c ))                     ≃⟨⟩
      fibre f (g c) ≃∎
}
% ```
}
}
