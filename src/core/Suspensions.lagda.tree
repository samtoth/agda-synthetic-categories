\date{2025-04-16}
\title{Suspensions}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.Suspensions \stopverb}

\import{stt-macros}


% ```agda
\agda{
module core.Suspensions where

open import foundations.Prelude
open import core.CanonicalPushouts
open import ufAxioms
open import ergonomics.Universal
open import ergonomics.PushoutUniv
open import ergonomics.Representation
open Universal ⦃...⦄
}
% ```


\subtree[stt-002M]{
\taxon{definition}
\title{Suspension}
\meta{defines}{\startverb ["Susp", "N", "S", "merid"] \stopverb}

\p{Given a type #{X}, we define the suspension #{ΣX} to be the pushout of:}

\quiver{
\begin{tikzcd}
	X && 1 \\
	\\
	1 && {\Sigma X}
	\arrow[from=1-1, to=1-3]
	\arrow[from=1-1, to=3-1]
	\arrow["N", from=1-3, to=3-3]
	\arrow["S"', from=3-1, to=3-3]
	\arrow["\lrcorner"{anchor=center, pos=0.125, rotate=180}, draw=none, from=3-3, to=1-1]
\end{tikzcd}
}

\p{We call the two distinguished points \em{N}orth and \em{S}outh and the family of maps from North to South
   the \em{merid}ians.}

% ```agda
\agda{
Susp : ∀ {𝓤} → Type 𝓤 → Type 𝓤
Susp X = Pushout {A = X} ! !
{-# NOINLINE Susp #-}

North South : ∀ {𝓤} {A : Type 𝓤} → Susp A
North = ι₁ tt
South = ι₂ tt

merid : ∀ {𝓤} {A : Type 𝓤} → A → Id (Susp A) North South
merid = glue
}
% ```
}


\subtree[stt-002N]{
\title{universal property of suspensions}

\p{The type #{\Sigma X \to Y} is equivalent to #{\Sigma_{y_N, y_S : Y} (X \to y_N = y_S)}.} 

\proof{
##{
\begin{align*}
  (\Sigma X \to Y) & \simeq (1 +^X 1 \to Y) \\
                   & \simeq (\Sigma_{(x, y : 1 \to Y)}(X \to x \sim y)) \\
                   & \simeq (\Sigma_{(x, y : Y)}(X \to x = y))
\end{align*}
}
}

\todo{
\p{Ideally we use universal property for pushouts macro,
   followed by coconeᵘ representation macro, but the latter isn't
   working at the moment.}
}

%```agda
\agda{
unquoteDecl cocone-repr≅ cocone-repr≃ =
  make-record-repr cocone-repr≅ cocone-repr≃ (quote Cocone)

Susp-UP≃ : ∀ {𝓤 𝓥} {X : Type 𝓤}
            {Y : Type 𝓥}
          → (Susp X → Y) ≃ (Σ[ x ∶ Y ] Σ[ y ∶ Y ] (X → x ＝ y))
Susp-UP≃ {X = X} {Y}
  = (Susp X → Y) ≃⟨ mk≃ _ Pushout-is-pushoutω  ⟩
    Cocone _ Y                                            ≃⟨ cocone-repr≃ ⟩
    (Σ[ f ∶ (𝟙 → Y) ] Σ[ g ∶ (𝟙 → Y )] (X → f tt ＝ g tt)) ≃⟨ Σ-ap-≃-fst unit-UP≃ ⟩
    (Σ[ x ∶ Y ] Σ[ g ∶ (𝟙 → Y) ] (X → x ＝ g tt))          ≃⟨ Σ-ap-≃ (λ x → Σ-ap-≃-fst (unit-UP≃)) ⟩
    Σ[ x ∶ Y ] Σ[ y ∶ Y ] (X → x ＝ y) ≃∎
}
%```
}
