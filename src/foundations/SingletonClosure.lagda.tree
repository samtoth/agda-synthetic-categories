\date{2025-02-28}
\author{samueltoth}
\title{Closure properties of being a singleton}

\import{stt-macros}

\p{Ultimately we can establish that the property of being a singleton is a specialisation of being a localisation and thus a sigma
closed reflexive subuniverse - giving us many closure properties for free. But for clarity, and for the technical purpose of
bootstrapping the formalisation, we give the explicit proofs of closure here.}

% ```agda
\agda{
module foundations.SingletonClosure where

open import foundations.Universes
open import foundations.Functions
open import foundations.FunctionInverses
open import foundations.Singleton
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.Identity
open import foundations.DependentIdentity
open import foundations.FunExt
}
% ```


% ```agda
\agda{
Singleton-Σ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} → is-singleton A → (∀ a → is-singleton (B a)) → is-singleton (Σ A B) 
Singleton-Σ {B = B} sa sb = mk-singl (sa .centre , sb (sa .centre) .centre) λ where
  (a , b) → Σ-path→ ((sa .central a) , IdP-inr (sb (sa .centre) .central _))
}
% ```


% ```agda
\agda{
Singleton-Π : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} → FunExtω 𝓥 → (∀ a → is-singleton (B a)) → is-singleton ((a : A) → B a) 
Singleton-Π {B = B} fe sb = mk-singl (λ a → sb a .centre) λ f → WithFunExtω.funext→ fe (λ a → sb a .central (f a))
}
% ```


% ```agda
\agda{
Singleton-Id : ∀ {𝓤} {A : Type 𝓤} → is-singleton A → ∀ x y → is-singleton (Id A x y)
Singleton-Id sngl x y .centre = is-prop←is-single sngl x y
Singleton-Id sngl x y .central refl = ∙-sym' (sngl .central x)
}
% ```

% ```agda
\agda{
is-single←section-single : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → (section f) → is-singleton A → is-singleton B
is-single←section-single f s sa .centre =  f (sa .centre)
is-single←section-single f s sa .central x = f (sa .centre) ＝⟨ ap f (sa .central _) ⟩
                                        f (s .fst x)   ＝⟨ s .snd x  ⟩
                                        x              ∎
}
% ```
