\date{2025-08-12}
\title{Pullbacks using Identity systems}
\taxon{module}
\meta{module}{Core.ExtPullbacks}
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
module Core.ExtPullbacks where

open import Foundations.Prelude
open import Ergonomics.Extensionality
open import ufAxioms
}
%```

\p{
We can define pullbacks (and other limits such as fibres) using
for types with non standard (identity systems)[TODO-WRITEUP].
This is particularly usefull for example when a type is locally small,
and we can construct small pullbacks over it.
}

\subtree[stt-008U]{
\title{Pullbacks using identity systems}
\taxon{construction}

%```agda
\agda{
Pullbackₑ : ∀ {𝓤 𝓥 𝓦 𝓘} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
              (f : A → C) (g : B → C)
              ⦃ IdC : Identity-system C 𝓘 ⦄
            → Type (𝓤 ⊔ 𝓥 ⊔ 𝓘)
Pullbackₑ {A = A} {B} f g = Σ[ a ∶ A ] Σ[ b ∶ B ] (f a ＝ₑ g b)

pullbackₑ : ∀ {𝓤 𝓥 𝓦 𝓘} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
              (f : A → C) (g : B → C)
              ⦃ IdC : Identity-system C 𝓘 ⦄
            → Cone (mk-cospan C f g) (Pullbackₑ f g)
pullbackₑ f g = mk-cone fst (fst ∘ snd) (ext! ∘ snd ∘ snd)

pullbackₑ-is-pullback
  : ∀ {𝓤 𝓥 𝓦 𝓘} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
      (f : A → C) (g : B → C)
      ⦃ IdC : Identity-system C 𝓘 ⦄
    → is-pullbackω (mk-cospan C f g) (pullbackₑ f g)
pullbackₑ-is-pullback f g
  = is-pullback←gap _ (is-total-equiv←is-fibrewise-equiv (λ
      a → is-total-equiv←is-fibrewise-equiv (λ
        b → ext!-is-equiv)))

module pbₑ {𝓤 𝓥 𝓦 𝓘} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
           ⦃ IdC : Identity-system C 𝓘 ⦄ {f : A → C} {g : B → C}
       = Cone (pullbackₑ f g) renaming (i to π₁; j to π₂)
}
%```
}

\subtree[stt-008V]{
\title{Fibres using identy systems}
\taxon{construction}

%```
\agda{
fibreₑ : ∀ {𝓤 𝓥 𝓘} {A : Type 𝓤} {B : Type 𝓥}
           ⦃ s : Identity-system B 𝓘 ⦄
         → (A → B) → B → Type (𝓤 ⊔ 𝓘)
fibreₑ {A = A} f b = Σ[ a ∶ A ] (f a ＝ₑ b)

fibreₑ-cone : ∀ {𝓤 𝓥 𝓘} {A : Type 𝓤} {B : Type 𝓥}
                ⦃ s : Identity-system B 𝓘 ⦄
              → (f : A → B) (b : B)
              → Cone (mk-cospan _ f (const _ 𝟙 b)) (fibreₑ f b)
fibreₑ-cone f b = mk-cone fst ! (ext! ∘ snd)

fibreₑ-is-pullback
  : ∀ {𝓤 𝓥 𝓘} {A : Type 𝓤} {B : Type 𝓥}
      ⦃ s : Identity-system B 𝓘 ⦄
    → (f : A → B) (b : B)
    → is-pullbackω _ (fibreₑ-cone f b)
fibreₑ-is-pullback f b = is-pullback←gap _
  (is-total-equiv←is-fibrewise-equiv (λ a
    → is-equiv-∘
            (is-equiv⁻¹ (Σ-singl 𝟙-is-singleton tt ._≃_.has-is-eqv))
            ext!-is-equiv))
}
%```
}

