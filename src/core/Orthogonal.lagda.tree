\date{2025-05-17}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.Orthogonal \stopverb}
\import{stt-macros}

\title{Orthogonal maps}

% ```agda
\agda{
module core.Orthogonal where

open import foundations.Prelude
open import core.Arrow
open import core.Lifts
open import core.PullbackPower
open import ergonomics.notations.Orthogonality
}
% ```


\subtree[stt-0048]{
\title{Orthogonal maps}
\taxon{definition}

\p{Given maps #{f : A \to B} and #{g : C \to D}, we say
#{f} is orthogonal to #{g} when any [square](stt-003U) has
a unqique [lifting](stt-0044).}

% ```agda
\agda{
module _ {𝓤 𝓥 𝓦 𝓛} {A : Type 𝓤}
       {B : Type 𝓥} {C : Type 𝓦}
       {D : Type 𝓛} where
  are-orthogonal : ∀ (f : A → B) (g : C → D) → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛)
  are-orthogonal f g = ∀ (F : Arrow-map f g) → unique-lifts F
}
% ```
}

\subtree[stt-004B]{
\taxon{notation}

\p{When we have that #{f} is orthogonal to #{g}, we write
#{f \perp g}.}

% ```agda
\agda{
module notation {𝓤 𝓥 𝓦 𝓛} {A : Type 𝓤}
       {B : Type 𝓥} {C : Type 𝓦}
       {D : Type 𝓛} where
  instance
    orth-maps : Orthogonality (A → B) (C → D)
    orth-maps .Orthogonality.𝓦 = 𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛
    orth-maps .Orthogonality._⊥_ = are-orthogonal

open notation
}
% ```
}



\subtree[stt-004A]{
\title{Classification of orthogonal maps}
\taxon{theorem}

\p{For maps #{f : A → B} and #{g : C → D}, we have that the following
are equivalent:}

\ol{
  \li{#{f \perp g}}
  \li{The square defined in [[stt-004C]] is a pullback square}
  \li{The [pullback power](stt-004D) of f with g is an equivalence}
  \li{The [dependent postcomposition](stt-004M) by #{f} at the fibre of
      #{g} is an equivalence.}
}

\proof{
  \p{We have already shown (2) iff (3) as a [corollary](stt-004L) of the fact
     that the pullback power [is homotopic to the gap map](stt-004C).}

  \p{To show (1) iff (3), we note that the pullback power is an equiv
  iff for all #{(G = (t , b , H) : \Hom(f,g))},
  #{\textrm{fib}_{f \pitchfork g}(G)} is a singleton. [We have
  shown](stt-004K) the fibres of the pullback power are equivalent to the
  type of lifts of #{G}.}


%```agda
\agda{
pb-power-is-equiv←orthogonal : ∀ {𝓤 𝓥 𝓦 𝓛} {A : Type 𝓤} {B : Type 𝓥}
                               {C : Type 𝓦} {D : Type 𝓛}
                               {f : A → B} {g : C → D}
                               → are-orthogonal f g
                               → is-equiv (pullback-power f g)
pb-power-is-equiv←orthogonal {A = A}{B}{C}{D}{f}{g} orth
  = is-equiv←is-contr-map λ where
    G@(mk-amap t b H) → is-single←equiv-to-single
                        (pb-power-fibre≃lifts f g G e⁻¹)
                        (orth G)

}
%```
}
}


\subtree[stt-004N]{
\date{2025-05-24}
\taxon{remark}
\title{Orthogonality at types}
\p{We say that a type #{A} is orthogonal to a map when the unique map #{A \to 1}
   is.}
}


\subtree[stt-004O]{
\date{2025-05-24}
\taxon{definition}
\title{Orthogonality via composition}

\subtree[stt-004P]{
\taxon{theroem}
\p{A type #{A} is [orthogonal](stt-004N) to a map #{X \to Y} if precomposition
by f is an equivalence.}
}

\p{We postpone this proof until later, but for now in the formalisation we
   define orthogonality to be the types satisfying the above property.}

%```agda
\agda{
orthogonal-type : ∀ {𝓤 𝓥 𝓦} {X : Type 𝓤} {Y : Type 𝓥}
                    (f : X → Y)
                    (A : Type 𝓦) → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦)
orthogonal-type f A = is-equiv (postcomp A f)
}
%```

}
