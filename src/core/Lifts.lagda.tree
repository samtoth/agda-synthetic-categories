\date{2025-05-10}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.Lifts \stopverb}
\import{stt-macros}

\title{Lifting squares}

% ```agda
\agda{
module core.Lifts where

open import foundations.Prelude
open import core.Arrow
open import ergonomics.Representation
}
% ```


\subtree[stt-0044]{
\title{Lifts of squares}

\p{Given a square of morphisms, we define a lift of the
square to be a morphism from the bottom left to the top right
such that both triangles commute \em{and} that the pasting
of the triangles gives the full square.}

% ```agda
\agda{
module _ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥}
         {C : Type 𝓦} {D : Type 𝓜} {f : A → B}
         {f' : C → D} (G : Arrow-map f f') where
  private
    g = G .Arrow-map.top
    g' = G .Arrow-map.bot
    H = G .Arrow-map.comm

    sq : Arrow-map f f'
    sq = mk-amap g g' H


  record Lift : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓜) where
    constructor mk-lift
    field
      lift : B → C
      L : lift ∘ f ~ g
      K : f' ∘ lift ~ g'
      pastes : f' ◂ L ~ K ▸ f ~∙ H {- H ~ K ▸ f ~∙ f' ◂ L -}

  unquoteDecl Lift-repr≅ Lift-repr≃
    = make-record-repr Lift-repr≅ Lift-repr≃ (quote Lift)
}
% ```
}

\subtree[stt-0047]{
\title{Unique lifts}
\taxon{definition}

\p{We say a square has unique lifts if it's type of lifts
is singleton.}

% ```agda
\agda{
  unique-lifts : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓜)
  unique-lifts = is-singleton Lift
}
% ```
}


