\date{2025-02-21}
\title{Inverses of functions}
\taxon{module}
\meta{module}{\startverb Foundations.FunctionInverses \stopverb}

\import{stt-macros}

% ```agda
\agda{
module Foundations.FunctionInverses where

open import Foundations.Functions
open import Foundations.Homotopy
open import Foundations.Universes
open import Foundations.Identity
open import Foundations.Sigma

module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} where
}
% ```

\subtree[stt-000H]{
\taxon{definition}
\title{Sections}
\meta{defines}{\startverb ["section-witness", "section"] \stopverb}

\p{Given a map #{f : A \to B}, a section of f, or equivalently a right inverse is a map #{g : B \to A} together with a
homotopy: #{f \circ g \sim \id}}


% ```agda
\agda{
  section-witness : (f : A → B) → (g : B → A) → Type 𝓥
  section-witness f g = f ∘ g ~ id

  section : (f : A → B) → Type (𝓤 ⊔ 𝓥)
  section f = Σ (B → A) (section-witness f)
}
% ```

}

\subtree[stt-000I]{
\taxon{definition}
\title{Retracts}

\meta{defines}{\startverb ["retract-witness", "retracts"] \stopverb}

\p{Dually to [[stt-000H]], a retract (or left-inverse) of a map #{g : B \to A} is a map #{f : A \to B} together with an identity: #{id = f \circ g}}


% ```agda
\agda{
  retract-witness : (f : A → B) → (g : B → A) → Type 𝓤
  retract-witness f g = g ∘ f ~ id

  retract : (f : A → B) → Type (𝓤 ⊔ 𝓥)
  retract f = Σ (B → A) (retract-witness f)
}
% ```
}

\subtree[stt-001J]{
\taxon{remark}

\p{We can express this duality by saying #{f} is a retract of #{g} iff #{g} is a section of #{f}.}

% ```agda
\agda{
module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} where
  retract→section : ∀ {f : A → B} {g : B → A} → retract-witness f g → section-witness g f
  retract→section p = p

  section→retract : ∀ {f : A → B} {g : B → A} → section-witness g f → retract-witness f g
  section→retract p = p

}
% ```

}


\subtree[stt-0070]{
\title{Sections and retracts compose}
\taxon{theorem}

%```agda
\agda{
section-∘ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤}
              {B : Type 𝓥} {C : Type 𝓦}
              {f : B → C} {g : A → B}
            → section f → section g
            → section (f ∘ g)
section-∘ {f = f} {g} (sf , pf) (sg , pg)
  = (sg ∘ sf , f ◂ pg ▸ sf ~∙ pf)

retract-∘ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤}
              {B : Type 𝓥} {C : Type 𝓦}
              {f : B → C} {g : A → B}
            → retract f → retract g
            → retract (f ∘ g)
retract-∘ {f = f} {g} (rf , pf) (rg , pg)
  = (rg ∘ rf , rg ◂ pf ▸ g ~∙ pg)
}
%```
}
