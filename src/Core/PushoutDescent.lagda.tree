\date{2025-08-01}
\title{Descent for pushouts}
\taxon{module}
\meta{module}{Core.PushoutDescent}
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
module Core.PushoutDescent where

open import Foundations.Prelude
open import Ergonomics.Extensionality
open import ufAxioms
open import Core.CanonicalPushouts
open import Core.Arrow
open import Core.ArrowEquiv
open import Ergonomics.Representation
}
%```

\subtree[stt-008D]{
\title{Flattening lemma for pushouts}
\taxon{theorem}

\p{The flattening theorem essentially states that for a family #{P}
over a pushout #{A \times_C B}, the total type #{\tilde{P}} is
equivalent to the pushout of total types: #{\Sigma_A P
+_{\Sigma_C P} \Sigma_B P}.}

\proof{
\p{Given a span #{S : A \leftarrow B \rightarrow C} and a family #{P}
over the pushout of #{S}, we can define the total span #{\Sigma_{S}P}.
We first note that for some arbitrary type #{Q}, dependent cones over
#{S} at #{p \mapsto P(p) \to Q} are equivalent to cones over
#{\Sigma_{S} P} at #{Q} - this is analogous to [currying
functions](Foundations.PiProperties).  We then construct the following
square:
}

\quiver{
\begin{tikzcd}
	{\Pi_{p : A+^C B} Q^{P(p)}} && {Q^{\Sigma_{p : A+^CB} P(p)}} \\
	\\
	{\rm{cocone}^d(S,p \mapsto Q^{P(p)})} && {\rm{cocone}(\Sigma_S P,Q)}
	\arrow["{\rm{curry}}", from=1-1, to=1-3]
	\arrow["{\rm{cocone}^d}"', from=1-1, to=3-1]
	\arrow["{\rm{cocone}}", from=1-3, to=3-3]
	\arrow["{\rm{curry}}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{Since, currying (functions or cocones) and the dependent cocone
map are equivalences, then so is the cocone map on the right.}

}

%```agda
\agda{
module _ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
         (f : A → B) (g : A → C) where
  total-span : ∀ {𝓜} (P : Pushout f g → Type 𝓜)
               → Span _ _ _
  total-span P .Span.Centre = Σ A (P ∘ ι₂ ∘ g)
  total-span P .Span.Left = Σ B (P ∘ ι₁)
  total-span P .Span.left (a , b) = (f a , tr P (sym (glue a)) b)
  total-span P .Span.Right = Σ C (P ∘ ι₂)
  total-span P .Span.right = total-map-fst g

  total-cocone : ∀ {𝓜} (P : Pushout f g → Type 𝓜)
                 → Cocone (total-span P) (Σ (Pushout f g) P)
  total-cocone P .Cocone.p = total-map-fst ι₁
  total-cocone P .Cocone.q = total-map-fst ι₂
  total-cocone P .Cocone.filler (a , b)
    = Σ-path→ ( glue a , tr∙tr-sym' (glue a) b)

  total-is-pushout : ∀ {𝓜} (P : Pushout f g → Type 𝓜)
                     → is-pushoutω (total-span P) (total-cocone P)
  total-is-pushout P {𝓠} {Q} = eqv where
    module S' = Span (total-span P)

    Q' : Pushout f g → Type _
    Q' x = P x → Q

    lem2 : ∀ {a b} (p : a ＝ b) {x} {f : P a → Q}
           → (tr Q' p f) x ＝ f (tr P (sym p) x)
    lem2 refl = refl

    curry-cocone
      : Cocone (total-span P) Q → CoconeD _ pushout Q'
    curry-cocone (mk-cocone p q filler) = mk-coconeD (curry p) (curry q) λ
      a → funext→ λ b → lem2 (glue a) ∙ curry filler a b

    H : Arrow-map (cocone-map _ (total-cocone P) {Q})
                  (coconeᵈ-map (mk-span _ f g) pushout {Q'})
    H .Arrow-map.top = curry
    H .Arrow-map.bot = curry-cocone
    H .Arrow-map.comm h
      = ap (mk-coconeD (λ a b → h (ι₁ a , b)) (λ a b → h (ι₂ a , b)))
           (funext→ λ a → J {a = ι₁ (f a)} (λ z G →
                 funext→ (λ b → lem2 G ∙ ap h (Σ-path→ (G , tr∙tr-sym' G b)))
               ＝ apᵈ (curry h) G)
           funext-refl
           {ι₂ (g a)} (glue a))

    curry-cocone-is-equiv : quasi-iso curry-cocone
    curry-cocone-is-equiv .fst (mk-coconeD p q filler)
      = mk-cocone (uncurry p) (uncurry q)
          λ where (a , b) → sym (lem2 (glue a)) ∙ happly (filler a) b
    curry-cocone-is-equiv .snd .fst (mk-cocone p q filler)
      = Cocone-path→ _  _ (funext→ ~refl) (funext→ ~refl)
          λ a → ∙-reflr _ ∙ sym'∙ (lem2 (glue (fst a))) (filler a)
    curry-cocone-is-equiv .snd .snd (mk-coconeD p q filler)
      = ap (mk-coconeD p q) (funext→ λ
         a →   ap funext→ (funext→ (λ b → sym∙ (lem2 (glue a))
                                            (happly (filler a) b)))
             ∙ _≃_.η funext≃ (filler a))

    arr-eq : is-Arrow-equiv H
    arr-eq .fst = curry-is-equiv
    arr-eq .snd = is-equiv←qiso curry-cocone-is-equiv

    eqv : is-equiv (cocone-map _ (total-cocone P))
    eqv = is-equiv←Arrow-equiv⁻¹ {F = H} arr-eq Pushout-is-pushoutωᵈ
}
%```
}


\p{Before introducing the main descent theorem, we need some auxiliary
definitions.}


\subtree[stt-008M]{
\date{2025-08-03}
\title{Maps of spans}
\taxon{theorem}

\p{A map between spans #{S} and #{S'} is a diagram as follows where
all the squares commute:}

\quiver{
\begin{tikzcd}
	A && S && B \\
	\\
	{A'} && {S'} && {B'}
	\arrow[from=1-1, to=3-1]
	\arrow[from=1-3, to=1-1]
	\arrow[from=1-3, to=1-5]
	\arrow[from=1-3, to=3-3]
	\arrow[from=1-5, to=3-5]
	\arrow[from=3-3, to=3-1]
	\arrow[from=3-3, to=3-5]
\end{tikzcd}
}

\p{Equivalently, a span map is a pair of arrow maps between the
left and right maps of each span, together with a homotopy between
the two maps between the centre of the spans.}

%```agda
\agda{
record Span-map {𝓤 𝓥 𝓦} (S : Span 𝓤 𝓥 𝓦)
                {𝓤' 𝓥' 𝓦'} (S' : Span 𝓤' 𝓥' 𝓦')
                : Type (𝓤 ⊔ 𝓤' ⊔ 𝓥 ⊔ 𝓥' ⊔ 𝓦 ⊔ 𝓦') where
   constructor mk-span-map
   module S = Span S
   module S' = Span S'
   field
     h₁ : S.Left → S'.Left
     h₂ : S.Centre → S'.Centre
     h₃ : S.Right → S'.Right
     H  : h₁ ∘ S.left ~ S'.left ∘ h₂
     K  : h₃ ∘ S.right ~ S'.right ∘ h₂

   amap-l↓ : Arrow-map S.left S'.left
   amap-l↓ = mk-amap h₂ h₁ H

   amap-l : Arrow-map h₂ h₁
   amap-l = mk-amap S.left S'.left (H ~⁻¹)

   amap-r↓ : Arrow-map S.right S'.right
   amap-r↓ = mk-amap h₂ h₃ K

   amap-r : Arrow-map h₂ h₃
   amap-r = mk-amap S.right S'.right (K ~⁻¹)
}
%```
}

\subtree[stt-008N]{
\date{2025-08-03}
\title{Cartesian maps of spans}
\taxon{definition}

\p{A map between spans is said to be cartesian when each square
is [cartesian](stt-003V) (i.e. a pullback square).}

%```agda
\agda{
is-cartesian-span-map
  : ∀ {𝓤 𝓥 𝓦} {S : Span 𝓤 𝓥 𝓦}
      {𝓤' 𝓥' 𝓦'} {S' : Span 𝓤' 𝓥' 𝓦'}
    → Span-map S S' → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓤' ⊔ 𝓥' ⊔ 𝓦')
is-cartesian-span-map F = is-cartesian amap-l × is-cartesian amap-r
  where open Span-map F

is-cartesian-span-map-is-prop
  : ∀ {𝓤 𝓥 𝓦} {S : Span 𝓤 𝓥 𝓦}
      {𝓤' 𝓥' 𝓦'} {S' : Span 𝓤' 𝓥' 𝓦'}
      {F : Span-map S S'}
    → is-prop (is-cartesian-span-map F)
is-cartesian-span-map-is-prop
  = is-prop-Σ
      is-cartesian-is-prop
      (λ _ → is-cartesian-is-prop)

unquoteDecl Span-map-repr≅ Span-map-repr≃
  = make-record-repr Span-map-repr≅ Span-map-repr≃ (quote Span-map)
}
%```
}


\subtree[stt-008O]{
\date{2025-08-03}
\title{Pulling back squares}
\taxon{construction}

\p{Given span #{S}, and a cocone over #{S} centred at #{X}, we can
\em{'pull this square back'} along any map #{X' \to X}, to obtain a
span #{S'}, a cocone over #{S'} at #{X'} as well as a cartesian map
of spans #{S' \to S}.
}

%```agda
\agda{
module SquarePB {𝓤 𝓥 𝓦 𝓜 𝓛} {S : Span 𝓤 𝓥 𝓦} {X : Type 𝓜}
                (C : Cocone S X) {X' : Type 𝓛} (f : X' → X)
                where
  open Span S
  open Cocone C

  S' : Span (𝓤 ⊔ 𝓥 ⊔ 𝓜 ⊔ 𝓛) (𝓥 ⊔ 𝓜 ⊔ 𝓛) (𝓦 ⊔ 𝓜 ⊔ 𝓛)
  S' .Span.Centre = Pullback {B = Pullback p f} fst left
  S' .Span.Left = Pullback p f
  S' .Span.left  = fst
  S' .Span.Right = Pullback q f
  S' .Span.right ((r , x , H) , c , K) = (right c  , x , sym (sym H ∙ ap p K ∙ filler c) )

  C' : Cocone S' X'
  C' .Cocone.p = pb.π₂ _ _
  C' .Cocone.q = pb.π₂ _ _
  C' .Cocone.filler _ = refl

  proj : Span-map S' S
  proj .Span-map.h₁ = pb.π₁ _ _
  proj .Span-map.h₂ = pb.π₂ _ _
  proj .Span-map.h₃ = pb.π₁ q f
  proj .Span-map.H  = pb.filler _ _
  proj .Span-map.K _ = refl

  front-left : Arrow-map (pb.π₁ p f) f
  front-left = mk-amap (pb.π₂ p f) p (pb.filler p f)

  front-right : Arrow-map (pb.π₁ q f) f
  front-right = mk-amap (pb.π₂ q f) q (pb.filler _ _)

  front-right-is-cart : is-cartesian (front-right)
  front-right-is-cart = is-cartesian←is-pullback _ pullback-is-pullback

  front-left-is-cart : is-cartesian front-left
  front-left-is-cart = is-cartesian←is-pullback _ pullback-is-pullback

  amap-l↓-is-cart : is-cartesian (Span-map.amap-l↓ proj)
  amap-l↓-is-cart = is-cartesian←is-pullback _ pullback-is-pullback

  amap-l-is-cart : is-cartesian (Span-map.amap-l proj)
  amap-l-is-cart = rotate-is-cartesian _ amap-l↓-is-cart

  square~ : Arrow-map-path
              (paste-squares front-left (Span-map.amap-l proj))
              (paste-squares front-right (Span-map.amap-r proj))
  square~ .fst = ~refl
  square~ .snd .fst = filler
  square~ .snd .snd ((l , x' , H) , c , refl)
    = ∙-reflr _
    ∙ sym (ap (filler c ∙_) (∙-symsym (sym H) (filler c))
          ∙ sym∙ (filler c) (sym (sym H))
          ∙ sym-sym)

  proj-is-cartesian : is-cartesian-span-map proj
  proj-is-cartesian .fst = amap-l-is-cart
  proj-is-cartesian .snd = 3-for-2-cartesian square~
    (compose-cartesian front-left-is-cart amap-l-is-cart)
    front-right-is-cart

}
%```
}

\subtree[stt-008Q]{
\title{Maps in #{\rm{Cart}(S)}}

%```agda
\agda{
record Cart {𝓤 𝓥 𝓦} (Sp : Span 𝓤 𝓥 𝓦) 𝓜
         : Type (lsuc (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓜)) where
   constructor mk-cart
   field
     S' : Span (𝓤 ⊔ 𝓥 ⊔ 𝓜) (𝓥 ⊔ 𝓜) (𝓦 ⊔ 𝓜)
     proj : Span-map S' Sp
     has-is-cartesian : is-cartesian-span-map proj

   open Span S' public
   open Span-map proj public


unquoteDecl Cart-repr≅ Cart-repr≃
  = make-record-repr Cart-repr≅ Cart-repr≃ (quote Cart)
}
%```

\p{Given a span #{S} and a pair of cartesian span maps #{S'} and #{S''}
over #{S}, we define the type of maps between #{S'} and #{S''}.
In other words we consider the full subcategory of the slice category
of #{\rm{Span}} consisting of [cartesian span maps](stt-008N).}

\quiver{
\begin{tikzcd}
	&&&& {B'} \\
	&&&&&&&& {B''} \\
	&& {S'} &&&& B \\
	&&&&&& {S''} \\
	{A'} &&&& S \\
	&&&& {A''} \\
	&& A
	\arrow[from=1-5, to=2-9]
	\arrow[from=1-5, to=3-7]
	\arrow[from=2-9, to=3-7]
	\arrow[from=3-3, to=1-5]
	\arrow[from=3-3, to=4-7]
	\arrow[from=3-3, to=5-1]
	\arrow[from=3-3, to=5-5]
	\arrow[from=4-7, to=2-9]
	\arrow[from=4-7, to=5-5]
	\arrow[from=4-7, to=6-5]
	\arrow[from=5-1, to=6-5]
	\arrow[from=5-1, to=7-3]
	\arrow[from=5-5, to=3-7]
	\arrow[from=5-5, to=7-3]
	\arrow[from=6-5, to=7-3]
\end{tikzcd}
}

%```agda
\agda{
module _ {𝓤 𝓥 𝓦} {S : Span 𝓤 𝓥 𝓦} where
  Cart-path→ : ∀ {𝓜}
              → {C C' : Cart S 𝓜}
              → (p : C .Cart.S' ＝ C' .Cart.S')
              → IdP (ap (λ p → Span-map p S) p)
                    (C .Cart.proj)
                    (C' .Cart.proj)
              → C ＝ C'
  Cart-path→ {C = C} {mk-cart S' proj cart} refl refl
    = ap (mk-cart S' proj) (is-cartesian-span-map-is-prop _ _)


  record Cart-map {𝓜 𝓝} (S' : Cart S 𝓜) (S'' : Cart S 𝓝)
                  : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓜 ⊔ 𝓝) where
    constructor mk-cart-map
    module S' = Cart S'
    module S'' = Cart S''
    field
      map : Span-map (S'.S') (S''.S')

    module map = Span-map map

    field
      h₁-comm : S'.h₁ ~ S''.h₁ ∘ map.h₁
      h₂-comm : S'.h₂ ~ S''.h₂ ∘ map.h₂
      h₃-comm : S'.h₃ ~ S''.h₃ ∘ map.h₃

  Cart-map-is-equiv
    : ∀ {𝓜 𝓝} {S' : Cart S 𝓜} {S'' : Cart S 𝓝}
      → Cart-map {𝓜} {𝓝} S' S'' → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓜 ⊔ 𝓝)
  Cart-map-is-equiv F = is-equiv map.h₁
                      × is-equiv map.h₂
                      × is-equiv map.h₃ where
    open Cart-map F

  postulate
    Cart-ua→ : ∀ {𝓜} {S' S'' : Cart S 𝓜} (F : Cart-map {𝓜} {𝓜} S' S'')
               → Cart-map-is-equiv F
               → S' ＝ S''
  -- Cart-ua→ {𝓜} F (feq , geq , heq)
    -- = {!!}
    -- = Cart-path→ {𝓜 = 𝓜} {!!} {!!}
}
%```

\p{By the pullback pasting property the span map at the top is
cartesian when the two side maps are.}
}


\subtree[stt-008P]{
\title{Straightening cartesian span maps}
\taxon{lemma}
\citet{2.7}{rijke-2017}

\p{Given a span #{S}, we can define a map #{\rm{Cocone}(C,\UU) \to
\rm{Cart}(S)} - where #{\rm{Cart}(S)} is the type of spans #{S'}
together with a cartesian span map down into #{S}.}

%```agda
\agda{

module _ {𝓤 𝓥 𝓦} {Sp : Span 𝓤 𝓥 𝓦}  where
  open Span Sp renaming (Centre to S;
                         left to f;
                         right to g;
                         Left to A;
                         Right to B) using ()


  cart←cocone : ∀ {𝓜} → Cocone Sp (Type 𝓜) → Cart Sp 𝓜
  cart←cocone cc = mk-cart span proj cart where
    open Cocone cc renaming (p to Pa; q to Pb)

    span : Span _ _ _
    span .Span.Centre = Σ[ apa ∶ (Σ A Pa) ] Σ[ s ∶ S ] (fst apa ＝ f s)
    span .Span.Left = Σ A Pa
    span .Span.left ((.(f s) , pa) , s , refl) = (f s , pa)
    span .Span.Right = Σ B Pb
    span .Span.right ((_ , pa) , s ,  refl) = (g s , coe (filler s) pa)

    proj : Span-map span Sp
    proj .Span-map.h₁ = fst
    proj .Span-map.h₂ (_ , s , _) = s
    proj .Span-map.h₃ = fst
    proj .Span-map.H (s , a , refl) = refl
    proj .Span-map.K (s , a , refl) = refl

    H : ∀ s → fib-π₂ fst f s ._≃_.fwd
            ~ arrow-fibre (Span-map.amap-l proj) s
    H s ((((a , pa) , (s , refl)) , refl)) = refl

    lmap-eq : ∀ s → fibre (pb.π₂ fst f) s ≃ fibre fst (g s)
    lmap-eq s = fib-π₂ fst f s
             ∙≃ fibre-straighten Pa (f s)
             ∙≃ coe≃ (filler s)
             ∙≃ fibre-straighten Pb (g s) e⁻¹

    K : ∀ s → lmap-eq s ._≃_.fwd
            ~ arrow-fibre (Span-map.amap-r proj) s
    K s ((((a , pa) , (s , refl)) , refl)) = refl

    cart : is-cartesian-span-map proj
    cart .fst s = homotopy-is-equiv (H s) (fib-π₂ fst f s ._≃_.has-is-eqv)
    cart .snd s = homotopy-is-equiv (K s) (lmap-eq s ._≃_.has-is-eqv)
}
%```

\p{If the types in the span all live in a univalent unvirse #{\UU},
then this map is an equivalence.}

\proof{
\p{The type #{\rm{Cart}(S)} consists of the data:}

\ul{
\li{A span #{A' \xleftarrow{f} S' \xrightarrow{g} B'}}
\li{Maps #{h_A}, #{h_S}, #{h_B}}
\li{Homotopies #{H} and #{K}, witnessing the two squares involved commute}
\li{Proofs #{p_f} and #{p_g} witnessing that the squares are cartesian}
}

\p{We first note that the tuples #{f, H, p_f} and #{g,K,p_g} are
equivalent to fibrewise equivalences
#{\Pi_{(x : S)} \rm{fib}_{h_s}(x) \simeq \rm{fib}_{h_A}(f(x))} (and
respectively for #{g}). We then also pass #{(A', h_A)}, #{(S', h_S)}
and #{(B',h_B)} accross the straightning/unstraitening equivalences.
Resulting in the following data:}

\ul{
\li{#{Q : S \to \UU}}
\li{#{P_A : A \to \UU}}
\li{#{P_B : B \to \UU}}
\li{#{\Pi_{(x : S)} Q(x) \simeq P_A(f(x))}}
\li{#{\Pi_{(x : S)} Q(x) \simeq P_B(g(x))}}
}

\p{Now, by univalence, the first and last data together are
contractible, and so this is equivalent to the #{S} cocones at #{\UU}.
All that remains is to show that the map underlying this equivalence
is homotopic to the map we had preveously constructed.}
}

%```agda
\agda{
module _ {𝓤} {Sp : Span 𝓤 𝓤 𝓤}  where
  cart←cocone-is-equiv : is-equiv (cart←cocone {Sp = Sp} {𝓤})
  cart←cocone-is-equiv = {!!} where

    open Span Sp renaming (Centre to S;
                           left to f;
                           right to g;
                           Left to A;
                           Right to B) using ()

    bundle-map : ∀ {A B : Type 𝓤} (f : A → B)
                      → Bundle A → Bundle B → Type 𝓤
    bundle-map f (A' , pa) (B' , pb)
      = Σ[ f' ∶ (A' → B') ] (pb ∘ f' ~ f ∘ pa)

    amap←bmap : ∀ {A B : Type 𝓤} (f : A → B)
                      (A' : Bundle A) (B' : Bundle B)
                    → bundle-map f A' B'
                    → Arrow-map
                        (A' .snd)
                        (B' .snd)
    amap←bmap f (A' , pa) (B' , pb) (f' , H)
        = mk-amap f' f (H ~⁻¹)

    is-cartesian-bmap
      : ∀ {A B : Type 𝓤} {f : A → B} {A' : Bundle A} {B' : Bundle B}
        → bundle-map f A' B' → Type 𝓤
    is-cartesian-bmap {f = f} {(_ , pa)} {(_ , pb)} (f' , H)
      = is-cartesian {f = pa} {f' = pb} (mk-amap f' f (H ~⁻¹))

    tofib : ∀ {A B : Type 𝓤} {f : A → B} {A' : Bundle A} {B' : Bundle B}
            → (bundle-map f A' B')
            ≃ (∀ b → fibre (A' .snd) b → fibre (B' .snd) (f b))
    tofib {A} {B}{f} {(A' , pa)} {(B' , pb)}
      = equiv←qiso (mk-iso to (from , ret , sec)) where
      to : _ → _
      to F = arrow-fibre (amap←bmap _ _ _ F)

      from : _ → _
      from feq = Σ-Π-swap {X = A'} (λ _ → B')
                          (λ a fa → pb fa ＝ f (pa a))
                          (λ x → feq (pa x) (x , refl))

      ret : (a : bundle-map f _ (B' , pb)) → (from ∘ to) a ＝ a
      ret (f , H) = Σ-path→ (refl , (funext→ (λ a → ∙-reflr _ ∙ sym-sym)))

      sec : _
      sec f = funext→ (λ a → funext→ (λ where
        (a , refl) → Σ-path→ (refl , (∙-reflr _ ∙ sym-sym))))

    tofibeq : ∀ {A B : Type 𝓤} {f : A → B} {A' : Bundle A} {B' : Bundle B}
            → (Σ[ F ∶ bundle-map f A' B' ] is-cartesian-bmap {f = f}{A'}{B'} F)
            ≃ (∀ b → fibre (A' .snd) b ≃ fibre (B' .snd) (f b))
    tofibeq {A}{B}{f}{(A' , pa)}{(B' , pb)}
      = Σ (bundle-map f _ (B' , pb)) (is-cartesian-bmap {f = f}{_}{B' , pb})
          ≃⟨ Σ-ap-≃-fst tofib ⟩
        (Σ[ f' ∶ (∀ b → fibre pa b → fibre pb (f b))] is-fibrewise-equiv f')
          ≃⟨ fibrewise-equiv≃  ⟩
        ((b : A) → fibre pa b ≃ fibre pb (f b)) ≃∎

    strait-bundle
      : ∀ {A B} {f : A → B} (A' : Bundle A)
      → (Σ[ B' ∶ Bundle B ] Σ (bundle-map f A' B') (is-cartesian-bmap {f = f}{A'} {B'}))
      ≃ (Σ[ Q ∶ (B → Type 𝓤)] (∀ a → fibre (A' . snd) a ＝ Q (f a)))
    strait-bundle {A}{B}{f} Ab@(A' , pa)
      = (Σ[ B' ∶ (Bundle B) ]
          Σ (bundle-map f Ab B') (is-cartesian-bmap {f = f}{Ab}{B'}))
          ≃⟨ Σ-ap-≃ (λ bun → tofibeq) ⟩
        (Σ[ B' ∶ (Bundle B)] (∀ a → fibre pa a ≃ fibre (B' .snd) (f a)))
          ≃⟨ Σ-ap-≃-fst {B = λ Q → ∀ a → fibre pa a ≃ Q (f a)} straighten≃ ⟩
        (Σ[ Q ∶ (B → Type 𝓤)] ((a : A) → fibre pa a ≃ Q (f a)))
          ≃⟨ Σ-ap-≃ (λ Q → precomp-Π-≃ (λ c → ua≃)) ⟩
        Σ (B → Type 𝓤) (λ Q → (a : A) → fibre pa a ＝ Q (f a)) ≃∎

    shuffle : Cart Sp 𝓤
            ≃ (Σ[ S' ∶ Bundle S ] (
                 (Σ[ A' ∶ Bundle A ] Σ (bundle-map f S' A') (is-cartesian-bmap {f = f}{S'} {A'}))
                 ×
                 (Σ[ B' ∶ Bundle B ] Σ (bundle-map g S' B') (is-cartesian-bmap {f = g}{S'}{B'}))))
    shuffle = mk≃ map (is-equiv←qiso map-qiso) where
      map : Cart Sp 𝓤 → _
      map (mk-cart
            (mk-span S' f' g')
            (mk-span-map h₁ h₂ h₃ H K)
            (pf , pg))
        = (S' , h₂)
        , ((_ , h₁) , ((f' , H) , pf))
        , ((_ , h₃) , ((g' , K) , pg))

      bwd : _ → Cart Sp 𝓤
      bwd ((S' , h₂)
          , ((A' , h₁) , ((f' , H) , pf))
          , ((B' , h₃) , ((g' , K) , pg)))
          = mk-cart (mk-span S' f' g')
                    (mk-span-map h₁ h₂ h₃ H K)
                    (pf , pg)

      map-qiso : quasi-iso map
      map-qiso .fst = bwd
      map-qiso .snd .fst = ~refl
      map-qiso .snd .snd = ~refl

    unshuffle
      : (Σ[ Q ∶ (S → Type 𝓤)]
          ((Σ[ Pa ∶ (A → Type 𝓤)] (Q ~ Pa ∘ f))
           ×
          (Σ[ Pb ∶ (B → Type 𝓤)] (Q ＝ Pb ∘ g))))
      ≃ Cocone Sp (Type 𝓤)
    unshuffle = mk≃ map (is-equiv←qiso qiso) where
      map : _ → Cocone Sp (Type 𝓤)
      map (_ , ((Pa , H) , (Pb , refl)))
        = mk-cocone Pa Pb (sym ∘ H)

      unmap : Cocone Sp (Type 𝓤) → _
      unmap (mk-cocone p q filler)
        = q ∘ g , ((p , sym ∘ filler) , (q , refl))

      ret : retract-witness map unmap
      ret (S' , (Pb , H) , Pa , refl)
        = Σ-path→ (refl , ×-path→ ( Σ-path→ (refl
                                            , (funext→ (λ _ → sym-sym)))
                                  , refl))

      qiso : quasi-iso map
      qiso .fst = unmap
      qiso .snd .fst = ret
      qiso .snd .snd (mk-cocone p q filler)
        = ap (mk-cocone p q) (funext→ (λ _ → sym-sym))

    eqv : Cart Sp 𝓤 ≃ Cocone Sp (Type 𝓤)
    eqv
      = Cart Sp 𝓤
          ≃⟨ shuffle ⟩
        (Σ[ S' ∶ Bundle S ] (
          (Σ[ A' ∶ Bundle A ] Σ (bundle-map f S' A') (is-cartesian-bmap {f = f}{S'} {A'}))
            ×
          (Σ[ B' ∶ Bundle B ] Σ (bundle-map g S' B') (is-cartesian-bmap {f = g}{S'}{B'}))))
          ≃⟨ Σ-ap-≃ (λ S'
               → strait-bundle S' ×≃ strait-bundle S') ⟩
        (Σ[ S' ∶ Bundle S ]
          ((Σ[ Pa ∶ (A → Type 𝓤)] ((a : S) → fibre (S' .snd) a ＝ Pa (f a)))
            ×
          (Σ[ Pb ∶ (B → Type 𝓤)] ((a : S) → fibre (S' .snd) a ＝ Pb (g a)))))
          ≃⟨ Σ-ap-≃-fst {B = λ Q →
                        (Σ[ Pa ∶ (A → Type 𝓤)] ((a : S) → Q a ＝ Pa (f a)))
                          ×
                        (Σ[ Pb ∶ (B → Type 𝓤)] ((a : S) → Q a ＝ Pb (g a)))} straighten≃ ⟩
        (Σ[ Q ∶ (S → Type 𝓤)]
          ((Σ[ Pa ∶ (A → Type 𝓤)] ((a : S) → Q a ＝ Pa (f a)))
           ×
          (Σ[ Pb ∶ (B → Type 𝓤)] ((a : S) → Q a ＝ Pb (g a)))))
          ≃⟨ Σ-ap-≃ (λ a → Σ-ap-≃ (λ paH → Σ-ap-≃ (λ a₁ → funext≃ e⁻¹))) ⟩
        Σ (S → Type 𝓤)
         (λ Q →
            Σ (A → Type 𝓤) (λ Pa → Q ~ Pa ∘ f) ×
            Σ (B → Type 𝓤) (λ Pb → Q ＝ Pb ∘ g))
          ≃⟨ unshuffle ⟩
        Cocone Sp (Type 𝓤) ≃∎

}
%```
}


\subtree[stt-008L]{
\date{2025-08-03}
\title{Descent for pushouts}
\taxon{theorem}

\p{In the following, let #{S} be a span and #{C} be a cocone over #{S}
centred at #{X}.}

\p{Descent for pushouts states that if this cocone is a pushout, then
the map that takes a type #{X'} and a map #{X' \to X} to a cartesian
map over #{S} is an equivalence.}


%```agda
\agda{
module _ {𝓤} {Sp : Span 𝓤 𝓤 𝓤} {X : Type 𝓤}
         (C : Cocone Sp X) (C-po : is-pushoutω _ C) where

  cart-map : (Σ[ X' ∶ Type 𝓤 ] (X' → X)) → Cart Sp 𝓤
  cart-map (X' , f) = mk-cart S' proj proj-is-cartesian where
    open SquarePB C f


  descent-pushout : is-equiv cart-map
  descent-pushout =  is-equiv←Arrow-equiv {F = amap} amap-eqv (C-po)
    where

    cmap : ∀ (P : X → Type 𝓤)
           → Cart-map {𝓤} {𝓤} {𝓤} {Sp} {𝓤} {𝓤}
                      ((cart←cocone ∘ cocone-map Sp C) P)
                      ((cart-map ∘ unstraighten) P)
    cmap P = mk-cart-map
      (mk-span-map (pb≃ ._≃_.fwd)
                   (centre≃ ._≃_.fwd)
                   (pb≃ ._≃_.fwd)
                   comm1 comm2)
      ~refl
      ~refl
      ~refl module cmap where
      open Span Sp renaming (Left to A; Right to B; Centre to S)
      open Cocone C

      pb≃ : ∀ {𝓠} {A : Type 𝓠} {f : A → X}
              → (Σ[ a ∶ A ] P (f a)) ≃ Pullback f (fst {B = P})
      pb≃ {A = A} {f = p} = Σ-ap-≃ λ a →
          (P (p a))
              ≃⟨ Σ-＝singl' e⁻¹ ⟩
          (Σ[ x ∶ X ] ((p a ＝ x) × P x))
              ≃⟨ Σ-ap-≃ (λ a₁ → ×-swap) ⟩
          (Σ[ x ∶ X ] Σ[ px ∶ P x ] (p a ＝ x))
            ≃⟨ Σ-assoc e⁻¹ ⟩
          (Σ[ xp ∶ Σ X P ] (p a ＝ fst xp)) ≃∎

      centre≃ :  (Σ[ apa ∶ (Σ A (P ∘ p))  ] Σ[ s ∶ S ] (fst apa ＝ left s))
                ≃ Pullback {B = Pullback p (fst {B = P})} (fst) (left)
      centre≃ = Σ-ap-≃-fst pb≃

      comm1 : _≃_.fwd pb≃ ∘ Span.left ((cart←cocone ∘ cocone-map Sp C) P .Cart.S') ~
               Span.left ((cart-map ∘ unstraighten) P .Cart.S') ∘ _≃_.fwd centre≃
      comm1 ((a , p) , s , refl) = refl

      comm2 : _≃_.fwd pb≃ ∘ Span.right ((cart←cocone ∘ cocone-map Sp C) P .Cart.S') ~
               Span.right ((cart-map ∘ unstraighten) P .Cart.S') ∘ _≃_.fwd centre≃
      comm2 ((a , p) , s , refl)
        = Σ-path→
           ( refl
           , Σ-path→ let p =  Σ-path→ ((sym (filler s)) , tr∙tr-sym (filler s) p)
             in ( p , IdP-func←Square p _ _
               (sym
                 (Σ-path-ap-fst
                 ∙ sym (ap (_∙ sym (filler s))
                           (ap-const p))))))

    cmap-is-equiv : ∀ (P : X → Type 𝓤)
                    → Cart-map-is-equiv (cmap P)
    cmap-is-equiv P
      = ( pb≃ P .has-is-eqv
        , centre≃ P .has-is-eqv
        , pb≃ P .has-is-eqv) where
      open cmap
      open _≃_

    opaque
      commutes : ∀ (P : X → Type 𝓤)
               → (cart←cocone ∘ cocone-map Sp C) P ＝ (cart-map ∘ unstraighten) P
      commutes P = Cart-ua→ (cmap P) (cmap-is-equiv P)

    amap : Arrow-map (cocone-map _ C) cart-map
    amap = mk-amap unstraighten cart←cocone {!commutes!}

    amap-eqv : is-Arrow-equiv amap
    amap-eqv .fst = is-equiv⁻¹ straighten-is-equiv
    amap-eqv .snd = {!!}
}
%```
}
