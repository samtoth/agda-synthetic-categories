\title{Currying and uncurrying functions gives an equivalence}
\taxon{module}
\author{samueltoth}
\meta{module}{\startverb foundations.CurryEquiv \stopverb}
\date{2025-03-12}


\import{stt-macros}


% ```agda
\agda{
module foundations.PiProperties where

open import foundations.Universes
open import foundations.Sigma
open import foundations.CoherentIsomorphism
open import foundations.QuasiIsomorphism
open import foundations.FunctionInverses
open import foundations.Identity
open import foundations.Functions
open import foundations.FibrewiseEquiv
open import foundations.FunExt
}
% ```

% ```agda
\agda{
module _ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {C : (a : A) → B a → Type 𝓦} where
  curry : ((a : Σ[ x ∶ A ] B x) → C (a .fst) (a .snd)) → ((x : A) → (y : B x) → C x y)
  curry f a b = f (a , b)

  uncurry :  ((x : A) → (y : B x) → C x y) → ((a : Σ[ x ∶ A ] B x) → C (a .fst) (a .snd))
  uncurry f (a , b) = f a b

  curry-qiso : quasi-iso curry
  curry-qiso .fst = uncurry
  curry-qiso .snd .fst a = refl
  curry-qiso .snd .snd a = refl

  curry-is-equiv : is-equiv curry
  curry-is-equiv = is-equiv←qiso curry-qiso

  curry≃ : ((a : Σ[ x ∶ A ] B x) → C (a .fst) (a .snd)) ≃ ((x : A) → (y : B x) → C x y)
  curry≃ = mk≃ curry curry-is-equiv

  uncurry-qiso : quasi-iso uncurry
  uncurry-qiso .fst = curry
  uncurry-qiso .snd .fst a = refl
  uncurry-qiso .snd .snd a = refl

  uncurry-is-equiv : is-equiv uncurry
  uncurry-is-equiv = is-equiv←qiso uncurry-qiso

  uncurry≃ : ((x : A) → (y : B x) → C x y) ≃ ((a : Σ[ x ∶ A ] B x) → C (a .fst) (a .snd))
  uncurry≃ = mk≃ uncurry uncurry-is-equiv
}
% ```

%```agda
\agda{
module _ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : A → B → Type 𝓦} where
  flip : ((a : A) → (b : B) → C a b) → ((b : B) → (a : A) → C a b)
  flip f b a = f a b

  flip-qiso : quasi-iso flip
  flip-qiso .fst f a b = f b a
  flip-qiso .snd .fst _ = refl
  flip-qiso .snd .snd _ = refl

  flip-is-equiv : is-equiv flip
  flip-is-equiv = is-equiv←qiso flip-qiso

  flip≃ : ((a : A) → (b : B) → C a b) ≃ ((b : B) → (a : A) → C a b)
  flip≃ = mk≃ flip flip-is-equiv
}
%```
