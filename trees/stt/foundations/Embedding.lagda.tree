\date{2025-02-24}
\title{Embeddings}

\import{stt-macros}

\p{Embeddings are the homotopy coherent generalisation of injective functions}

% ```agda
\agda{
module foundations.Embedding where

open import foundations.universe
open import foundations.Functions
open import foundations.Identity
open import foundations.Homotopy
open import foundations.CoherentIsomorphism
open import foundations.QuasiIsomorphism
open import foundations.Sigma
open import foundations.FunctionInverses
open import foundations.PathReasoning
}
% ```

\subtree{
\title{embedding}
\taxon{definition}

\p{A function #{f : A \to B} is an embedding if #{f^* : x = y \to f(x) = f(y)} is an embedding}

% ```agda
\agda{

is-embedding : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-embedding f = ∀ {x y} → is-equiv (ap {x = x} {y} f)

is-embedding→inj : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-embedding f → ∀ {x y} → f x ＝ f y → x ＝ y
is-embedding→inj emb = is-equiv.bwd emb
}
% ```
}


\subtree{
\taxon{theorem}
\title{Equivalences are embeddings}

% ```agda
\agda{

is-equiv→is-embedding : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → is-equiv f → is-embedding f 
is-equiv→is-embedding {f = f} eq {x} {y} = qiso→is-equiv qiso' where
  open is-equiv eq renaming (bwd to finv)
}
% ```

\proof{
\p{Suppose #{f} is an equivalence, we will find a quasi-inserve to #{\textit{ap}_f}.
Given an identity #{p : f x = f y}, we obtain #{f^{-1}(f(x)) = f^{-1}(f(y))} by applying the inverse. }

% ```agda
\agda{
  inverse : f x ＝ f y → x ＝ y
  inverse p = {- x          ＝⟨ -} sym (ε x) ∙ -- ⟩
              {- finv (f x) ＝⟨ -} ap finv p ∙ -- ⟩
              {- finv (f y) ＝⟨ -} ε y -- ⟩
              {- y          ∎ -}
}
% ```

% ```agda
\agda{
  ret : retract-witness (ap f) inverse
  ret refl = inverse refl         ＝⟨⟩
             sym (ε x) ∙ refl ∙ ε y  ＝⟨ refl ⟩
             sym (ε x) ∙ ε x         ＝⟨ ∙-sym' (ε x) ⟩
             refl ∎
}
% ```





% ```agda
\agda{
  sec : ap f ∘ inverse ~ id
  sec p = ap f (inverse p)                    ＝⟨⟩
          ap f (sym (ε x) ∙ ap finv p ∙ ε y)  ＝⟨ {! !} ⟩
          {!!} ∎
}
% ```

% ```agda
\agda{
  qiso' : is-quasi-iso (ap f)
  qiso' .fst = inverse
  qiso' .snd .fst = sec
  qiso' .snd .snd = {!!}
}
% ```

}
}
