\date{2025-03-04}
\taxon{theorem}
\title{The fibre of a total map is equivalent to the fibre of the map}

\import{stt-macros}

% ```agda
\agda{
module foundations.SigmaFibrewiseEquiv where

open import foundations.universe
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.Identity
open import foundations.DependentIdentity
open import foundations.Functions
open import foundations.EquivContrFibre
open import foundations.Singleton
open import foundations.SingletonEquivSingleton



fibre-totalisation : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦} {f : ∀ a → B a → B' a}
                       {a : A} {b : B' a}
                     → fibre (totalisation f) (a , b) ≃ fibre (f a) b
fibre-totalisation {A = A} {B} {B'} {f = f} {a} {b}
  = fibre (totalisation f) (a , b)                                   ≃⟨⟩
    Σ (Σ A B) (λ (a' , ba) → totalisation f (a' , ba) ＝ (a , b))    ≃⟨ Σ-assoc ⟩
    Σ A (λ a' → Σ (B a') λ ba → totalisation f (a' , ba) ＝ (a , b)) ≃⟨⟩
    Σ A (λ a' → Σ (B a') λ ba → (a' , f a' ba) ＝ (a , b))           ≃⟨ Σ-ap-≃ (λ a' → Σ-ap-≃ λ ba → Σ-path e⁻¹) ⟩
    Σ A (λ a' → Σ (B a') λ ba → Σ (a' ＝ a)
        λ p → IdP (ap B' p) (f a' ba) b)                             ≃⟨ (Σ-ap-≃ λ a' → Σ-comm) ⟩
    Σ A (λ a' → Σ (a' ＝ a) λ p → Σ (B a') 
        λ ba → IdP (ap B' p) (f a' ba) b)                            ≃⟨ Σ-singl ⟩ 
    Σ (B a) (λ ba → f a ba ＝ b)                                     ≃⟨⟩
    fibre (f a) b ≃∎



is-fibrewise-equiv←is-total-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦}
                                    → {f : ∀ a → B a → B' a} → is-equiv (totalisation f)
                                    → is-fibrewise-equiv f
is-fibrewise-equiv←is-total-equiv {f = f} teq a
  = is-equiv←is-contr-map λ
      b → singleton←equiv-to-singleton fibre-totalisation (is-contr-map←is-equiv teq (a , b))
  

}
% ```
