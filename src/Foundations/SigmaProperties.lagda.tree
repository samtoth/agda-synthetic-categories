\date{2025-04-14}
\title{Miscellaneous properties of Sigma Types}
\taxon{module}
\meta{module}{\startverb Foundations.SigmaProperties \stopverb}
\import{stt-macros}

% ```agda
\agda{
module Foundations.SigmaProperties where

open import Foundations.Universes
open import Foundations.Sigma
open import Foundations.SigmaPath
open import Foundations.Identity
open import Foundations.Functions
open import Foundations.QuasiIsomorphism
open import Foundations.CoherentIsomorphism
open import Foundations.Singleton
open import Foundations.EquivContrFibre
open import Foundations.EquivSingleton
}
% ```

\meta{defines}{\startverb ["Σ-ap-≃-fst", "Σ-assoc", "Σ-＝singl", "Σ-＝singl'", "Σ-comm", "×-swap"] \stopverb}

% ```agda
\agda{
total-map-fst : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {A' : Type 𝓥} (f : A' → A)
                → {B : A → Type 𝓦} → Σ A' (B ∘ f) → Σ A B
total-map-fst f (a , b) = (f a , b)

total-is-equiv←fst-is-equiv
  : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {A' : Type 𝓥} {B : A → Type 𝓦}
    {f : A' → A} → is-equiv f → is-equiv (total-map-fst f {B})
total-is-equiv←fst-is-equiv {B = B} {f} feq = is-equiv←qiso the-iso where
  open is-equiv feq

  lem : ∀ {a} {b : (B ∘ f) a} →
      tr (B ∘ f) (η a) (tr B (sym (ε (f a))) b) ＝ b
  lem {a} {b} = tr (B ∘ f ) (η a) _   ＝⟨ tr∘ B f (η a) ⟩
                tr B (ap f (η a)) _   ＝⟨ ap (λ p → tr B p (tr B (sym (ε (f a))) b))
                                             (coherent a) ⟩
                tr B (ε (f a)) _      ＝⟨ tr∙tr-sym' {P = B} (ε (f a)) b ⟩
                b ∎

  the-iso : quasi-iso (total-map-fst f)
  the-iso .fst (a , b) = (bwd a , tr B (sym (ε a)) b)
  the-iso .snd .fst (a , b) = Σ-path→ (η a ,  lem)
  the-iso .snd .snd (a , b) = Σ-path→ (ε a ,  tr∙tr-sym' (ε a) b)

Σ-ap-≃-fst : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {A' : Type 𝓥} {B : A → Type 𝓦}
             → ((mk≃ f _) : A' ≃ A) → Σ A' (B ∘ f) ≃ Σ A B
Σ-ap-≃-fst {A = A} {A'} {B} eq
  = mk≃ (total-map-fst fwd) (total-is-equiv←fst-is-equiv has-is-eqv)
  where open _≃_ eq


Σ-assoc : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {C : (a : A) → B a → Type 𝓦}
          → Σ (Σ A B) (λ x → C (fst x) (snd x)) ≃ Σ A λ a → Σ (B a) λ b → C a b
Σ-assoc {A = A} {B} {C} = equiv←qiso iso where
  fwd : Σ (Σ A B) (λ x → C (fst x) (snd x)) → Σ A (λ a → Σ (B a) (C a))
  fwd ((a , b) , c) = a , (b , c)

  iso : Σ (Σ A B) (λ x → C (fst x) (snd x)) ≅ Σ A (λ a → Σ (B a) (C a))
  iso ._≅_.fwd = fwd
  iso ._≅_.fwd-iso .fst (x , y , z) = (x , y) , z
  iso ._≅_.fwd-iso .snd .fst a = refl
  iso ._≅_.fwd-iso .snd .snd a = refl


Σ-＝singl : ∀ {𝓤 𝓥} {A : Type 𝓤} {a' : A} {B : (a : A) → a ＝ a' → Type 𝓥}
        → Σ A (λ a → Σ (a ＝ a') λ p → B a p) ≃ B a' refl
Σ-＝singl {A = A} {a'} {B} = equiv←qiso iso where
  iso : Σ A (λ a → Σ (a ＝ a') (B a)) ≅ B a' refl
  iso ._≅_.fwd (.a' , refl , ba) = ba
  iso ._≅_.fwd-iso .fst ba = a' , refl , ba
  iso ._≅_.fwd-iso .snd .fst (.a' , refl , ba) = refl
  iso ._≅_.fwd-iso .snd .snd _ = refl


Σ-＝singl' : ∀ {𝓤 𝓥} {A : Type 𝓤} {a' : A} {B : (a : A) → a' ＝ a → Type 𝓥}
        → Σ A (λ a → Σ (a' ＝ a) λ p → B a p) ≃ B a' refl
Σ-＝singl' {A = A} {a'} {B} = equiv←qiso iso where
  iso : Σ A (λ a → Σ (a' ＝ a) (B a)) ≅ B a' refl
  iso ._≅_.fwd (.a' , refl , ba) = ba
  iso ._≅_.fwd-iso .fst ba = a' , refl , ba
  iso ._≅_.fwd-iso .snd .fst (.a' , refl , ba) = refl
  iso ._≅_.fwd-iso .snd .snd _ = refl


Σ-comm : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : A → B → Type 𝓦}
         → (Σ A λ a → Σ B (C a)) ≃ (Σ B λ b → Σ A λ a → C a b)
Σ-comm {A = A} {B} {C} = mk≃ f (is-equiv←qiso iso) where
  f : Σ A (λ a → Σ B (C a)) → Σ B (λ b → Σ A (λ a → C a b))
  f (a , b , c) = b , a , c

  iso : quasi-iso f
  iso .fst (b , a , c) = a , b , c
  iso .snd .fst _ = refl
  iso .snd .snd _ = refl

×-swap : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
         → (A × B) ≃ (B × A)
×-swap {A = A} {B} = mk≃ f (is-equiv←qiso qiso)  where
  f : A × B → B × A
  f (a , b) = b , a

  qiso : quasi-iso f
  qiso .fst (b , a) = (a , b)
  qiso .snd .fst (a , b) = refl
  qiso .snd .snd (b , a) = refl

_×≃_ : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦} {D : Type 𝓜}
       → A ≃ C → B ≃ D → (A × B) ≃ (C × D)
(mk≃ f ef) ×≃ (mk≃ g eg) = mk≃ map (is-equiv←qiso lem) where
  module f = is-equiv ef
  module g = is-equiv eg

  map : _ → _
  map (a , b) = (f a , g b)

  lem : quasi-iso map
  lem .fst (c , d) = (f.bwd c , g.bwd d)
  lem .snd .fst (a , b) = ×-path→ (f.η a , g.η b)
  lem .snd .snd (c , d) = ×-path→ (f.ε c , g.ε d)

Σ-tr : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : A → B → Type 𝓦}
         {a b : A} {p : a ＝ b} {b : B} {c : C a b}
       → (tr (λ a → Σ B (C a)) p (b , c)) ＝ (b , tr (λ a → C a b) p c)
Σ-tr {p = refl} = refl

Σ-interchange : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : A → Type 𝓥} {C : A → Type 𝓦}
                  {D : (a : A) → B a → C a → Type 𝓜} →
                  (Σ[ t@(a , b) ∶ Σ A B ] (Σ (C a) (D a b)))
                    ≃
                  (Σ[ t@(a , c) ∶ Σ A C ] (Σ[ b ∶ B a ] (D a b c)))
Σ-interchange = equiv←qiso iso where
  iso : ∀ {𝓤} {𝓥} {𝓦} {𝓜} {A : Type 𝓤} {B : A → Type 𝓥}
        {C : A → Type 𝓦} {D : (a : A) → B a → C a → Type 𝓜} →
      Σ (Σ A B) (λ t → Σ (C (t .fst)) (D (t .fst) (t .snd))) ≅
      Σ (Σ A C) (λ t → Σ (B (t .fst)) (λ b → D (t .fst) b (t .snd)))
  iso ._≅_.fwd ((a , b) , (c , d))= (a , c) , (b , d)
  iso ._≅_.fwd-iso .fst ((a , c) , (b , d))= ((a , b) , (c , d))
  iso ._≅_.fwd-iso .snd .fst ((_ , _) , (_ , _))= refl
  iso ._≅_.fwd-iso .snd .snd a = refl
}
% ```

\subtree[stt-002T]{
\taxon{theorem}
\title{Sums of singleton}
\meta{defines}{\startverb ["fibre-straighten", "Σ-singleton"] \stopverb}

\p{Given a family of singleton types #{P : A \to \UU}, the projection from the straightening is an equivalence.}
\proof{
\citet{4.9.3}{HoTT}
\p{The fibre of the projection #{\pi : \Sigma_{(x : A)}P(x) \to A} at some #{x : A} is equivalent to #{P(x)}. By assumption
we have the each #{P(x)} is singleton, and therefore so is each fibre of #{\pi}, thus it is an equivalence. }

% ```agda
\agda{
fibre-straighten : ∀ {𝓤 𝓥} {A : Type 𝓤} (P : A → Type 𝓥) →
                   ∀ x → fibre (fst {B = P}) x ≃ P x
fibre-straighten P x = equiv←qiso lem where
  lem : fibre fst x ≅ P x
  lem ._≅_.fwd ((a , p) , refl) = p
  lem ._≅_.fwd-iso .fst p = (x , p) , refl
  lem ._≅_.fwd-iso .snd .fst (_ , refl) = refl
  lem ._≅_.fwd-iso .snd .snd a = refl

singleton-fst-is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {P : A → Type 𝓥}
              → (∀ x → is-singleton (P x))
              → is-equiv (fst {B = P})
singleton-fst-is-equiv {P = P} sngl
  = is-equiv←is-contr-map λ
      b → is-single←equiv-to-single (fibre-straighten P b e⁻¹) (sngl b)


Σ-singleton : ∀ {𝓤 𝓥} {A : Type 𝓤} {P : A → Type 𝓥}
              → (∀ x → is-singleton (P x))
              → Σ A P ≃ A
Σ-singleton {P = P} sngl
  = mk≃ fst (singleton-fst-is-equiv sngl)
}
% ```
}
}
