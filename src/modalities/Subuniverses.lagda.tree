\taxon{module}
\title{(Reflective) Subuniverses}
\author{samueltoth}
\date{2025-05-09}
\meta{module}{\startverb modalities.Subuniverses \stopverb}
\import{stt-macros}

% ```agda
\agda{
module modalities.Subuniverses where

open import foundations.Prelude
open import ufAxioms
}
% ```


\subtree[stt-003Z]{
\taxon{definition}
\title{Subuniverse}

\p{A subuniverse is a subtype of some universe}

% ```agda
\agda{
SubU : ∀ (𝓤 𝓥 : Level) → Type (lsuc (𝓤 ⊔ 𝓥))
SubU 𝓤 𝓥 = Subtype (Type 𝓤) 𝓥
}
% ```
}

\subtree[stt-0040]{
\title{Reflector}
\taxon{defintion}
\meta{defines}{\startverb ["Reflector", "Reflector.○", "Reflector.○∈S",
                           "Reflector.η-○", "Reflector.reflects", "mk-rfltor"] \stopverb}
\p{Given a subuniverse #{S} of #{\UU}, we say that a type #{A : \UU} has a reflection
if there is a type #{○ A} in #{S} and a map #{\eta_○ : A \to A_S} such that any map from #{A}
into a type in #{S} factors through #{\eta}.}

% ```agda
\agda{
record Reflector {𝓤 𝓥} (S : SubU 𝓤 𝓥) (A : Type 𝓤) : Type (lsuc 𝓤 ⊔ 𝓥) where
  constructor mk-rfltor
  field
    {○} : Type 𝓤
    ○∈S : ○ ∈ S
    η-○ : A → ○
    reflects : ∀ {C : Type 𝓤} → C ∈ S → is-equiv (postcomp C η-○)

open Reflector
}
% ```
}

\subtree[stt-0042]{
\title{A subuniverse contains #{\bigcirc} modal types}
\taxon{theorem}

\p{In [[modalities.HigherModality]], we start by defining the reflectors, and say that a type
is #{\bigcirc}-modal if the reflection map is an equivalence. In this setting, this definition
is a theorem.}

% ```agda
\agda{
in-subU←η-is-equiv : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥}
                       {A : Type 𝓤}
                     → (RA : Reflector S A)
                     → is-equiv (RA .η-○)
                     → A ∈ S
in-subU←η-is-equiv {S = S} RA eq
  = tr (_∈ S)
       (ua (mk≃ (η-○ RA) eq e⁻¹))
       (○∈S RA)
}
% ```

\p{We can also show that for any type in #{S}, #{\eta_\circ} has a retract}

% ```agda
\agda{
η-has-retract←in-subU : ∀ {𝓤 𝓥} {S : SubU 𝓤 𝓥}
                       {A : Type 𝓤}
                       (RA : Reflector S A)
                       → A ∈ S
                       → retract (RA .η-○)
η-has-retract←in-subU RA a∈S = (bwd id , happly (ε id)) where
  open is-equiv (reflects RA a∈S)
}
% ```

}

\subtree[stt-0041]{
\title{Reflective subuniverse}
\taxon{definition}
\meta{defines}{\startverb ["is-reflective", "mk-reflective", "is-reflective.has-reflectors"] \stopverb}
\p{A subuniverse is reflective if it has all reflectors.}

% ```agda
\agda{
record is-reflective {𝓤 𝓥} (S : SubU 𝓤 𝓥) : Type (lsuc 𝓤 ⊔ 𝓥) where
  constructor mk-reflective
  field
    has-reflectors : ∀ A → Reflector S A

  module ○ A = Reflector (has-reflectors A)
  open ○ public
}
% ```

}
