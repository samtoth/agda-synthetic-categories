\date{2025-07-13}
\title{Lifting types up universes levels}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb foundations.Lift \stopverb}
\import{stt-macros}


%```agda
\agda{
module foundations.Lift where

open import foundations.Universes
open import foundations.Sigma
open import foundations.Homotopy
open import foundations.CoherentIsomorphism
}
%```

\subtree[stt-0077]{
\title{}
\taxon{definition}

\p{In Agda Universes are not cumulative by definition. But we
can use a record type to lift a type in #{\UU} to a universe #{\UU \cup \UV}.
We also note that Lift has a functorial action on types.}

%```agda
\agda{
record ULift {𝓤} 𝓥 (A : Type 𝓤) : Type (𝓤 ⊔ 𝓥) where
  constructor mk-lift
  field
    unlift : A

open ULift public

ULift-map : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
         → (f : A → B) → ULift 𝓦 A → ULift 𝓦 B
ULift-map f (mk-lift a) = mk-lift (f a)
}
%```
}

\subtree[stt-0078]{
\taxon{theorem}
\title{Lift is an equivalence}

%```agda
\agda{
lift-is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} → is-equiv (mk-lift {𝓤} {𝓥} {A})
lift-is-equiv = is-equiv←qiso (λ where
  .fst → unlift
  .snd .fst → ~refl
  .snd .snd → ~refl)
}
%```
}
