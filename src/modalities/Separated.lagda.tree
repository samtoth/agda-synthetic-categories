\date{2025-06-14}
\title{Separated types}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb modalities.Separated \stopverb}
\import{stt-macros}

%```agda
\agda{
module modalities.Separated  where

open import foundations.Prelude
open import ufAxioms
open import modalities.Subuniverses
open import modalities.GlobalSubuniverses
open import modalities.instances.Localisation
open import core.Suspensions
open import core.Arrow
open import core.ArrowEquiv
open import ergonomics.Universal
open import ergonomics.PushoutUniv
open import axioms.FreeAlgInj
}
%```


\subtree[stt-007E]{
\title{Separated types for a subuniverse}
\taxon{definition}

\p{A type is separated if it's identity types are modal. This forms a
[(global)](stt-007A) [subuniverse](stt-003Z).}


%```agda
\agda{
is-separated : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦) → Type 𝓤 → Type (𝓤 ⊔ 𝓦)
is-separated S A = ∀ (x y : A) → (x ＝ y) ∈ S

separated-SubU : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦) → SubU 𝓤 (𝓤 ⊔ 𝓦)
separated-SubU S .Subtype.family = is-separated S
separated-SubU S .Subtype.has-is-subtype A
  = is-prop-Π λ x → is-prop-Π λ y → Subtype.has-is-subtype S (x ＝ y)

equiv-separated : ∀ {α} (S : GSU α) {𝓤 𝓥} {A : Type 𝓤}
                    {B : Type 𝓥} (e : A ≃ B)
                  → is-separated (SubU←global S) A
                  → is-separated (SubU←global S) B
equiv-separated S e sep x y
  = GSU.S-equiv S
       (embedding≃ (is-embedding←is-equiv
                     (is-equiv⁻¹ has-is-eqv)) x y)
       (sep (bwd x) (bwd y))
  where
    open _≃_ e

separated-GSU : ∀ {α} (S : GSU α) → GSU  (λ 𝓤 → 𝓤 ⊔ α 𝓤)
separated-GSU S .GSU.S = separated-SubU (SubU←global S)
separated-GSU S .GSU.S-equiv = equiv-separated S


is-separated-SubU-equiv
  : ∀ {𝓤 𝓥 𝓥'} (S : SubU 𝓤 𝓥) (K : SubU 𝓤 𝓥')
      {A : Type 𝓤}
    → Subtype-equiv S K
    → is-separated S A
    → is-separated K A
is-separated-SubU-equiv _ _ eq sep a b = eq _ .fst (sep a b)
}
%```
}


\subtree[stt-007I]{
\title{Local types are separated}
\taxon{theorem}

\p{Given a reflective subuniverse #{S},
the #{S}-modal types are also #{S}-separated.}

\todo{
Most of the separated stuff
requires the modified join construction which we don't have yet.
}

%```agda
\agda{
-- is-separated←is-modal
--   : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦)
--       {A : Type 𝓤}
--     → A ∈ S
--     → A ∈ separated-SubU S
-- is-separated←is-modal S as x y
--   = {!!}
}
%```
}

\subtree[stt-007F]{
\title{Separated types and localisations}
\taxon{theorem}

\p{Given a family of maps #{f_i : A_i \to B_i}, the separated
types with respect to localisation at #{f} are the #{\Sigma(f)}
local types. (Where #{\Sigma(-)} is the functorial action of
the suspension)}


\proof{
\p{We can construct the following commutative diagram:}
\quiver{
\begin{tikzcd}
	{\Sigma_{(x,y : X)} (x = y) ^ {B_i}} && {\Sigma_{(x,y:X)}(x=y)^{A_i}} \\
	\\
	{X^{\Sigma B_i}} && {X^{\Sigma A_i}}
	\arrow["{\textrm{total}((x=y)^f)}", from=1-1, to=1-3]
	\arrow["\sim"', from=1-1, to=3-1]
	\arrow["\sim", from=1-3, to=3-3]
	\arrow["{X^{\Sigma f}}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{It then follows that postcomposition by #{f} at #{x = y} is an
equivalence iff postcomposition by #{\Sigma(f)} is at #{X}.}
}

%```agda
\agda{
module _ {𝓘 𝓤 𝓥} {I : Type 𝓘}
         {A : I → Type 𝓤} {B : I → Type 𝓥}
         (f : (i : I) → A i → B i) where

  private
    Σf : (i : I) → Susp (A i) → Susp (B i)
    Σf i = Susp-map (f i)

  is-separated⇔is-Σ-local
    : ∀ {𝓤} {X : Type 𝓤}
    → is-local Σf X
    ⇔ is-separated (Local-SubU f 𝓤) X
  is-separated⇔is-Σ-local {X = X}
    = ( (λ loc x y i → topmap⇔botmap-is-equiv i .snd (loc i) (x , y))
       , λ sep i → topmap⇔botmap-is-equiv i .fst λ (x , y) → sep x y i) where
    module _ i where
      topmap : ∀ (ab : X × X)
          → (B i → ab .fst ＝ ab .snd)
          → (A i → ab .fst ＝ ab .snd)
      topmap (x , y) = postcomp (x ＝ y) (f i)

      eqvl : (Σ[ ab ∶ (X × X)] (B i → ab .fst ＝ ab .snd))
           ≃ (Susp (B i) → X)
      eqvl = Σ-assoc ∙≃ (Susp-UP≃ e⁻¹)

      eqvr : (Susp (A i) → X)
           ≃ (Σ[ ab ∶ (X × X)] (A i → ab .fst ＝ ab .snd))
      eqvr = Susp-UP≃ ∙≃ Σ-assoc e⁻¹

      botmap : (Susp (B i) → X) → (Susp (A i) → X)
      botmap = postcomp X (Σf i)


      F : Arrow-map (total-map topmap) botmap
      F .Arrow-map.top = eqvl ._≃_.fwd
      F .Arrow-map.bot = _≃_.bwd eqvr
      F .Arrow-map.comm ((x , y) , H) = funext→ (pushout-ind _
        (mk-coconeD
          ~refl
          ~refl
          λ a → IdP-func←Square (glue a) refl refl
                 ( ∙-reflr _
                 ∙ pushout-rec-apβ a
                 ∙ sym (ap-∘
                        (pushout-rec (mk-cocone (λ _ → x) (λ _ → y) H))
                        (pushout-rec (mk-cocone ι₁ ι₂ (glue ∘ f i)))
                        (glue a)
                        ∙ ap (ap _) (pushout-rec-apβ a)
                        ∙ pushout-rec-apβ (f i a)))))

      F-is-equiv : is-Arrow-equiv F
      F-is-equiv = ( eqvl ._≃_.has-is-eqv
                   , is-equiv⁻¹ (eqvr ._≃_.has-is-eqv))

      topmap⇔botmap-is-equiv
        : is-fibrewise-equiv topmap ⇔ is-equiv botmap
      topmap⇔botmap-is-equiv
        =    (fibrewise⇔total-is-equiv ⇔⁻¹)
          ∙⇔ top⇔bot-is-equiv←Arrow-equiv F F-is-equiv

  is-separated←is-Σ-local
    : ∀ {𝓤} {X : Type 𝓤}
    → is-local Σf X
    → is-separated (Local-SubU f 𝓤) X
  is-separated←is-Σ-local = is-separated⇔is-Σ-local .fst

  is-Σ-local←is-separated
    : ∀ {𝓤} {X : Type 𝓤}
    → is-separated (Local-SubU f 𝓤) X
    → is-local Σf X
  is-Σ-local←is-separated = is-separated⇔is-Σ-local .snd
}
%```

\p{Becuase #{\Sigma(-)} [preserves](stt-007J) the unit type, we can
easily derive that #{A}-null separated types are #{\Sigma A}-null.}

%```agda
\agda{
module _ {𝓘 𝓤} {I : Type 𝓘} (A : I → Type 𝓤) where
  is-separated←is-Σ-null
    : ∀ {𝓤} {X : Type 𝓤}
      → is-null (Susp ∘ A) X
      → is-separated (Null-SubU A 𝓤) X
  is-separated←is-Σ-null null
    = is-separated-SubU-equiv (Local-SubU !A _) (Null-SubU A _)
        Null≃!Local
        (is-separated←is-Σ-local !A
          (is-local-equiv
            (λ i → Susp-!⁻¹)
            (λ _ → Arrow⁻¹-is-equiv Susp-! Susp-!-is-equiv)
            (is-local←is-null null))) where
      !A : (i : I) → A i → 𝟙
      !A i _ = tt

  is-Σ-null←is-separated
    : ∀ {𝓤} {X : Type 𝓤}
      → is-separated (Null-SubU A 𝓤) X
      → is-null (Susp ∘ A) X
  is-Σ-null←is-separated sep
    = is-null←is-local
       (is-local-equiv
         (λ _ → Susp-!)
         (λ _ → Susp-!-is-equiv)
         (is-Σ-local←is-separated
           (λ _ _ → tt)
           (is-separated-SubU-equiv
             (Null-SubU A _)
             (Local-SubU (λ i _ → tt) _)
             (_⇔⁻¹ ∘ Null≃!Local)
             sep)))
}
%```
}

\subtree[stt-007H]{
\title{Iterated separation}
\taxon{definition}

\p{Because the separated types give a (reflective) subuniverse for
each (reflective) subuniverse, we can consider the result of
repeatedly applying separation.
}

%```agda
\agda{
is-n-separated : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦)
                 → (n : ℕ) → Type 𝓤
                 → Type (𝓤 ⊔ 𝓦)
is-n-separated {𝓤} S zero A = ULift 𝓤 (A ∈ S)
is-n-separated S (suc n) A
  = ∀ (x y : A) → is-n-separated S n (x ＝ y)


mk-is-separated : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦)
                 → (n : ℕ) (A : Type 𝓤)
                 → is-n-separated (separated-SubU S) n A
                 → is-n-separated S (suc n) A
mk-is-separated S zero A (mk-lift sep) x y = mk-lift (sep x y)
mk-is-separated S (suc n) A sep a b
  = mk-is-separated S n (a ＝ b) (sep a b)


is-n-separated-is-prop
  : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦)
      (n : ℕ) (A : Type 𝓤)
    → is-prop (is-n-separated S n A)
is-n-separated-is-prop S zero A
  = is-prop-ULift (S .Subtype.has-is-subtype A)
is-n-separated-is-prop S (suc n) A
  = is-prop-Π λ
     a → is-prop-Π λ
       b → is-n-separated-is-prop S n (a ＝ b)

n-separated-SubU : ∀ {𝓤 𝓦} (S : SubU 𝓤 𝓦)
                   → (n : ℕ) → SubU 𝓤 (𝓤 ⊔ 𝓦)
n-separated-SubU S n .Subtype.family = is-n-separated S n
n-separated-SubU S n .Subtype.has-is-subtype
  = is-n-separated-is-prop S n

equiv-n-separated
  : ∀ {𝓤 𝓥 α} (S : GSU α)
      (n : ℕ)
      {A : Type 𝓤} {B : Type 𝓥}
    → A ≃ B
    → is-n-separated (SubU←global S) n A
    → is-n-separated (SubU←global S) n B
equiv-n-separated S zero eq (mk-lift sep)
  = mk-lift (S .GSU.S-equiv eq sep)
equiv-n-separated S (suc n) eq sep b b'
  = equiv-n-separated S n
      (mk≃ _ (is-embedding←is-equiv
                 (is-equiv⁻¹ has-is-eqv)) e⁻¹)
      (sep (bwd b) (bwd b')) where open _≃_ eq


n-separated-GSU : ∀ {α} (S : GSU α)
                  → (n : ℕ) → GSU (λ 𝓤 → 𝓤 ⊔ α 𝓤)
n-separated-GSU S n .GSU.S = n-separated-SubU (SubU←global S) n
n-separated-GSU S n .GSU.S-equiv = equiv-n-separated S n
}
%```
}
