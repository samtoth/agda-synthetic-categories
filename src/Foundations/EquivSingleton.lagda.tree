\date{2025-02-26}
\taxon{module}
\meta{module}{\startverb Foundations.EquivSingleton \stopverb}
\author{samueltoth}
\title{Types equivalent to (sub)singleton types are (sub)singleton}

\import{stt-macros}


% ```agda
\agda{
module Foundations.EquivSingleton where

open import Foundations.Universes
open import Foundations.Identity
open import Foundations.Functions
open import Foundations.CoherentIsomorphism
open import Foundations.Singleton
}
% ```


\proof{
\p{Suppose we have an equivalence #{f : A \toeq B}, and #{A} is a
singleton, then we need to show for any two terms #{x,y : B}, we need
an identification #{x = y}. But because #{f} is an equivalence, it
suffices to consider two terms #{a,b : A}, and find an identification
#{f(a) = f(b)}.}

% ```agda
\agda{
is-single←equiv-to-single : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (e : A ≃ B) → is-singleton A → is-singleton B
is-single←equiv-to-single (mk≃ f e) (mk-singl a sing)
  = mk-singl (f a) λ x → ap f (sing (bwd x)) ∙ ε x where open is-equiv e

is-prop←equiv-to-prop : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} → (e : A ≃ B) → is-prop A → is-prop B
is-prop←equiv-to-prop (mk≃ f e) ss x y
  = sym (ε x) ∙ ap f (ss (bwd x) (bwd y)) ∙ ε y where open is-equiv e
}
% ```
}
