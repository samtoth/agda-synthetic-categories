\date{2025-06-20}
\title{Coslices of types}
\taxon{module}
\meta{module}{\startverb core.CoSlice \stopverb}
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
module core.CoSlice where

open import foundations.Prelude
open import ufAxioms
}
%```

\subtree[stt-0062]{
\title{Coslices}
\taxon{definition}

\p{Fixing a type #{A}, there is a category
#{\SS_{A/}} called the coslice category under #{A}.
Maps in this category are commuting triangles:}

%```agda
\agda{
Coslice-map : ∀ {𝓤} {A : Type 𝓤}
                {𝓥} {X : Type 𝓥}
                (p : A → X)
                {𝓦} {Y : Type 𝓦}
                (q : A → Y)
               → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦)
Coslice-map {X = X} p {Y = Y} q
  = Σ[ f ∶ (X → Y) ] (f ∘ p ~ q)

Coslice-id : ∀ {𝓤} {A : Type 𝓤}
               {𝓥} {X : Type 𝓥}
               (p : A → X)
             → Coslice-map p p
Coslice-id p = (id , ~refl)


}
%```
}


%```agda
\agda{
Coslice-equiv : ∀ {𝓤} {A : Type 𝓤}
                {𝓥} {X : Type 𝓥}
                {p : A → X}
                {𝓦} {Y : Type 𝓦}
                {q : A → Y}
               → Coslice-map p q
               → Type (𝓥 ⊔ 𝓦)
Coslice-equiv (f , _) = is-equiv f

sec←sec-Coslice-equiv
  : ∀ {𝓤} {A : Type 𝓤}
      {𝓥} {X : Type 𝓥}
      {p : A → X}
      {𝓦} {Y : Type 𝓦}
      {q : A → Y}
      (f : Coslice-map p q)
    → Coslice-equiv f
    → section p
    → section q
sec←sec-Coslice-equiv (f , H) feq (ps , sp)
  = homotopy-section H ((ps ∘ f.bwd) , f ◂ sp ▸ f.bwd ~∙ f.ε) where
  module f = is-equiv feq



sec←sec-Coslice-equiv'
  : ∀ {𝓤} {A : Type 𝓤}
      {𝓥} {X : Type 𝓥}
      {p : A → X}
      {𝓦} {Y : Type 𝓦}
      {q : A → Y}
      (f : Coslice-map p q)
    → Coslice-equiv f
    → section q
    → section p
sec←sec-Coslice-equiv' (f , H) feq (ps , sp)
  = homotopy-section (((f.η ▸ _ ~⁻¹) ~∙ f.bwd ◂ H) ~⁻¹ )
                     ((ps ∘ f) , f.bwd ◂ sp ▸ f ~∙ f.η) where
  module f = is-equiv feq

equiv←Coslice-equiv
  : ∀ {𝓤} {A : Type 𝓤}
      {𝓥} {X : Type 𝓥}
      {p : A → X}
      {𝓦} {Y : Type 𝓦}
      {q : A → Y}
      (f : Coslice-map p q)
    → Coslice-equiv f
    → is-equiv p
    → is-equiv q
equiv←Coslice-equiv (f , comm) feq peq
  = homotopy-is-equiv comm (is-equiv-∘ feq peq)
}
%```
