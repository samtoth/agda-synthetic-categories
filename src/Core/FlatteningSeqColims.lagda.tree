\title{Flattening for Sequential Colimits}
\author{samueltoth}
\date{2025-08-19}
\taxon{module}
\meta{module}{Core.FlatteningSeqColims}
\import{stt-macros}

%```agda
\agda{
module Core.FlatteningSeqColims where

open import Foundations.Prelude
open import ufAxioms

open import Core.CanonicalPushouts
open import Core.Coequalisers
open import Core.CanonicalSeqColims
open import Core.FlatteningCoequalisers
}
%```


\subtree[stt-009I]{
\title{Flatteninig for sequential colimits}
\taxon{theorem}

%```agda
\agda{
module _ {𝓤 𝓥} {S : Incr-seq 𝓤} (P : Seq-colimit S → Type 𝓥) where
  open Incr-seq S
  total-seq : Incr-seq (𝓤 ⊔ 𝓥)
  total-seq .Incr-seq.Point n = Σ (Point n) (P ∘ ι-seq S)
  total-seq .Incr-seq.incr (a , b) = (incr a , tr P (glue-suc S a) b)

  total-seq-cocone : Cocone-seq total-seq (Σ _ P)
  total-seq-cocone .Cocone-seq.ι (a , b) = (ι-seq S a , b)
  total-seq-cocone .Cocone-seq.comm (a , b)
    = Σ-path→ (glue-suc S a , refl)

  LL : id {A = Σ[ n ∶ ℕ ] Σ (Point n) (P ∘ ι-seq S)}
    ~ Σ-assoc ._≃_.fwd ∘ total-map (λ p → tr P (sym (glue-suc S (p .snd)))) ∘ (total-map (λ p → tr P (glue-suc S (p .snd))) ∘ _≃_.bwd Σ-assoc)
  LL (n , (p , pp))
    = Σ-path→
        ( refl
        , (Σ-path→
          ( refl
          , sym (tr∙tr-sym (glue-suc S p) pp)
          )))

  RR : Incr-seq.incrΣ total-seq ~ Σ-assoc ._≃_.fwd ∘ total-map-fst incrΣ ∘ (total-map (λ p → tr P (glue-suc S (p .snd))) ∘ _≃_.bwd Σ-assoc)
  RR (n , (p , pp)) = refl

  total-seq-colim≃ : Σ _ P ≃ Seq-colimit total-seq
  total-seq-colim≃
    = Σ _ P                              ≃⟨ total-fork≃ _ _ P ⟩
      Coeq (total-maps id incrΣ P .fst)
           (total-maps id incrΣ P .snd)  ≃⟨⟩
      Coeq (total-map (λ a → tr P (sym (glue-suc _ _))))
           (total-map-fst incrΣ)         ≃⟨ precomp-coeq≃ (is-equiv-∘ (is-total-equiv←is-fibrewise-equiv (λ a → tr-is-equiv (glue-suc S (a .snd)))) (is-equiv⁻¹ (Σ-assoc ._≃_.has-is-eqv))) e⁻¹ ⟩
      Coeq _ _                           ≃⟨ postcomp-coeq≃~ (Σ-assoc ._≃_.has-is-eqv) LL RR ⟩
      Coeq id (Incr-seq.incrΣ total-seq) ≃⟨⟩
      Seq-colimit total-seq ≃∎

  -- Σ-is-seq-colim : is-seq-colim total-seq total-seq-cocone
  -- Σ-is-seq-colim = {!!}
}
%```
}
