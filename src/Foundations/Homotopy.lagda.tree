\date{2025-02-21}
\title{Homotopies of functions}
\taxon{module}
\meta{module}{\startverb Foundations.Homotopy \stopverb}

\import{stt-macros}

% ```agda
\agda{
module Foundations.Homotopy where

open import Foundations.Functions
open import Foundations.Universes
open import Foundations.Identity
open import Foundations.PathReasoning
}
% ```

\subtree[stt-001M]{
\title{Homotopy}
\meta{defines}{\startverb ["_~_"] \stopverb}

\p{A homotopy between functions is a pointwise equality of functions.}

% ```agda
\agda{
infix 10 _~_
_~_ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} → (f g : (a : A) → B a) → Type (𝓤 ⊔ 𝓥)
f ~ g = ∀ a → f a ＝ g a

}
% ```
}

\subtree[stt-001N]{
\taxon{remark}

\meta{defines}{\startverb ["_~∙_", "~refl", "~∙-reflr", "_~⁻¹", "~∙-sym"] \stopverb}

\p{Homotopies are 2-cells in the #{(\infty, 1)}-category of types and functions. Or equivalently, for every pair of types,
#{X} and #{Y}, we have a #{\infty}-groupoid #{\textrm{Map}(X,Y)} where 0-cells are functions, and 1-cells are homotopies.}

% ```agda
\agda{

infixr 25 _~∙_
_~∙_ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥}
     → {f g : (a : A) → B a} → f ~ g → {h : (a : A) → B a} → g ~ h → f ~ h
(p ~∙ q) a = p a ∙ q a


~refl : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {f : (a : A) → B a} → f ~ f
~refl a = refl

~∙-reflr : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {f g : (a : A) → B a} → (p : f ~ g) → p ~∙ ~refl ~ p
~∙-reflr p a = ∙-reflr (p a)

infix 20 _~⁻¹
_~⁻¹ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} → {f g : (a : A) → B a} → f ~ g → g ~ f
(p ~⁻¹) a = sym (p a)

~∙-sym : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {f g : (a : A) → B a} → (p : f ~ g) → p ~∙ (p ~⁻¹) ~ ~refl
~∙-sym p a = ∙-sym (p a)

~∙-sym' : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {f g : (a : A) → B a} → (p : f ~ g) → (p ~⁻¹) ~∙ p ~ ~refl
~∙-sym' p a = ∙-sym' (p a)

~∙-assoc : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {f g h k : Π A B}
           → (H : f ~ g) (K : g ~ h) (L : h ~ k)
           → (H ~∙ K) ~∙ L ~ H ~∙ K ~∙ L
~∙-assoc H K L a = ∙-assoc (H a) (K a) (L a)
}
% ```
}

\subtree[stt-001P]{
\taxon{notation}
\title{reasoning combinators}

\meta{defines}{\startverb ["_~⟨⟩", "_~∎", "_⟩~∙⟨_"] \stopverb}

% ```agda
\agda{
_~⟨⟩_ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} (f : (a : A) → B a) {g : (a : A) → B a} → f ~ g → f ~ g
x ~⟨⟩ x~y = x~y
infixr 2 _~⟨⟩_

~⟨⟩-syntax : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} → (f : (a : A) → B a) {g h : (a : A) → B a} → g ~ h → f ~ g → f ~ h
~⟨⟩-syntax f p q = q ~∙ p

infixr 2 ~⟨⟩-syntax
syntax ~⟨⟩-syntax x q p = x ~⟨ p ⟩ q

infix  3 _~∎
_~∎ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} → (f : (a : A) → B a) → f ~ f
x ~∎ = ~refl

infixr 25 _⟩~∙⟨_
_⟩~∙⟨_ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f g : A → B} {p q : f ~ g} {h : A → B} → {r : g ~ h} {s : g ~ h}
       → p ~ q → r ~ s → p ~∙ r ~ q ~∙ s
(p ⟩~∙⟨ q) a = (p a) ⟩∙⟨ (q a)

}
% ```
}


\subtree[stt-001Q]{
\taxon{definition}
\title{Whiskerings}

\meta{defines}{\startverb ["_◂_", "_▸_", "_⟩~◂⟨_"] \stopverb}

\p{We can also define the whiskering of homotopies, as well
as horizontal composition.}


% ```agda
\agda{
infixr 30 _◂_
_◂_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {C : Type 𝓦}
    → (h : ∀ {a} → B a → C) {f g : Π A B} → f ~ g → h ∘ f ~ h ∘ g
(h ◂ p) x = ap h (p x)


infixl 31 _▸_
_▸_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
    → {f g : B → C} → f ~ g → (h : A → B) → f ∘ h ~ g ∘ h
(p ▸ h) x = p (h x)


infixr 28 _⟩~◂⟨_
_⟩~◂⟨_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
           (f : B → C) {g h : A → B} {p q : g ~ h} → p ~ q → f ◂ p ~ f ◂ q
(f ⟩~◂⟨ p) a = ap (ap f) (p a)


◂∙ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {C : Type 𝓦}
       (k : ∀ {a} → B a → C) {f g h : Π A B} (H : f ~ g) (K : g ~ h)
     → k ◂ (H ~∙ K) ~ (k ◂ H) ~∙ (k ◂ K)
◂∙ k H K a = ap-∙ k (H a) (K a)

◂∙∙ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {C : Type 𝓦}
       (l : ∀ {a} → B a → C) {f g h k : Π A B}
       (H : f ~ g) (K : g ~ h) (L : h ~ k)
     → l ◂ (H ~∙ K ~∙ L) ~ (l ◂ H) ~∙ (l ◂ K) ~∙ (l ◂ L)
◂∙∙ k H K L a = ap-∙∙ k (H a) (K a) (L a)

◂∘ : ∀ {𝓤 𝓥 𝓦 𝓜} {A : Type 𝓤} {B : A → Type 𝓥} {C : Type 𝓦}
       {D : Type 𝓜}
       (i : C → D) (h : ∀ {a} → B a → C)
       {f g : Π A B} (H : f ~ g)
     → i ∘ h ◂ H ~ i ◂ h ◂ H
◂∘ i k H a = ap-∘ i k (H a)

◂∘∘ : ∀ {𝓤 𝓥 𝓦 𝓜 𝓛} {A : Type 𝓤} {B : A → Type 𝓥} {C : Type 𝓦}
       {D : Type 𝓜} {E : Type 𝓛}
       (j : D → E) (i : C → D) (h : ∀ {a} → B a → C)
       {f g : Π A B} (H : f ~ g)
     → j ∘ i ∘ h ◂ H ~ j ◂ i ◂ h ◂ H
◂∘∘ h i j H a = ap-∘∘ h i j (H a)
}
% ```
}



\subtree[stt-001O]{
\taxon{remark}
\title{Homotopies are invertible natural transformations}

\meta{defines}{\startverb ["homotopy-natural", "homotopy-inverse"] \stopverb}

\p{If [functions are functors](stt-001F), then homotopies are invertible natural transformations.}

% ```agda
\agda{

homotopy-natural : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f g : A → B} → (h : f ~ g)
                 → ∀ {x y} (p : x ＝ y) → h x ∙ ap g p ＝ ap f p ∙ h y
homotopy-natural _ refl = ∙-reflr _

homotopy-conjugate : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f g : A → B}
                       (H : f ~ g)
                     → ∀ {x y : A} (p : x ＝ y)
                     → sym (ap f p) ∙ H x ∙ ap g p ＝ H y
homotopy-conjugate H refl = ∙-reflr _

homotopy-inverse : ∀ {𝓤} {A : Type 𝓤} (f : A → A) (p : f ~ id) → p ▸ f ~ f ◂ p
homotopy-inverse {𝓤} {A} f p x = p (f x)                ＝⟨ ∙.insertl A (∙-sym (p x)) ⟩
                         (p (f x) ∙ p x) ∙ sym (p x)    ＝⟨ II x ⟩
                         (ap f (p x) ∙ p x) ∙ sym (p x) ＝⟨ ∙.cancell A (∙-sym (p x)) ⟩
                         ap f (p x) ∎  where
  I : ∀ x → p (f x) ∙ p x ＝ ap f (p x) ∙ p x
  I x = ap (p (f x) ∙_) (sym (ap-id _)) ∙ homotopy-natural p (p x)

  II : ∀ x → (p (f x) ∙ p x) ∙ sym (p x) ＝ (ap f (p x) ∙ p x) ∙ sym (p x)
  II x = ap (_∙ sym (p x)) (I x)

}
% ```
}

\subtree[stt-0094]{
\date{2025-08-14}
\title{Horizontal composition of homotopies}
\taxon{definition}

\p{We define horizontal composition for homotopies, and show that
it admits an interchange law with respect to vertical composition}

\proof{Follows from [naturality](stt-001O)}

%```agda
\agda{
_~∘_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
       → {f g : B → C} → f ~ g
       → {h k : A → B} → h ~ k
       → f ∘ h ~ g ∘ k
_~∘_ {g = g} H {h = h} K = H ▸ h ~∙ g ◂ K

infixr 28 _⟩~∘⟨_
_⟩~∘⟨_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
       → {f g : B → C} {H H' : f ~ g} → H ~ H'
       → {h k : A → B} {K K' : h ~ k} → K ~ K'
       → H ~∘ K ~ H' ~∘ K'
(P ⟩~∘⟨ Q) a = ap₂ _∙_ (P _) (ap (ap _) (Q a))

_~∘'_ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
        → {f g : B → C} → f ~ g
        → {h k : A → B} → h ~ k
        → f ∘ h ~ g ∘ k
_~∘'_ {f = f} H {k = k} K = f ◂ K ~∙ H ▸ k

switch-~∘ : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
            → {f g : B → C} (H : f ~ g)
            → {h k : A → B} (K : h ~ k)
            → H ~∘ K ~ H ~∘' K
switch-~∘ H K a = homotopy-natural H (K a)

homotopy-interchange
  : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥} {C : Type 𝓦}
      {f g h : B → C} (H : f ~ g) (L : g ~ h)
      {k l m : A → B} (K : k ~ l) (J : l ~ m)
    → (H ~∘ K) ~∙ (L ~∘ J) ~ (H ~∙ L ~∘ K ~∙ J)
homotopy-interchange {f = f}{g}{h} H L {k}{l}{m} K J
  = (H ~∘ K) ~∙ (L ~∘ J) ~⟨⟩
    (H ▸ k ~∙ g ◂ K) ~∙ L ▸ l ~∙ h ◂ J   ~⟨ ~∙-assoc _ (L ▸ l) (h ◂ J) ~⁻¹ ⟩
    ((H ▸ k ~∙ g ◂ K) ~∙ L ▸ l) ~∙ h ◂ J ~⟨ ~∙-assoc _ (g ◂ K) (L ▸ l) ⟩~∙⟨ ~refl {f = h ◂ J}  ⟩
    (H ▸ k ~∙ (g ◂ K ~∙ L ▸ l)) ~∙ h ◂ J ~⟨ ~∙-assoc (H ▸ k) _ (h ◂ J)  ⟩
    H ▸ k ~∙ (g ◂ K ~∙ L ▸ l) ~∙ h ◂ J

        ~⟨ ~refl {f = H ▸ k} ⟩~∙⟨ sym ∘ homotopy-natural L ∘ K ⟩~∙⟨ ~refl {f = h ◂ J} ⟩

    H ▸ k ~∙ (L ▸ k ~∙ h ◂ K) ~∙ h ◂ J ~⟨ ~refl {f = H ▸ k} ⟩~∙⟨ ~∙-assoc (L ▸ k) (h ◂ K) (h ◂ J)  ⟩
    H ▸ k ~∙ L ▸ k ~∙ (h ◂ K ~∙ h ◂ J) ~⟨ ~refl {f = H ▸ k} ⟩~∙⟨ ~refl {f = L ▸ k} ⟩~∙⟨ ( ◂∙ h K J ~⁻¹ )    ⟩
    H ▸ k ~∙ L ▸ k ~∙ h ◂ (K ~∙ J)     ~⟨ ~∙-assoc (H ▸ k) (L ▸ k) _ ~⁻¹ ⟩
    (H ▸ k ~∙ L ▸ k) ~∙ h ◂ (K ~∙ J)   ~⟨⟩
    (H ~∙ L) ~∘ (K ~∙ J) ~∎
}
%```
}
