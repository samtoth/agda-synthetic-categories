\date{2025-02-24}
\title{Characterising the path space of fibre types}
\author{samueltoth}

\import{stt-macros}

% ```agda
\agda{
module foundations.FibrePath where

open import foundations.universe
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.Functions
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Identity
open import foundations.DependentIdentity
}
% ```

\p{Although [fibres](stt-000M) are defined as sigma types - [who's path types can be characterised](SigmaPath.lagda) - we can give a
particular special charecterisation of the path space of fibre types that will come in handy especially in proving that certain maps
have contractible or propositional fibres.
}

\subtree[stt-000N]{
\taxon{theorem}


\p{Given two terms #{(x,p),(y,q)} of #{\textrm{fibre}_f(y)}, we characterise the path type as follows:}

##{
 ((x,p) = (y,q)) \simeq (\Sigma_{(\gamma : x = y)} f(\gamma) \cdot p = q)
}


\proof{
We reason in a chain of equivalences:

##{
\begin{align}
(x,p) = (y,q) &\simeq && \Sigma_{(\gamma : x = y)} \gamma^* p = q \\
      	      &\simeq && \Sigma_{(\gamma : x = y)} f(\gamma) \cdot q = p
\end{align}
}

\ol{
\li{is the characterisation of paths in sigma types}
\li{follows directly from path induction on #{\gamma}}
}

% ```agda
\agda{

fibre-path : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} {b : B} → ∀ {x y : fibre f b}
           → (x ＝ y) ≃ (Σ (x .fst ＝ y .fst) λ γ → ap f γ ∙ y .snd ＝ x .snd)
fibre-path {x = a@(x , p)} {b@(y , q)}
  = (a ＝ b)                             ≃⟨ Σ-path e⁻¹ ⟩
    Σ (x ＝ y) (λ γ → IdP _ p γ q)       ≃⟨ Σ-ap-≃ lem ⟩
    Σ (x ＝ y) (λ γ → ap _ γ ∙ q ＝ p)    ≃∎ where

  lem2 : ∀ {𝓤} {A : Type 𝓤} {x y : A} (p : x ＝ y) (q : x ＝ y) → (p ＝ q) ≃ (q ＝ p)
  lem2 p q = qiso→equiv (mk-iso sym (sym , (λ _ → sym-sym) , λ _ → sym-sym))

  lem : (γ : x ＝ y) → (IdP _ p γ q) ≃ (ap _ γ ∙ q ＝ p)
  lem refl = lem2 p q 


}
% ```
}

}
