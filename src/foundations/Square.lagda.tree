\title{Squares}

\import{stt-macros}

% ```agda
\agda{
module foundations.Square where

open import foundations.Universes
open import foundations.Functions
open import foundations.Identity
open import foundations.DependentIdentity


Square : ∀ {𝓤} {A : Type 𝓤}
         → {a00 a01 a10 a11 : A}
         → (ai0 : a00 ＝ a10)
         → (ai1 : a01 ＝ a11)
         → (a0i : a00 ＝ a01)
         → (a1i : a10 ＝ a11)
         → Type 𝓤
Square {a00 = a00} {a01} {a10} {a11}
       ai0 ai1 a0i a1i = ai0 ∙ a1i ＝ a0i ∙ ai1 -- IdP (ap₂ (_＝_) ai0 ai1) a0i a1i
{-# NOINLINE Square #-}

Square-degen-hor : ∀ {𝓤} {A : Type 𝓤}
                 → {a b : A}
                 → (p q : a ＝ b)
                 → (s : p ＝ q)
                 → Square p q refl refl
Square-degen-hor p q R = ∙-reflr p ∙ R


Square-degen-vert : ∀ {𝓤} {A : Type 𝓤}
                 → {a b : A}
                 → (p q : a ＝ b)
                 → (s : p ＝ q)
                 → Square refl refl p q
Square-degen-vert p q R = sym (∙-reflr p ∙ R)

Square←IdP : ∀ {𝓤} {A : Type 𝓤}
         → {a00 a01 a10 a11 : A}
         → (ai0 : a00 ＝ a10)
         → (ai1 : a01 ＝ a11)
         → (a0i : a00 ＝ a01)
         → (a1i : a10 ＝ a11)
         → IdP (ap₂ (_＝_) ai0 ai1) a0i a1i
         → Square ai0 ai1 a0i a1i
Square←IdP refl refl refl a1i p = sym p


IdP←Square :  ∀ {𝓤} {A : Type 𝓤}
         → {a00 a01 a10 a11 : A}
         → (ai0 : a00 ＝ a10)
         → (ai1 : a01 ＝ a11)
         → (a0i : a00 ＝ a01)
         → (a1i : a10 ＝ a11)
         → Square ai0 ai1 a0i a1i
         → IdP (ap₂ (_＝_) ai0 ai1) a0i a1i
IdP←Square refl refl refl a1i p = sym p

Square←IdP-func : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
                  → {a0 a1 : A}
                  → {f g : A → B}
                  → (p : a0 ＝ a1)
                  → (q : f a0 ＝ g a0)
                  → (r : f a1 ＝ g a1)
                  → IdP (ap (λ x → f x ＝ g x) p) q r
                  → Square (ap f p) (ap g p) q r
Square←IdP-func refl p q r = sym (∙-reflr _ ∙ r)

IdP-func←Square : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
                  → {a0 a1 : A}
                  → {f g : A → B}
                  → (p : a0 ＝ a1)
                  → (q : f a0 ＝ g a0)
                  → (r : f a1 ＝ g a1)
                  → Square (ap f p) (ap g p) q r
                  → IdP (ap (λ x → f x ＝ g x) p) q r
IdP-func←Square refl p q r = sym (r ∙ ∙-reflr _)


Square←brt＝l : ∀ {𝓤} {A : Type 𝓤}
         → {a00 a01 a10 a11 : A}
         → (ai0 : a00 ＝ a10)
         → {ai1 : a01 ＝ a11}
         → {a0i : a00 ＝ a01}
         → {a1i : a10 ＝ a11}
         → ai0 ∙ a1i ∙ sym ai1 ＝ a0i
         → Square ai0 ai1 a0i a1i
Square←brt＝l refl {refl} {refl} p = sym (∙-reflr _) ∙ p

Square-drop-i : ∀ {𝓤} {A : Type 𝓤}
                → {a b : A}
                → (p : a ＝ b)
                → Square p p refl refl
Square-drop-i refl = refl


SquareP : ∀ {𝓤} {A B C D : Type 𝓤}
          {ab : A ＝ B} {cd : C ＝ D} {ac : A ＝ C} {bd : B ＝ D}
          (S : Square ab cd ac bd)
          {s00 : A} {s10 : B} {s01 : C} {s11 : D}
          → (si0 : IdP ab s00 s10)
          → (si1 : IdP cd s01 s11)
          → (s0i : IdP ac s00 s01)
          → (s1i : IdP bd s10 s11)
          → Type 𝓤
SquareP {ab = ab} {cd} {ac} S {s00} {s10} {s01} {s11} si0 si1 s0i s1i
  = IdP (ap (λ x → coe x s00 ＝ s11) S) (si0 ∙[ ab ∙ _ ] s1i) (s0i  ∙[ ac ∙ cd ] si1)

{-# NOINLINE SquareP #-}

drop-i : ∀ {𝓤} {A B : Type 𝓤} {P : A ＝ B} {a : A} {b : B} (p : IdP P a b)
         → SquareP {C = A} {D = B} {P} {P} (Square-degen-hor P P refl) p p refl refl
drop-i {P = refl} refl = refl

drop-j : ∀ {𝓤} {A B : Type 𝓤} {P : A ＝ B} {a : A} {b : B} (p : IdP P a b)
         → SquareP {ab = refl} (Square-degen-vert P P refl) refl refl p p
drop-j {P = refl} refl = refl

}
% ```
