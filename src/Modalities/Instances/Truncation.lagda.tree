\date{2025-06-27}
\title{Truncation modalities}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb Modalities.Instances.Truncation \stopverb}
\import{stt-macros}

%```agda
\agda{
module Modalities.Instances.Truncation where

open import Foundations.Prelude
open import Foundations.IdentitySystem
open import ufAxioms
open import Core.Suspensions
open import Core.Spheres
open import Modalities.Instances.Localisation
open import Modalities.Subuniverses
open import Modalities.HigherModality
open import Modalities.GlobalSubuniverses
open import Modalities.Separated
open import Ergonomics.Universal
open import Ergonomics.PushoutUniv
open import Ergonomics.Extensionality
import Modalities.ModalMaps
}
%```

\subtree[stt-006P]{
\taxon{definition}
\title{#{n}-truncated types}

\p{A type #{X} is #{n}-truncated for #{n : \mathbb{N}} when it is
#{n}-[separated](stt-007H) with respect to being a
[singleton](stt-0006).  Equivalently, a type is #{n}-truncated if it
is [null](stt-005G) with respect to #{S^{n-1}}.  }

%```agda
\agda{
is-S-null : ∀ {𝓤}
             → ℕ
             → Type 𝓤 → Type 𝓤
is-S-null n = is-null {I = 𝟙} (const _ _ (S n))

singleton-SubU : ∀ {𝓤} → SubU 𝓤 𝓤
singleton-SubU .Subtype.family = is-singleton
singleton-SubU .Subtype.has-is-subtype _ = is-single-is-prop

is-truncated : ∀ {𝓤} (n : ℕ) (A : Type 𝓤) → Type 𝓤
is-truncated = is-n-separated singleton-SubU
}
%```
}

\remark{Note that we use numbering starting from #{0}
as opposed to from #{-2} as is often used.}

\subtree[stt-006T]{
\title{Truncation-modal types are #{n}-types}
\taxon{theorem}

\p{We show #{0}-truncated types are singletons, and #{1}-truncated
types are propositions. Furthermore, by the [general theory](stt-007F)
of separated types, we show that #{n + 1} truncated types are null
with respect to the #{n}-sphere.
}

%```agda
\agda{
is-singleton←is-truncated
  : ∀ {𝓤} {A : Type 𝓤}
    → is-truncated 0 A
    → is-singleton A
is-singleton←is-truncated {A = A} trunc = unlift trunc

is-truncated←is-singleton
  : ∀ {𝓤} {A : Type 𝓤}
    → is-singleton A
    → is-truncated 0 A
is-truncated←is-singleton {A = A} tr
  = mk-lift tr

is-prop←is-truncated
  : ∀ {𝓤} {A : Type 𝓤}
    → is-truncated 1 A
    → is-prop A
is-prop←is-truncated {A = A} tr x = is-singleton.centre ∘ unlift ∘ tr x

is-truncated←is-prop
  : ∀ {𝓤} {A : Type 𝓤}
    → is-prop A
    → is-truncated 1 A
is-truncated←is-prop {A = A} pr x y
  = mk-lift (＝-singleton←is-prop pr x y)

is-prop←is-S0-null : ∀ {𝓤} {A : Type 𝓤}
                     → is-null (const _ 𝟙 (S 0)) A
                     → is-prop A
is-prop←is-S0-null {A = A} null x y
  =   sym (happly (ε f) (ι₁ tt)) ∙ happly (ε f) (ι₂ tt) where
  open is-equiv (null tt)

  f : S 0 → A
  f = rec! (mk-coconeU x y (λ ()))

is-S0-null←is-prop : ∀ {𝓤} {A : Type 𝓤}
                     → is-prop A
                     → is-null (const _ 𝟙 (S 0)) A
is-S0-null←is-prop {_}{A} pr _ = is-equiv←qiso qiso where
  qiso : quasi-iso λ (a : A) (b : Susp ∅) → a
  qiso .fst f = f (ι₁ tt)
  qiso .snd .fst = ~refl
  qiso .snd .snd f = funext→ (λ a → pr _ _)

is-truncated←null : ∀ {𝓤} n {A : Type 𝓤}
                    → is-S-null n A
                    → is-truncated (suc n) A
is-truncated←null zero = is-truncated←is-prop ∘ is-prop←is-S0-null
is-truncated←null (suc n) {A} null x y
  = is-truncated←null n (lem x y) where
  lem : is-separated (Null-SubU (λ (_ : 𝟙) → S n) _) A
  lem = is-separated←is-Σ-null (λ _ → S n) null

is-null←truncated : ∀ {𝓤} n {A : Type 𝓤}
                    → is-truncated (suc n) A
                    → is-S-null n A
is-null←truncated zero = is-S0-null←is-prop ∘ is-prop←is-truncated
is-null←truncated (suc n) tr  = is-Σ-null←is-separated _ lem where
  lem : ∀ x y → is-S-null n (x ＝ y)
  lem x y = is-null←truncated n (tr x y)
}
%```
}

\subtree[stt-006Q]{
\title{Truncation is a [global reflective subuniverse](stt-007A)}
\taxon{corollary}

%```agda
\agda{
Truncation-SubU
  : ∀ {𝓤} (n : ℕ)
    → SubU 𝓤 𝓤
Truncation-SubU = n-separated-SubU singleton-SubU

singleton-GSU : GSU id
singleton-GSU .GSU.S = singleton-SubU
singleton-GSU .GSU.S-equiv = is-single←equiv-to-single

Truncation-GSU : ℕ → GSU id
Truncation-GSU = n-separated-GSU singleton-GSU

Trunc≃SNull-GSU : ∀ {n} → GSU-equiv (Null-GSU (λ (_ : 𝟙) → S n))
                                    (Truncation-GSU (suc n))
Trunc≃SNull-GSU A = (is-truncated←null _ , is-null←truncated _)

singleton-GSU-is-reflective : is-globally-reflective singleton-GSU
singleton-GSU-is-reflective .is-globally-reflective.○ A = ∅ → A
singleton-GSU-is-reflective .is-globally-reflective.η a _ = a
singleton-GSU-is-reflective .is-globally-reflective.has-is-reflector
  {𝓤} {A} = gr where
  open is-global-reflector
  gr : is-global-reflector singleton-GSU A (∅ → A) (const A ∅)
  gr .○∈S = ∅-UP-sing
  gr .reflects Qs = is-equiv←single-to-prop
                     (is-singleton-Π (λ _ → Qs))
                     (is-prop←is-single (is-singleton-Π (λ _ → Qs)))
                     (postcomp _ (const A ∅))



Truncation-refl : ∀ {n} → is-globally-reflective (Truncation-GSU n)
Truncation-refl {zero}
  = mk-gReflectors ○ η (mk-grfltor (mk-lift ○∈S) (reflects ∘ unlift))
  where open is-globally-reflective singleton-GSU-is-reflective
Truncation-refl {suc n} = is-globally-reflective-subtype-equiv
                            Trunc≃SNull-GSU
                            (Null∙-global-reflectors (λ _ → S-∙))


Truncation-Σ-closed : ∀ {n} → is-globally-Σ-closed (Truncation-GSU n)
Truncation-Σ-closed {zero} As Bs
  = mk-lift (Singleton-Σ (unlift As) (unlift ∘ Bs))
Truncation-Σ-closed {suc n} {A = A} {B} As Bs
  = Trunc≃SNull-GSU (Σ A B) .fst (Null-globally-Σ-closed
                                   (is-null←truncated _ As)
                                   (is-null←truncated _ ∘ Bs))
module Trunc where
  module _ {n} where
    open GRSUInduction (Truncation-refl {n}) Truncation-Σ-closed public

    open GSU (Truncation-GSU n) public
    open is-globally-reflective (Truncation-refl {n}) public

Trunc : ∀ {𝓤} n → Type 𝓤 → Type 𝓤
Trunc n = Trunc.○ {n}

∥_∥ : ∀ {𝓤} → Type 𝓤 → Type 𝓤
∥_∥ = Trunc 1

{-# DISPLAY Trunc.○ {n} A = Trunc n A #-}
}
%```
}


\subtree[stt-0075]{
\title{Lifting truncation levels}
\taxon{theorem}

\p{An #{n}-truncated type is #{n+k} truncated for any #{k : ℕ}.}



\quiver{
\begin{tikzcd}
	A &&&& {A^{\Sigma S^n}} \\
	\\
	&&&& {\Sigma_{a,b}(a=b)^{S^n}}
	\arrow["{\Delta_{A}}", from=1-1, to=1-5]
	\arrow["{(a,a,\Delta_{\rm{refl}})}"', from=1-1, to=3-5]
	\arrow[from=3-5, to=1-5]
\end{tikzcd}
}

%```agda
\agda{
suc-is-null : ∀ {𝓘 𝓤 𝓥}
                {I : Type 𝓘}
                {X : I → Type 𝓥}
                {A : Type 𝓤}
              → is-null X A
              → is-null (Susp ∘ X) A
suc-is-null {X = X}{A} AXnull i = eqv where opaque
  module eqv = is-equiv (AXnull i)
  Ideq : {x y : A} → (x ＝ y) ≃ (X i → x ＝ y)
  Ideq {x} {y} = (mk≃ _ (＝-is-null AXnull {x} {y} i))

  module Ideq x y = _≃_ (Ideq {x} {y})

  map1 : A → Σ[ a ∶ A ] Σ[ b ∶ A ] (X i → a ＝ b)
  map1 a = (a , a , ~refl)

  map1-eqv : A ≃ (Σ[ a ∶ A ] Σ[ b ∶ A ] (X i → a ＝ b))
  map1-eqv
    = A                                     ≃⟨ Σ-singleton (λ _ → Sing-is-singleton) e⁻¹ ⟩
      ((Σ[ a ∶ A ] Sing A a))               ≃⟨ Σ-ap-≃ (λ a → Σ-ap-≃ (λ b → Ideq)) ⟩
      (Σ[ a ∶ A ] Σ[ b ∶ A ] (X i → a ＝ b)) ≃∎

  map1-is-equiv : is-equiv map1
  map1-is-equiv = map1-eqv ._≃_.has-is-eqv

  homtpy : const A (Susp (X i)) ~ Susp-UP→ ∘ map1
  homtpy a = funext→ (pushout-ind _
                       (mk-coconeD
                         ~refl ~refl λ x
                         → IdP-func←Square
                             (glue x)
                             _
                             _
                             (∙-reflr _ ∙ sym (pushout-rec-apβ x
                                              ∙ sym (ap-const _)))))

  eqv : is-equiv (const A (Susp (X i)))
  eqv = is-equiv~∘ homtpy
                   (_≃_.has-is-eqv (Susp-UP≃ e⁻¹))
                   map1-is-equiv

suc-is-truncated : ∀ {𝓤} {A : Type 𝓤} n
                   → is-truncated n A
                   → is-truncated (suc n) A
suc-is-truncated zero
  = is-truncated←is-prop
  ∘ is-prop←is-single
  ∘ is-singleton←is-truncated
suc-is-truncated {A = A} (suc n)
  = is-truncated←null (suc n)
  ∘ suc-is-null
  ∘ is-null←truncated n

+-is-truncated : ∀ {𝓤} {A : Type 𝓤}
                   n k
                 → is-truncated n A
                 → is-truncated (n + k) A
+-is-truncated n zero = id
+-is-truncated n (suc k) tr = suc-is-truncated (n + k)
                                (+-is-truncated n k tr)
}
%```
}


\subtree[stt-0073]{
\date{2025-06-29}
\title{Instance resolution for truncated types}

\p{Truncation is not a single modality but a tower of connected
modalities.  Whilst we [have](stt-006Z) instances in place for
automatically resolving goals of type #{\rm{is-modal}}, but if we just
naively implement rules #{\rm{is-modal}_n \implies
\rm{is-modal}_{n+1}} and #{\rm{is-modal}_{n+1}(A) \implies
\rm{is-modal}_{n}(x =_A y)}, we run into trouble with Agda's instance
search.
   }

\p{To remedy this, we follow the approach taken in the
\citek{1lab}{1Lab.HLevel.Closure}, and define instances uniformly for
all truncation levels.}

\todo{Get this working - or take a different approach all together}

%```agda
\agda{
-- truncation-instance : ∀ {𝓤} {A : Type 𝓤} n
--                       → Trunc.is-truncated n A
--                       → ∀ {k}
--                       → Trunc.Is-truncated (n + k) A
-- truncation-instance n tr {k} = Trunc.mk-trunc (n + k)
--                                 (+-is-truncated n k tr)

-- instance opaque
--   unfolding Trunc.Is-truncated

--   Truncated-Id : ∀ {𝓤} {A : Type 𝓤} {n}
--                    ⦃ _ : Trunc.Is-truncated (suc n) A ⦄
--                  → ∀ {x y : A} → Trunc.Is-truncated n (x ＝ y)
--   Truncated-Id ⦃ (mk-modal t) ⦄ = mk-modal (＝-is-pred-truncated t)


-- instance opaque
--   unfolding Trunc.Is-truncated
--   Π-trunc : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥}
--               {n}
--                → ⦃ _ : ∀ {a} → Trunc.Is-truncated n (B a) ⦄
--                → Trunc.Is-truncated n (Π A B)
--   Π-trunc {n = zero} ⦃ m ⦄
--     = mk-modal (Trunc.tr←null 0
--                  (Π-is-null (λ a
--                    → Trunc.null←tr 0 (m .has-is-modal)))) where
--     open Is-modal
--   Π-trunc {n = suc n} ⦃ m ⦄
--     = mk-modal (Trunc.tr←null (suc n)
--                  (Π-is-null (λ a
--                    → Trunc.null←tr (suc n) (m .has-is-modal)))) where
--     open Is-modal

-- instance opaque
--   unfolding Trunc.Is-truncated
--   Trunc-trunc : ∀ {𝓤} {A : Type 𝓤}
--                   {n k}
--                 → Trunc.Is-truncated (n + k) (Trunc n A)
--   Trunc-trunc {n = n}{k} = truncation-instance n
--                             (Trunc.○-is-modal n) {k}
--   {-# INCOHERENT Trunc-trunc #-}

-- module TruncDo where
--   open Trunc

--   open Universal

--   instance
--     Universal-○ : ∀ {𝓤 𝓦} {A : Type 𝓤} {n} {P : Trunc n A → Type 𝓤}
--                  → ⦃ _ : ∀ {a} → Is-truncated n (P a) ⦄
--                  → ⦃ _ : Universal ((a : A) → P (Trunc.η n a)) 𝓦 ⦄
--                  → Universal ((a : Trunc n A) → P a) 𝓦
--     Universal-○ ⦃ _ ⦄ ⦃ u ⦄ .Universal.methods = u .methods
--     Universal-○ {n = n} ⦃ mod ⦄ ⦃ u ⦄ .Universal.from
--        = ind' n (is-trunc! n) ∘ u .from
--     Universal-○ {n = n} ⦃ _ ⦄ ⦃ u ⦄ .Universal.from-is-equiv
--       = is-equiv-∘ (ind'-is-equiv n) (u .from-is-equiv)

--   -- It can't figure this out
--   _>>=_ : ∀ {𝓤} {A : Type 𝓤} {B : Type 𝓤}
--             {n}
--             ⦃ _ : ∀ {k} → Trunc.Is-truncated (n + k) B ⦄
--           → Trunc n A
--           → (A → B)
--           → B
--   _>>=_ {B = B}{n = n} ⦃ t ⦄ x f
--     = rec! {B = B}
--            ⦃ Universal-○ {n = n} ⦃ t ⦄ ⦃ Universal-default ⦄ ⦄
--            f x

--   return : ∀ {𝓤} {A : Type 𝓤} {n} → A → Trunc n A
--   return {n = n} = Trunc.η n


-- module _ {𝓤} {A : Type 𝓤} ⦃ _ : ∀ {k} → Trunc.Is-truncated (suc (suc k)) A ⦄ where
  -- tst : Trunc.is-truncated 3 A
  -- tst =  Trunc.is-trunc! 3

  -- tst2 : ∀ {x y : A} → Trunc.is-truncated 1 (x ＝ y)
  -- tst2 = Trunc.is-trunc! 1

  -- tst3 : Trunc.is-truncated 2 (A → A)
  -- tst3 = Trunc.is-trunc! 2

  -- tst4 : ∀ {f g : S 5 → A} → Trunc.is-truncated 1 (f ~ g)
  -- tst4 = Trunc.is-trunc! 1

  -- tst5 : (x : Trunc 1 A) (f : Trunc 1 A → A) → Trunc.η 1 (f x) ＝ x
  -- tst5 x f = do
  --   x' ← x
  --   {!!}
  --   where open TruncDo

}
%```
}
