\date{2025-02-19}
\taxon{definition}
\title{Sigma types}

\import{stt-macros}

\p{
TODO! expo!
}

% ```agda
\agda{
module foundations.Sigma where

open import foundations.universe

infixr 3 _,_

record Σ {𝓤 𝓥} (A : Type 𝓤) (B : A → Type 𝓥) : Type (𝓤 ⊔ 𝓥) where
  constructor _,_
  field
    fst : A
    snd : B fst

open Σ public

{-# BUILTIN SIGMA Σ #-}
}
% ```

\subtree{
\taxon{notation}
\p{
  In prose, we use a combination of the big sigma notation #{\Sigma_{x : A} B(x)}, as well as the nupurl style notation: #{(x : A) \times B(x)}.}

\p{Additionally, given a family of types #{B : A \to \cal{U}}, we write #{\startverb \~{B} \stopverb} to signify the total space #{\Sigma_{a : A} B(a)}, and use #{\pi : \tot{B} \to A} to refer to the first projection.}
}

% ```agda
\agda{

_×_ : ∀ {𝓤 𝓥} → Type 𝓤 → Type 𝓥 → Type (𝓤 ⊔ 𝓥)
A × B = Σ A λ _ → B

}
% ```
