\date{2025-04-18}
\title{Joins}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.Join \stopverb}

\import{stt-macros}


% ```agda
\agda{
module core.Join where

open import foundations.Prelude
open import ufAxioms
open import core.Suspensions 
open import ergonomics.Universal
open import ergonomics.PushoutUniv
open import ergonomics.auto
open import ergonomics.Extensionality

}
% ```


\subtree[stt-002S]{
\taxon{definition}
\title{Joins of types}
\meta{defines}{\startverb ["_*_"] \stopverb}

% ```agda
\agda{
_*_ : ∀ {𝓤 𝓥} → Type 𝓤 → Type 𝓥 → Type (𝓤 ⊔ 𝓥)
A * B = Pushout {A = A × B} fst snd
}
% ```

}


\subtree[stt-002V]{
\title{Singleton joins}

\p{The join of a singleton with any type is also a singleton}

% ```agda
\agda{
-- *-single : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
--            → is-singleton A → is-singleton (A * B)
-- *-single sa = {!!}

-- *-single' : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
--             → is-singleton B → is-singleton (A * B)
-- *-single' sb = {!!}
}
% ```
}

\subtree[stt-002W]{
\title{Joins of propositions}

% ```agda
\agda{
-- *-prop-disj : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
--               {Q : Type 𝓦}
--            → is-prop A → is-prop B
--            → is-prop Q
--            → (A * B → Q) → (A → Q) × (B → Q)
-- *-prop-disj a b q f = (f ∘ ι₁ , f ∘ ι₂)

-- *-prop-disj≃ : ∀ {𝓤 𝓥 𝓦}
--               {A : Type 𝓤} {B : Type 𝓥} {Q : Type 𝓦}
--            → (pa : is-prop A) → (pb : is-prop B)
--            → (pq : is-prop Q)
--            → (A * B → Q) ≃ ((A → Q) × (B → Q))
-- *-prop-disj≃ {A = A} {B} {Q} pa pb pq
--  = (A * B → Q)                        ≃⟨ Univ≃' auto! ⟩
--    Coconeᵘ Q                          ≃⟨ {!!} ⟩
--    Σ[ f ∶ (A → Q) ]
--      Σ[ g ∶ (B → Q) ]
--       ((a : A) → (b : B) → f a ＝ g b) ≃⟨ Σ-ap-≃ (λ a
--                                            → Σ-singleton (λ x
--                                            → Singleton-Π λ b
--                                            → Singleton-Π (λ c
--                                            → ＝-singleton←is-prop pq _ _))) ⟩
--    ((A → Q) × (B → Q)) ≃∎

-- *-prop-rec : ∀ {𝓤 𝓥 𝓦}
--               {A : Type 𝓤} {B : Type 𝓥} {Q : Type 𝓦}
--            → (pa : is-prop A) → (pb : is-prop B)
--            → (pq : is-prop Q)
--            →  (A → Q) → (B → Q) → (A * B → Q)
-- *-prop-rec pa pb pq f g = _≃_.bwd (*-prop-disj≃ pa pb pq) (f , g) 
-- {-# NOINLINE *-prop-rec #-}

-- *-is-prop : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
--             → is-prop A → is-prop B
--             → is-prop (A * B)
-- *-is-prop aprop bprop = is-prop←is-single-if-inhabited
--   (*-prop-rec aprop bprop is-singleton-is-prop
--     (λ a → *-single (mk-singl a (aprop a)))
--     (λ b → *-single' (mk-singl b (bprop b))))
}
% ```

}
