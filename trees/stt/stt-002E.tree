\date{2025-03-31}
\import{stt-macros}
\title{The type theoretic universal property}

\p{We can restate the universal property type theoretically:}

\subtree{
\title{recursion principal}

  \p{There exists a map}
  ##{ \textrm{rec} : 
		     (\Sigma_{ (p : A \to Q) }(\Sigma_{(q : B \to Q)} (pf = qg)))
		     \to
		     (A +^C B \to Q)
  }

  \p{alongside the following computation rules:}

  \ul{
  \li{#{rec(p,q,h)(\iota_1(a)) = p(a)}}
  \li{#{rec(p,q,h)(\iota_2(b)) = q(b)}}
  \li{#{rec(p,q,h)(gl(c)) = \iota_2(g(c)) = h(c)}}
  }
}

\subtree{
  \title{induction principal}

  \p{In general we can construct dependent maps #{\Pi_{(a : A +^C B)} Q(a)}:}

  ##{ \textrm{ind} : \Sigma_{(p : \Pi_{(a : A)}Q(\iota_1(a)))} \Sigma_{(q : \Pi_{(b : B)} Q(\iota_2(b)))}
      		     		\Pi_{(c : C)} Q(gl(c))_*(p(f(c))) = q(g(c)) \\
      		     \to \Pi_{(p : A +^C B)} Q(p) }

  \p{again with the corresponding point computation principals:}

  \ul{
  \li{#{ \beta_1 : \textrm{ind}(p,q,h)(\iota_1(a)) = p(a) }}
  \li{#{ \beta_2 : \textrm{ind}(p,q,h)(\iota_2(b)) = q(b) }}
  }

  \p{The compution rule for the glue constructor is slightly more challenging to write down.
    Firstly we note that we want to classify the induction principal applied to the glue: #{\textrm{ind}(p,q,h)(gl(c))}, but
    because ind is a depedent function type, we have to use the dependent version of path application.
    The type of this term is:
    ##{Q(gl(c))_*(\textrm{ind}(p,q,h)(\iota_1(f(c)))) = \textrm{ind}(p,q,h)(\iota_2(g(c)))}
    We want to state that induction at glue is just
    the identification #{h(c)}, but the type isn't quite correct.
  }
  ##{ \beta_{gl} : (Q(gl(c))_*(\beta_1(f(c))) = \beta_2(g(c)))_*(\textrm{ind}(p,q,h)(gl(c))) = h(c)}

  \remark{
    \p{If we assume the rules #{\beta_1} and #{\beta_2} to hold by definition, the type of #{\beta_{gl}} simplifies
    	  to become just
       #{\textrm{ind}(p,q,h)(gl(c)) = h(c)}
     }
  }
}