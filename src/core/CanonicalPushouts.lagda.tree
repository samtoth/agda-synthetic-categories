\date{2025-04-15}
\title{Properties of the canonical pushouts}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb core.CanonicalPushouts \stopverb}

\import{stt-macros}


% ```agda
\agda{
{-# OPTIONS --allow-unsolved-metas #-}
module core.CanonicalPushouts where

open import foundations.Prelude
open import ufAxioms
open import ergonomics.Extensionality
}
% ```


\subtree[stt-002L]{
\taxon{theorem}
\title{Canonical pushouts are pushouts}

% ```agda
\agda{
Pushout-is-pushoutω : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                       {C : Type 𝓦} {f : A → B} {g : A → C}
                     → is-pushoutω (mk-span _ f g) pushout
Pushout-is-pushoutω {f = f} {g} = is-equiv←qiso iso where
  iso : quasi-iso (cocone-map (mk-span _ f g) pushout)
  iso .fst = pushout-rec
  iso .snd .fst f = ext! (pushout-ind _ λ where
    .CoconeD.p _ → refl
    .CoconeD.q _ → refl
    .CoconeD.filler a → IdP-func←Square (glue a) refl refl
                         (Square-degen-hor _ _ (pushout-rec-apβ a)))
  iso .snd .snd (mk-cocone p q filler)
    = ap (mk-cocone p q) (ext! pushout-rec-apβ)


pushout-rec-is-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : Type 𝓥}
                       {C : Type 𝓦} {f : A → B} {g : A → C}
                       {𝓠} {Q : Type 𝓠}
                      → is-equiv (pushout-rec {f = f} {g} {Q = Q})
pushout-rec-is-equiv {Q = Q} = is-equiv⁻¹ (Pushout-is-pushoutω)
}
% ```

}
