\title{Being a (sub)singleton is a property}
\taxon{theorem}
\meta{module}{\startverb foundations.SingletonProp \stopverb}
\date{2025-07-17} % Somehow
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
open import foundations.FunExt

module foundations.SingletonProp (FE : FunExt-global) where

open import foundations.Universes
open import foundations.Identity
open import foundations.DependentIdentity
open import foundations.Sigma
open import foundations.Singleton
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.EquivSingleton
open import foundations.SigmaPath
open import foundations.PropClosure
open import foundations.SingletonClosure

is-single-sigma : ∀ {𝓤} {A : Type 𝓤} → is-singleton A ≃ (Σ[ x ∶ A ] (∀ y → x ＝ y))
is-single-sigma = equiv←qiso (λ where
  ._≅_.fwd (mk-singl x y) → (x , y)
  ._≅_.fwd-iso .fst (a , b) → mk-singl a b
  ._≅_.fwd-iso .snd .fst _ → refl
  ._≅_.fwd-iso .snd .snd _ → refl)

is-single-is-prop : ∀ {𝓤} {A : Type 𝓤} → is-prop (is-singleton A)
is-single-is-prop {A = A} as = is-prop←equiv-to-prop
                     (is-single-sigma e⁻¹) lem as where
  lem2 : ∀ {x y : A} → is-prop (x ＝ y)
  lem2 = is-prop←is-single (＝-singleton←is-prop (is-prop←is-single as) _ _)

  lem : is-prop (Σ A (λ x → (y : A) → x ＝ y))
  lem (x , p) (y , p')
    = Σ-path→
       ( p y
       , is-prop-Π FE (λ _ → lem2) _ p'
       )
is-prop-is-prop : ∀ {𝓤} {A : Type 𝓤} → is-prop (is-prop A)
is-prop-is-prop = is-prop←is-single-if-inhabited λ
  ap → Singleton-Π FE (λ
    a → Singleton-Π FE (＝-singleton←is-prop ap a))
}
%```
