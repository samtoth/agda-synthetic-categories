\date{2025-04-18}
\title{The categrory of maps of types}
\taxon{module}
\meta{module}{\startverb core.Arrow \stopverb}
\import{stt-macros}

% ```agda
\agda{
module core.Arrow where

open import foundations.Prelude
open import ufAxioms
open import ergonomics.Representation
open import ergonomics.Marker
open import ergonomics.Extensionality
open import core.Slice
open import core.CanonicalPushouts
open import core.PullbackPath
}
% ```


\subtree[stt-0038]{
\taxon{definition}
\title{Walking morphisms in #{\mathcal{S}\omega}}
\meta{defines}{\startverb ["Arrow", "Arrow.dom", "Arrow.cod", "Arrow.f", "mk-arr"] \stopverb}

% ```agda
\agda{
record Arrow : Typeω where
  constructor mk-arr
  field
    {𝓤 𝓥} : Level
    {dom} : Type 𝓤
    {cod} : Type 𝓥
    f : dom → cod
}
% ```
}

\subtree[stt-003U]{
\taxon{definition}
\meta{defines}{\startverb ["Arrow-map", "mk-amap",
                           "Arrow-map.top", "Arrow-map.bot",
                           "Arrow-map.comm"] \stopverb}
\title{Morphisms of arrows}


\p{Given a pair of arrows, we define a morphism between them to be
a commutative square, that is a pair of a maps and a homotopy witnessing
that the square commutes.
}

% ```agda
\agda{
module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B)
         {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} (f' : C → D) where
  record Arrow-map : Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛) where
    constructor mk-amap
    field
      top  : A → C
      bot  : B → D
      comm : bot ∘ f ~ f' ∘ top

  unquoteDecl Arrow-map-repr≅ Arrow-map-repr≃
    = make-record-repr Arrow-map-repr≅ Arrow-map-repr≃ (quote Arrow-map)
}
% ```
}


\subtree[stt-004H]{
\taxon{theorem}
\date{2025-05-17}
\meta{defines}{\startverb ["Arrow-as-pullback"] \stopverb}
\title{A square is a pullback}

\p{The type #{\Hom(f,g)} is equivalent to the pullback of #{g \circ -} with
#{- \circ f}.}

%```agda
\agda{
module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
         {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {g : C → D} where

  pullback←arrow : Arrow-map f g → Pullback (g ∘_) (_∘ f)
  pullback←arrow (mk-amap f g h) = f , g , sym (funext→ h)

  Arrow-as-pullback : Arrow-map f g ≃ Pullback (g ∘_) (_∘ f)
  Arrow-as-pullback
    = Arrow-map f g                      ≃⟨ Arrow-map-repr≃ f g ⟩
      Σ[ k ∶ (A → C) ]
       Σ[ h ∶ (B → D) ] (h ∘ f ~ g ∘ k)  ≃⟨  Σ-ap-≃ (λ _
                                           → Σ-ap-≃ λ _
                                             → (funext≃ e⁻¹) ∙≃ sym≃)  ⟩
      Pullback (g ∘_) (_∘ f) ≃∎
}
%```

}

\subtree[stt-004I]{
\title{Characterising the path of arrow maps}
\taxon{theorem}

%```agda
\agda{
module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
         {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {f' : C → D} where

  arrow-map-Path : ∀ (G H : Arrow-map f f') → Type _
  arrow-map-Path (mk-amap t b H) (mk-amap t' b' H')
    = Σ[ p ∶ t ~ t' ] Σ[ q ∶ b ~ b' ]
      (H ~∙ (f' ◂ p) ~ q ▸ f ~∙ H')

  arrow-map-Path-refl : {G : Arrow-map f f'} → arrow-map-Path G G
  arrow-map-Path-refl = ~refl , ~refl , ~∙-reflr _

  arrow-map-Path-is-Rppred : ∀ (G : Arrow-map f f')
                             → Reflexive-ppred _ G _
  arrow-map-Path-is-Rppred G = (arrow-map-Path G) , arrow-map-Path-refl

  arrow-map-path→ : ∀ {G H : Arrow-map f f'} → (G ＝ H) → arrow-map-Path G H
  arrow-map-path→ = idtoppred (arrow-map-Path-is-Rppred _) _

  arrow-map-path : ∀ (G H : Arrow-map f f') → (G ＝ H) ≃ arrow-map-Path G H
  arrow-map-path G@(mk-amap t b h) H
    = mk≃ arrow-map-path→
          (is-identity-system←Sing-sing
            (arrow-map-Path G)
            arrow-map-Path-refl
            (is-single←equiv-to-single
              (Σ-ap-≃-fst (Arrow-map-repr≃ _ _ e⁻¹))
              (is-singleton-structure←parts (SingS-is-single t)
                (t , ~refl)
                (is-singleton-structure←parts (SingS-is-single b)
                  (b , ~refl)
                  (SingS-is-single λ a → h a ∙ refl))))
            H)
}
%```
}

\subtree[stt-003X]{
\taxon{theorem}
\meta{defines}{\startverb ["id-square", "paste-squares"] \stopverb}
\title{Arrows and squares form a category}

% ```agda
\agda{
id-square : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
            → Arrow-map f f
id-square = mk-amap id id ~refl

module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
         {𝓤' 𝓥'} {A' : Type 𝓤'} {B' : Type 𝓥'} {f' : A' → B'}
        {𝓤'' 𝓥''} {A'' : Type 𝓤''} {B'' : Type 𝓥''} {f'' : A'' → B''} where
  paste-squares : Arrow-map f' f'' → Arrow-map f f'
                  → Arrow-map f f''
  paste-squares (mk-amap g' h' comm') (mk-amap g h comm)
    = mk-amap (g' ∘ g) (h' ∘ h) ( h' ∘ h ∘ f        ~⟨ h' ◂ comm ⟩
                                  h' ∘ f' ∘ g       ~⟨ comm' ▸ g ⟩
                                  f'' ∘ g' ∘ g      ~∎)
}
% ```
}

\subtree[stt-003V]{
\taxon{definition}
\meta{defines}{\startverb ["arrow-fibre", "is-pb-square"] \stopverb}
\title{Pullback squares}

\p{Given a map of arrows #{f \to f'}, we can define a family of functions
from the fibre over #{f} to the fibre over #{f'}. If this map is a
fibrewise equivalence, then we say that the square is a pullback square.
}

% ```agda
\agda{
module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
         {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {f' : C → D} where
  arrow-fibre :  (gs : Arrow-map f f') →
                 ∀ (b : B)
                 → fibre f b → fibre f' (gs .Arrow-map.bot b)
  arrow-fibre (mk-amap g g' hom) b (a , p) = (g a , sym (hom a) ∙ ap g' p)


  is-pb-square : Arrow-map f f' → Type (𝓤 ⊔ 𝓥 ⊔ 𝓦 ⊔ 𝓛)
  is-pb-square a = is-fibrewise-equiv (arrow-fibre a)
}
% ```
}

\subtree[stt-003W]{
\taxon{theorem}
\meta{defines}{\startverb ["compose-pb"] \stopverb}
\title{horizontal composition of pullbacks}

% ```agda
\agda{
module _ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
         {𝓤' 𝓥'} {A' : Type 𝓤'} {B' : Type 𝓥'} {f' : A' → B'}
        {𝓤'' 𝓥''} {A'' : Type 𝓤''} {B'' : Type 𝓥''} {f'' : A'' → B''} where
  compose-pb :  ∀ {a : Arrow-map f' f''} {b : Arrow-map f f'}
                     → (ae : is-pb-square a) → (be : is-pb-square  b)
                     →  is-pb-square (paste-squares a b)
  compose-pb {a} {b} ae be x
    = tr is-equiv (funext→ (I x))
       (is-equiv-∘ {f = arrow-fibre a (b .Arrow-map.bot x)} {g = arrow-fibre b x}
         (ae (b .Arrow-map.bot x))
         (be x)) where
    module b = is-equiv (be x)
    module a = is-equiv (ae (b .Arrow-map.bot x))

    open Arrow-map

    II : (x : B) (fib : fibre f x) →
       sym (paste-squares a b .Arrow-map.comm (fib .fst)) ∙
         ap (paste-squares a b .Arrow-map.bot) (fib .snd)
        ＝
       (arrow-fibre a (b .Arrow-map.bot x) ∘ arrow-fibre b x)
         fib .snd
    II x (aa , p)
     = sym (paste-squares a b .comm aa) ∙ ap (paste-squares a b .bot) p
         ＝⟨⟩
       sym (ap (a .bot) (b .comm aa) ∙ ⌜ a .comm (b .top aa) ∙ refl ⌝) ∙ ap (a .bot ∘ b .bot) p
         ＝⟨ ap! (∙-reflr _) ⟩
       ⌜ sym (ap (a .bot) (b .comm aa) ∙ a .comm (b .top aa)) ⌝ ∙ ap (a .bot ∘ b .bot) p
         ＝⟨ ap! (∙-symsym (ap (a .bot) (b .comm aa)) _) ⟩
       (sym (a .comm (b .top aa)) ∙ sym (ap (a .bot) (b .comm aa))) ∙ ap (a .bot ∘ b .bot) p
         ＝⟨ ∙-assoc (sym (a .comm (b .top aa))) _ (ap (a .bot ∘ b .bot) p) ⟩
       sym (a .comm (b .top aa)) ∙ ⌜ sym (ap (a .bot) (b .comm aa)) ⌝ ∙ ap (a .bot ∘ b .bot) p
         ＝⟨ ap! (sym (ap-sym (a .bot) _)) ⟩
       sym (a .comm (b .top aa)) ∙ ap (a .bot) (sym (b .comm aa)) ∙ ⌜ ap (a .bot ∘ b .bot) p ⌝
         ＝⟨ ap! (ap-∘ _ _ _) ⟩
       sym (a .comm (b .top aa)) ∙ ⌜ ap (a .bot) (sym (b .comm aa)) ∙ ap (a .bot) (ap (b .bot) p) ⌝
         ＝⟨ ap! (sym (ap-∙ (a .bot) (sym (b .comm aa)) _)) ⟩ 
       sym (a .comm (b .top aa)) ∙ ap (a .bot) (sym (b .comm aa) ∙ ap (b .bot) p)
         ＝⟨⟩ 
       (arrow-fibre a (b .bot x) ∘ arrow-fibre b x) (aa , p) .snd ∎


    I : (x : B) →
      arrow-fibre a (b .Arrow-map.bot x) ∘ arrow-fibre b x
        ~
      arrow-fibre (paste-squares a b) x
    I x fib = fibre-path→ (refl , II x fib)
}
% ```
}

\subtree[stt-002Z]{
\taxon{theorem}
\title{Arrow morphisms are squares}
\meta{defines}{\startverb ["Cocone←Arrow-map", "Cone←Arrow-map"] \stopverb}

\p{We now have (at least) three things that can be called squares. We give functions
to convert from arrow-map squares, to either cones over cospans or cocones over spans.}


% ```agda
\agda{
Cocone←Arrow-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
                  {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {f' : C → D}
                → Arrow-map f f' → Σ[ S ∶  Span 𝓤 𝓥 𝓦 ] Cocone S D
Cocone←Arrow-map {f = f} {f' = f'} (mk-amap g g' comm)
  = (mk-span _ f g) , mk-cocone g' f' comm


Cone←Arrow-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
                  {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {f' : C → D}
                 → Arrow-map f f' → Σ[ S ∶ Cospan 𝓛 𝓥 𝓦 ] Cone S A
Cone←Arrow-map {f = f} {f' = f'} (mk-amap top bot comm)
  = (mk-cospan _ bot f') , mk-cone f top comm
}
% ```
}

\subtree[stt-004E]{
\taxon{defition}

\title{(co)gap maps from squares}

% ```agda
\agda{
gap-map←square : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
                   {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {f' : C → D}
                 → (g : Arrow-map f f')
                 → A → Pullback (g .Arrow-map.bot) f'
gap-map←square g = gap (Cone←Arrow-map g .snd)


cogap-map←square : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
                   {𝓦 𝓛} {C : Type 𝓦} {D : Type 𝓛} {f' : C → D}
                 → (g : Arrow-map f f')
                 → Pushout f (g .Arrow-map.top) → D
cogap-map←square g = cogap (Cocone←Arrow-map g .snd)
}
% ```
}


\subtree[stt-003C]{
\title{Pullback squares from fibre equivalence}
\taxon{theorem}
\meta{defines}{\startverb ["is-pullback←is-pb-square"] \stopverb}
\p{We show that a pullback square in the sense of [[stt-003V]] deserves it's name.
 That is, a square is a pullback iff the corrosponding cone is a pullback cone.}

\proof{
\p{Suppose we have a square:}

\quiver{
\begin{tikzcd}
	A && C \\
	\\
	B && D
	\arrow["g", from=1-1, to=1-3]
	\arrow["f"', from=1-1, to=3-1]
	\arrow["{f'}", from=1-3, to=3-3]
	\arrow["{g'}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{such that the map #{\textrm{fib}_{g'}(a) \toeq \textrm{fib}_g(f'(a))} is
an equivalence. Then to verify it is a pullback, then we need
to show that the induced map #{A \to C \times_D B} is also an equivalence.}

\p{We can view both of these maps as living in a slice over #{C}, and a
by [[stt-003D]], a map in the slice is in equivalence iff if is an equivalence
on fibres.}

\quiver{
\begin{tikzcd}
	A && {B \times_D C} \\
	& B
	\arrow["{\textit{gap}}", from=1-1, to=1-3]
	\arrow["f"', from=1-1, to=2-2]
	\arrow["{\pi_1}", from=1-3, to=2-2]
\end{tikzcd}
}

\p{So we need to show #{\textrm{fib}_{f}(c) \to \textrm{fib}_{\pi_1}(c)} is
an equivalence. The fibre of the projection is equivalent to the fibre of
#{g} at #{f(c)}, and so by the [3-for-2](foundations.3for2) property of equivalences we
have that the square is a pullback.}

% ```agda
\agda{
is-pullback←is-pb-square : ∀ {𝓤 𝓥 𝓦 𝓜}
  {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
  {C : Type 𝓦} {D : Type 𝓜} {f' : C → D}
  → (g : Arrow-map f f')
  → is-pb-square g
  → let (s , c) = Cone←Arrow-map g
  in is-pullbackω s c
is-pullback←is-pb-square {A = A} {B} {f = f} {C} {D} {f' = f'} G pbsq
  = is-pullback←gap cone (is-equiv←on-fibres slice-map slice-equiv) where
  cospan = Cone←Arrow-map G .fst
  cone = Cone←Arrow-map G .snd

  g : A → C
  g = G .Arrow-map.top

  g' : B → D
  g' = G .Arrow-map.bot

  open pb g' f'

  slice-map : Slice-map f π₁
  slice-map .fst = gap cone
  slice-map .snd = ~refl

  lem : {a = b : B} →
      arrow-fibre G b ~
      fib-π₁ g' f' b ._≃_.fwd ∘ Slice-fibre (gap cone , ~refl) b
  lem (a , refl) = Σ-path→ (refl , (∙-reflr _))

  slice-equiv : is-fibrewise-equiv (Slice-fibre {q = π₁} (gap cone , ~refl))
  slice-equiv b = 3-for-2~ {f = fib-π₁ g' f' b ._≃_.fwd}
                           lem
                           (fib-π₁ g' f' b ._≃_.has-is-eqv)
                           (pbsq b)


is-pb-square←is-pullback : ∀ {𝓤 𝓥 𝓦 𝓜}
  {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
  {C : Type 𝓦} {D : Type 𝓜} {f' : C → D}
  → (g : Arrow-map f f')
  → let (s , c) = Cone←Arrow-map g
  in is-pullbackω s c
  → is-pb-square g
is-pb-square←is-pullback {f = f} {f' = f'} g pb b
  = homotopy-is-equiv lem
                      (is-equiv-∘ (fib-π₁ bot f' b ._≃_.has-is-eqv)
                                  (fibre-equiv←is-equiv slice-map gap-is-equiv b )) where
  open Arrow-map g
  open pb bot f'

  cospan = Cone←Arrow-map g .fst
  cone = Cone←Arrow-map g .snd

  gap-is-equiv : is-equiv (gap (mk-cone f top comm))
  gap-is-equiv = gap-is-equiv←is-pullback _ pb

  slice-map : Slice-map f π₁
  slice-map .fst = gap cone
  slice-map .snd = ~refl

  lem : fib-π₁ bot f' b ._≃_.fwd ∘
      Slice-fibre slice-map b
      ~ arrow-fibre g b
  lem (a , refl) = Σ-path→ (refl , sym (∙-reflr _))
}
% ```
}
}

\subtree[stt-003P]{
\taxon{definition}
\title{Squares from pre/post-composition}

\p{Given a square of the form:}

\quiver{
\begin{tikzcd}
	A && C \\
	\\
	B && D
	\arrow["g", from=1-1, to=1-3]
	\arrow["f"', from=1-1, to=3-1]
	\arrow["{f'}", from=1-3, to=3-3]
	\arrow["{g'}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{For all types #{Q}, we obtain squares:}

\quiver{
\begin{tikzcd}
	{Q \to A} && {Q \to C} \\
	\\
	{Q \to B} && {Q \to D}
	\arrow["{g \circ -}", from=1-1, to=1-3]
	\arrow["{f \circ -}"', from=1-1, to=3-1]
	\arrow["{f' \circ -}", from=1-3, to=3-3]
	\arrow["{g' \circ -}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{and}

\quiver{
\begin{tikzcd}
	{D \to Q} && {B \to Q} \\
	\\
	{C \to Q} && {A \to Q}
	\arrow["{- \circ g'}", from=1-1, to=1-3]
	\arrow["{- \circ f'}"', from=1-1, to=3-1]
	\arrow["{- \circ f'}", from=1-3, to=3-3]
	\arrow["{- \circ g}"', from=3-1, to=3-3]
\end{tikzcd}
}

% ```agda
\agda{
postcomp-square : ∀ {𝓤 𝓥 𝓦 𝓜}
  {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
  {C : Type 𝓦} {D : Type 𝓜} {f' : C → D}
  (g : Arrow-map f f')
  → ∀ {𝓛} (C : Type 𝓛) → Arrow-map (postcomp C f') (postcomp C f)
postcomp-square (mk-amap top bot p) C
 = mk-amap (_∘ bot) (_∘ top) λ f → funext→ (f ◂ (p ~⁻¹))

precomp-square : ∀ {𝓤 𝓥 𝓦 𝓜}
  {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
  {C : Type 𝓦} {D : Type 𝓜} {f' : C → D}
  (g : Arrow-map f f')
  → ∀ {𝓛} (C : Type 𝓛) → Arrow-map (precomp C f) (precomp C f')
precomp-square (mk-amap top bot p) C
  = mk-amap (top ∘_) (bot ∘_) λ f → funext→ (p ▸ f)
}
% ```
}

\remark{
\p{Precomposing squares gives the result of applying the functor
#{Hom(Q,H)} to the square. It is a well known result that this functor preserves
pullback Likewise, postcomposition is given by #{Hom(-,Q)}, and this functor turns
pushouts in to pullbacks.
}
}

\subtree[stt-003R]{
\title{Precomposition of pullback squares}
\taxon{theorem}

\p{Given a square of the following form:}

\quiver{
\begin{tikzcd}
	A && C \\
	\\
	B && D
	\arrow["g", from=1-1, to=1-3]
	\arrow["f"', from=1-1, to=3-1]
	\arrow["{f'}", from=1-3, to=3-3]
	\arrow["{g'}"', from=3-1, to=3-3]
\end{tikzcd}
}

\p{We show that the square obtained via precomposition
   is a pullback iff the original square is.
}

\proof{

\p{
First note that the type of cones on #{(Q \to B) \to (Q \to D) \leftarrow (Q \to C)}
is equivalent to the canonical pullback of #{B \to D \leftarrow C}. We can construct
the following triangle, and apply the three for two property for equivalences:
}

\quiver{
\begin{tikzcd}
	{(A \to Q)} &&& {(B \to Q)\times_{(C \to Q)} (D \to Q)} \\
	\\
	&& {\textrm{Cone}(f,g)}
	\arrow["{\textit{gap}}", from=1-1, to=1-4]
	\arrow["{\textrm{cone-map}}"', from=1-1, to=3-3]
	\arrow["\sim", from=1-4, to=3-3]
\end{tikzcd}
}

% ```agda
\agda{
unquoteDecl cone-repr≅ cone-repr≃
  = make-record-repr cone-repr≅ cone-repr≃ (quote Cone)

precomp-cone≃pb : ∀ {𝓤 𝓥 𝓦 𝓜}
  {A : Type 𝓤} {B : Type 𝓥}
  {C : Type 𝓦} {f : A → B}
  {g : C → B} {D : Type 𝓜}
  → Cone (mk-cospan B f g) D ≃ Pullback (precomp D f) (precomp D g)
precomp-cone≃pb {f = f} {g = g} {D = D}
  = Cone (mk-cospan _ f g) D              ≃⟨ cone-repr≃ ⟩
    Σ[ f' ∶ (D → _) ] Σ[ g' ∶ (D → _) ]
        (precomp D f f' ~ precomp D g g') ≃⟨ Σ-ap-≃ (λ f' → Σ-ap-≃ (λ g' → funext≃ e⁻¹)) ⟩
    Pullback (precomp D f) (precomp D g)  ≃∎


precomp-pullback : ∀ {𝓤 𝓥 𝓦 𝓜}
  {A : Type 𝓤} {B : Type 𝓥} {f : A → B}
  {C : Type 𝓦} {D : Type 𝓜} {f' : C → D}
  (g : Arrow-map f f')
  → is-pb-square g
  → ∀ {𝓛} {C : Type 𝓛}
  → is-pb-square
        (precomp-square g C)
precomp-pullback {A = A} {f = f} {f' = f'} G@(mk-amap g g' H) eq {_} {C}
  = is-pb-square←is-pullback _
      (is-pullback←gap (cn∘ C)
                       (3-for-2
                         {f = _≃_.bwd precomp-cone≃pb}
                         {g = gap (cn∘ C)}
                         (_≃_.has-is-eqv (precomp-cone≃pb e⁻¹))
                         (cn-is-pb C))) where
  cs : Cospan _ _ _
  cs = Cone←Arrow-map G .fst

  cn : Cone cs _
  cn = Cone←Arrow-map G .snd

  cs∘ : ∀ {𝓠} (Q : Type 𝓠) → Cospan _ _ _
  cs∘ {𝓠} Q = Cone←Arrow-map (precomp-square G Q) .fst

  cn∘ : ∀ {𝓠} (Q : Type 𝓠) → Cone (cs∘ Q) _
  cn∘ {𝓠} Q = Cone←Arrow-map (precomp-square G Q) .snd

  cn-is-pb : is-pullbackω cs cn
  cn-is-pb = is-pullback←is-pb-square G eq

  map : ∀ {𝓠} {Q : Type 𝓠} → (Q → A) → Cone cs Q
  map {_} {Q} = _≃_.bwd precomp-cone≃pb  ∘ gap (cn∘ Q)
}
% ```
}
}
