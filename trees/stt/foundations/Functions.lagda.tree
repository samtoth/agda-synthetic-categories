\date{2025-02-20}
\title{Function types}

\import{stt-macros}

% ```agda
\agda{
module foundations.Functions where

open import foundations.universe
open import foundations.Sigma
open import foundations.Identity
open import foundations.Singleton
}
% ```

\subtree{
\taxon{definition}
\title{Fibres}
\p{Given a function #{f : A \to B}, we define the fibre of #{f} at #{b : B}, notated #{\fibre{f}{a}} to be the type
#{\Sigma_{a : A}{f(a) = b}}. }

\p{Note that this is subtly different to the preimage, as we can show that #{\Sigma_{(b : B)} \fibre{f}{b}} is equivalent to #{A} itself.}

% ```agda
\agda{

fibre : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → B → Type (𝓤 ⊔ 𝓥)
fibre f b = Σ _ λ a → f a ＝ b


total-fibre : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
total-fibre f = Σ _ (fibre f)

total-fibre→dom : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → total-fibre f → A
total-fibre→dom (._ , a , refl) = a

dom→total-fibre : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → A → total-fibre f
dom→total-fibre {f = f} a = f a , a , refl

test'' : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → ∀ (x : total-fibre f) → dom→total-fibre (total-fibre→dom x) ＝ x  
test'' (._ , a , refl) = refl

test''' :  ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {f : A → B} → ∀ (x : A) → total-fibre→dom (dom→total-fibre {f = f} x) ＝ x  
test''' a = refl

}
% ```
}

\p{The fibre type gives us a useful tool for talking about properties of maps. Generally if we have a property of types for example being #{n}-connected, we reuse the same terminology on maps to mean all fibres of the map have the corresponding property.}


\subtree{
\taxon{definition}
\title{embeddings}

\p{We call a map an embedding if the fibres are all sub-singletons. This notion is a generalisation of injective set functions, infact if we - for a moment - imagine fibre to mean preimage, then a function of sets is injecte if each preimage is either empty or has a unique inhabitant.}

% ```agda
\agda{
is-embedding : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-embedding f = ∀ b → is-subsingleton (fibre f b)
}
% ```
}


\subtree{
\taxon{definition}
\title{equivalence}

\p{A map is said to be an equivalence if each of its fibres is a singleton.}

\agda{
is-equiv : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} (f : A → B) → Type (𝓤 ⊔ 𝓥)
is-equiv f = ∀ b → is-singleton (fibre f b)
}
% ```
}
