\date{2025-04-16}
\title{Suspensions}
\author{samueltoth}
\taxon{module}
\meta{module}{\startverb Core.Suspensions \stopverb}

\import{stt-macros}


% ```agda
\agda{
module Core.Suspensions where

open import Foundations.Prelude
open import Core.CanonicalPushouts
open import Core.Arrow
open import Core.ArrowEquiv
open import ufAxioms
open import Ergonomics.Universal
open import Ergonomics.PushoutUniv
open import Ergonomics.Representation
open Universal ⦃...⦄
}
% ```


\subtree[stt-002M]{
\taxon{definition}
\title{Suspension}
\meta{defines}{\startverb ["Susp", "N", "S", "merid"] \stopverb}

\p{Given a type #{X}, we define the suspension #{ΣX} to be the pushout of:}

\quiver{
\begin{tikzcd}
	X && 1 \\
	\\
	1 && {\Sigma X}
	\arrow[from=1-1, to=1-3]
	\arrow[from=1-1, to=3-1]
	\arrow["N", from=1-3, to=3-3]
	\arrow["S"', from=3-1, to=3-3]
	\arrow["\lrcorner"{anchor=center, pos=0.125, rotate=180}, draw=none, from=3-3, to=1-1]
\end{tikzcd}
}

\p{We call the two distinguished points \em{N}orth and \em{S}outh and the family of maps from North to South
   the \em{merid}ians.}

% ```agda
\agda{
Susp : ∀ {𝓤} → Type 𝓤 → Type 𝓤
Susp X = Pushout {A = X} ! !
{-# NOINLINE Susp #-}

North South : ∀ {𝓤} {A : Type 𝓤} → Susp A
North = ι₁ tt
South = ι₂ tt

merid : ∀ {𝓤} {A : Type 𝓤} → A → Id (Susp A) North South
merid = glue
}
% ```
}


\subtree[stt-002N]{
\title{universal property of suspensions}

\p{The type #{\Sigma X \to Y} is equivalent to #{\Sigma_{y_N, y_S : Y} (X \to y_N = y_S)}.} 

\proof{
##{
\begin{align*}
  (\Sigma X \to Y) & \simeq (1 +^X 1 \to Y) \\
                   & \simeq (\Sigma_{(x, y : 1 \to Y)}(X \to x \sim y)) \\
                   & \simeq (\Sigma_{(x, y : Y)}(X \to x = y))
\end{align*}
}
}

\todo{
\p{Ideally we use universal property for pushouts macro,
   followed by coconeᵘ representation macro, but the latter isn't
   working at the moment.}
}

%```agda
\agda{
Susp-UP→ :  ∀ {𝓤 𝓥} {X : Type 𝓤}
            {Y : Type 𝓥}
          → Σ[ x ∶ Y ] Σ[ y ∶ Y ] (X → x ＝ y)
          → Susp X → Y
Susp-UP→ (x , y , p) = pushout-rec (mk-cocone (λ _ → x) (λ _ → y) p)

Susp-UP-is-equiv
  : ∀ {𝓤 𝓥} {X : Type 𝓤}
      {Y : Type 𝓥}
    → is-equiv (Susp-UP→ {X = X}{Y})
Susp-UP-is-equiv = is-equiv←qiso (λ where
  .fst po → (po (ι₁ tt) , po (ι₂ tt) , po ◂ glue)
  .snd .fst (a , b , H) → ap ((a ,_) ∘ (b ,_)) (funext→ pushout-rec-apβ)
  .snd .snd → is-equiv.η Pushout-is-pushoutω)

Susp-UP≃ : ∀ {𝓤 𝓥} {X : Type 𝓤}
            {Y : Type 𝓥}
          →  (Susp X → Y) ≃ (Σ[ x ∶ Y ] Σ[ y ∶ Y ] (X → x ＝ y))
Susp-UP≃ {X = X} {Y} = mk≃ _ (is-equiv⁻¹ Susp-UP-is-equiv)
  -- = (Susp X → Y) ≃⟨ mk≃ _ Pushout-is-pushoutω  ⟩
  --   Cocone _ Y                                            ≃⟨ cocone-repr≃ ⟩
  --   (Σ[ f ∶ (𝟙 → Y) ] Σ[ g ∶ (𝟙 → Y )] (X → f tt ＝ g tt)) ≃⟨ Σ-ap-≃-fst unit-UP≃ ⟩
  --   (Σ[ x ∶ Y ] Σ[ g ∶ (𝟙 → Y) ] (X → x ＝ g tt))          ≃⟨ Σ-ap-≃ (λ x → Σ-ap-≃-fst (unit-UP≃)) ⟩
  --   Σ[ x ∶ Y ] Σ[ y ∶ Y ] (X → x ＝ y) ≃∎
}
%```
}

\subtree[stt-007G]{
\title{Suspension is a functor}
\taxon{theorem}

%```agda
\agda{
Susp-map : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥}
           → (f : A → B)
           → Susp A → Susp B
Susp-map f = Susp-UP→ (ι₁ tt , ι₂ tt , glue ∘ f)
}
%```
}

\subtree[stt-007J]{
\title{Suspension preserves the unit type}
\taxon{theorem}

%```agda
\agda{
Susp-𝟙 : Susp 𝟙 ≃ 𝟙
Susp-𝟙 = equiv←qiso (λ where
  ._≅_.fwd → !
  ._≅_.fwd-iso .fst _ → North
  ._≅_.fwd-iso .snd .fst
    → pushout-ind _ (mk-coconeD ~refl glue λ
                        a → IdP←Square refl refl _ (glue a)
                              (sym ( ∙-reflr _
                                   ∙ coe-precomp＝ refl (glue a))))
  ._≅_.fwd-iso .snd .snd → ~refl)
}
%```
}


\subtree[stt-007K]{
\title{Suspension map of #{!}}
\taxon{corollary}
\p{There exists an equivalence of arrows #{!_{\Sigma A} \simeq \Sigma !_A}}

%```agda
\agda{
Susp-! : ∀ {𝓤} {A : Type 𝓤} → Arrow-map (Susp-map (! {A = A})) (! {A = Susp A})
Susp-! .Arrow-map.top = id
Susp-! .Arrow-map.bot = !
Susp-! .Arrow-map.comm = ~refl

Susp-!-is-equiv : ∀ {𝓤} {A : Type 𝓤} → is-Arrow-equiv (Susp-! {A = A})
Susp-!-is-equiv .fst = id-is-equiv
Susp-!-is-equiv .snd = Susp-𝟙 ._≃_.has-is-eqv

Susp-!⁻¹ : ∀ {𝓤} {A : Type 𝓤} → Arrow-map (! {A = Susp A}) (Susp-map (! {A = A}))
Susp-!⁻¹ = Arrow⁻¹←Arrow-equiv Susp-! Susp-!-is-equiv
}
%```
}
