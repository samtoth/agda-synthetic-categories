\date{2025-04-20}
\title{The 3 for 2 property for equivalances}
\author{samueltoth}
\meta{module}{\startverb foundations.3for2 \stopverb}

\import{stt-macros}

% ```agda
\agda{
module foundations.3for2 where

open import foundations.Universes
open import foundations.Identity
open import foundations.Homotopy
open import foundations.FunctionInverses
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Functions
open import foundations.Sigma
open import foundations.Embedding
open import foundations.EquivContrFibre
open import foundations.Singleton
open import foundations.EquivHomotopy
}
% ```

\subtree[stt-003E]{
\title{3 for 2 property for equivalences}
\taxon{theorem}
\meta{defines}{\startverb ["3-for-2", "3-for-2'",
                           "3-for-2~", "3-for-2~'"] \stopverb}

\p{Suppose you have a diagram of maps:}

\quiver{
\begin{tikzcd}
	A && C \\
	& B
	\arrow["{f \circ g}", from=1-1, to=1-3]
	\arrow["g"', from=1-1, to=2-2]
	\arrow["f"', from=2-2, to=1-3]
\end{tikzcd}
}

\p{The any two of the following imply the third:}

\ol{
\li{#{f} is an equivalence}
\li{#{g} is an equivalence}
\li{#{fg} is an equivalence}
}

% ```agda
\agda{
module _ {𝓤} {A : Type 𝓤}
         {𝓥} {B : Type 𝓥}
         {𝓦} {C : Type 𝓦}
         {f : B → C} {g : A → B} where

  3-for-2 : is-equiv f → is-equiv (f ∘ g) → is-equiv g
  3-for-2 fe fge = is-equiv←qiso qiso where
    module fg = is-equiv fge
    module f = is-equiv fe

    qiso : quasi-iso g
    qiso .fst = fg.bwd ∘ f
    qiso .snd .fst = fg.η
    qiso .snd .snd = (is-embedding←is-equiv fe) ◂emb (fg.ε ▸ f)

  3-for-2' : is-equiv g → is-equiv (f ∘ g) → is-equiv f
  3-for-2' ge fge = homotopy-is-equiv
                    (f ◂ g.ε)
                    (is-equiv-∘ fge (is-equiv⁻¹ ge)) where
    module g = is-equiv ge

  3-for-2~ : ∀ {k : A → C} (h : k ~ f ∘ g)
             → is-equiv f → is-equiv k → is-equiv g
  3-for-2~ h fe ke = 3-for-2 fe (homotopy-is-equiv h ke)

  3-for-2~' : ∀ {k : A → C} (h : k ~ f ∘ g)
             → is-equiv g → is-equiv k → is-equiv f
  3-for-2~' h ge ke = 3-for-2' ge (homotopy-is-equiv h ke)

  is-equiv~∘ : ∀ {k : A → C} (h : k ~ f ∘ g)
               → is-equiv f → is-equiv g → is-equiv k
  is-equiv~∘ h fe ge = homotopy-is-equiv (h ~⁻¹) (is-equiv-∘ fe ge)
}
% ```
}
