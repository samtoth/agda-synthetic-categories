\date{2025-03-04}
\taxon{theorem}
\title{Fibres of maps between Sigma types}
\meta{module}{\startverb foundations.TotalEquiv \stopverb}
\import{stt-macros}

% ```agda
\agda{
module foundations.TotalEquiv where

open import foundations.Universes
open import foundations.QuasiIsomorphism
open import foundations.CoherentIsomorphism
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.SigmaProperties
open import foundations.FibrewiseEquiv
open import foundations.Identity
open import foundations.DependentIdentity
open import foundations.Functions
open import foundations.EquivContrFibre
open import foundations.Singleton
open import foundations.EquivSingleton
}
% ```

\subtree[stt-0027]{
\taxon{theorem}
\title{Classifying the fibre of total maps}
\meta{defines}{\startverb ["fibre-total-map"] \stopverb}

% ```agda
\agda{
fibre-total-map : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦} {f : ∀ a → B a → B' a}
                       {a : A} {b : B' a}
                     → fibre (total-map f) (a , b) ≃ fibre (f a) b
fibre-total-map {A = A} {B} {B'} {f = f} {a} {b}
  = fibre (total-map f) (a , b)                                   ≃⟨⟩
    Σ (Σ A B) (λ (a' , ba) → total-map f (a' , ba) ＝ (a , b))    ≃⟨ Σ-assoc ⟩
    Σ A (λ a' → Σ (B a') λ ba → total-map f (a' , ba) ＝ (a , b)) ≃⟨⟩
    Σ A (λ a' → Σ (B a') λ ba → (a' , f a' ba) ＝ (a , b))        ≃⟨ Σ-ap-≃ (λ a' → Σ-ap-≃ λ ba → Σ-path e⁻¹) ⟩
    Σ A (λ a' → Σ (B a') λ ba → Σ (a' ＝ a)
        λ p → IdP (ap B' p) (f a' ba) b)                          ≃⟨ (Σ-ap-≃ λ a' → Σ-comm) ⟩
    Σ A (λ a' → Σ (a' ＝ a) λ p → Σ (B a') 
        λ ba → IdP (ap B' p) (f a' ba) b)                         ≃⟨ Σ-＝singl ⟩
    Σ (B a) (λ ba → f a ba ＝ b)                                  ≃⟨⟩
    fibre (f a) b ≃∎
}
% ```
}

\subtree[stt-0028]{
\taxon{corollary}
\meta{defines}{\startverb ["is-fibrewise-equiv←is-total-equiv"] \stopverb}

% ```agda
\agda{
is-fibrewise-equiv←is-total-equiv : ∀ {𝓤 𝓥 𝓦} {A : Type 𝓤} {B : A → Type 𝓥} {B' : A → Type 𝓦}
                                    → {f : ∀ a → B a → B' a} → is-equiv (total-map f)
                                    → is-fibrewise-equiv f
is-fibrewise-equiv←is-total-equiv {f = f} teq a
  = is-equiv←is-contr-map λ
      b → is-single←equiv-to-single fibre-total-map (is-contr-map←is-equiv teq (a , b))
}
% ```
}
