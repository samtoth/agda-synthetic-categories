\date{2025-02-24}
\title{Characterising the Path Space of Sigma Types}
\taxon{module}
\meta{module}{\startverb Foundations.SigmaPath \stopverb}

\import{stt-macros}

% ```agda
\agda{
module Foundations.SigmaPath where

open import Foundations.Universes
open import Foundations.Sigma
open import Foundations.Identity
open import Foundations.DependentIdentity
open import Foundations.Functions
open import Foundations.Homotopy
open import Foundations.FunctionInverses
open import Foundations.CoherentIsomorphism
open import Foundations.QuasiIsomorphism
}
% ```


\subtree[stt-0025]{
\taxon{theorem}
\title{Paths in [#{\Sigma} types](stt-001A)}
\meta{defines}{\startverb ["Σ-path", "Σ-path→", "Σ-path-fst", "Σ-path-snd"] \stopverb}

\p{Given two terms #{(x_1 , x_2) , (y_1 , y_2) : \Sigma_{(a:A)}B(a)}, we have #{(x_1,x_2) = (y_1,y_2) \simeq
\Sigma_{(p : x_1 = y_1)}(x_2 =_B^p y_2)}  }

% ```agda
\agda{
Σ-path : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {x y : Σ A B} → (Σ (x .fst ＝ y .fst) λ p → IdP (ap B p) (x .snd) (y .snd)) ≃ (x ＝ y)
Σ-path {B = B} {x = x1 , x2} {y1 , y2} = equiv←qiso (mk-iso to-path (from-path , ret , sec)) module Σ-path where
  to-path : Σ (x1 ＝ y1) (λ p → IdP (ap B p) x2 y2) → Id (Σ _ B) (x1 , x2) (y1 , y2)
  to-path (refl , refl) = refl

  from-path : (x1 , x2) ＝ (y1 , y2) →
            Σ (x1 ＝ y1) (λ p → IdP _ x2 y2)
  from-path refl = refl , refl

  sec : section-witness to-path from-path
  sec refl = refl

  ret : retract-witness to-path from-path
  ret (refl , refl) = refl

Σ-path→ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {x y : Σ A B}
        → (Σ (x .fst ＝ y .fst) λ p → IdP (ap B p) (x .snd) (y .snd)) → (x ＝ y)
Σ-path→ = Σ-path ._≃_.fwd

{-# DISPLAY Σ-path.to-path = Σ-path→ #-}

Σ-path-fst : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {x y : Σ A B}
             → x ＝ y → x .fst ＝ y .fst
Σ-path-fst refl = refl

Σ-path-ap-fst : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {x y : Σ A B}
                  {p : x .fst ＝ y .fst}
                  {q : IdP (ap B p) (x .snd) (y .snd)}
                → ap fst (Σ-path→ (p , q)) ＝ p
Σ-path-ap-fst {p = refl} {refl} = refl

Σ-path-snd : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : A → Type 𝓥} {x y : Σ A B}
           → (p : x ＝ y) → IdP (ap (B ∘ fst) p) (x .snd) (y .snd)
Σ-path-snd refl = refl
}
% ```
}

\subtree[stt-0026]{
\taxon{corollary}
\title{Paths in [products](stt-001C)}

\meta{defines}{\startverb ["×-path", "×-path→"] \stopverb}

% ```agda
\agda{
×-path : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {x y : A × B} →  ((x .fst ＝ y .fst) × (x .snd ＝ y .snd)) ≃ (x ＝ y)
×-path {x = (x , x')} {y , y'} = equiv←qiso (mk-iso f q) where
  f : (x ＝ y) × (x' ＝ y') → (x , x') ＝ (y , y')
  f (refl , refl) = refl

  q : quasi-iso f
  q .fst refl = refl , refl
  q .snd .fst (refl , refl) = refl
  q .snd .snd refl = refl

×-path→ : ∀ {𝓤 𝓥} {A : Type 𝓤} {B : Type 𝓥} {x y : A × B} →  ((x .fst ＝ y .fst) × (x .snd ＝ y .snd)) → (x ＝ y)
×-path→ = ×-path ._≃_.fwd
}
% ```
}

