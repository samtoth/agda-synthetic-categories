\date{2025-03-01}
\title{Univalence and function extensionality}
\author{samueltoth}

\import{stt-macros}

% ```agda
\agda{
module foundations.FunextUnivalence where

open import foundations.universe
open import foundations.Identity
open import foundations.Univalence
open import foundations.CoherentIsomorphism
open import foundations.QuasiIsomorphism
open import foundations.Functions
open import foundations.Sigma
open import foundations.SigmaPath
open import foundations.SigmaFibrewiseEquiv
open import foundations.Singleton
open import foundations.EquivContrFibre
open import foundations.SingletonEquivSingleton
open import foundations.FunExt
open import foundations.Homotopy
open import foundations.EquivOfSingleton
open import foundations.TheoremOfChoice
}
% ```

\p{
Univalence for a particular universe implies function extensionality in that universe.
}


\subtree[stt-000R]{
\taxon{lemma}
\meta{HoTT}{4.9.1}

\p{Given a univalent universe #{\UU} and types #{A,B,X : \UU}, for any equivalence #{e : A \simeq B} there exists an equivalence: }

##{
(X \to A) \simeq (X \to B)
}

\proof{

\p{This follows from the fact that given univalence, equivalences satsify the J-elimination rule. We can assume #{e} is the
identity equivalence, and then #{(X \to A) \simeq (X \to A)} is also just the identity equivalence.}

% ```agda
\agda{
postcomp-equiv : ∀ {𝓤 𝓥} (u : is-univalent 𝓤) {A : Type 𝓤} {B : Type 𝓤} {X : Type 𝓥} → (e : A ≃ B) → (X → A) ≃ (X → B)
postcomp-equiv uu {A} {B} {X} e = (e ._≃_.fwd ∘_) , (≃-univ (λ B' e' → is-equiv (e' ._≃_.fwd ∘_)) lem B e) where
  open WithLocalUnivalence uu
  lem : (B : Type _) (p : A ＝ B) → is-equiv (id→equiv p ._≃_.fwd ∘_)
  lem _ refl = id-is-equiv
}
% ```
}
}

\subtree[stt-000S]{
\taxon{corollary}
\meta{HoTT}{4.9.3}

\p{Given a family of singleton types #{P : A \to \UU}, the projection from the straightening is an equivalence. Then by
[stt-000R](stt-000R), we have: #{(A \to \Sigma_{(x : A)}P(x)) \simeq (A \to A)}.}

\proof{

\p{The fibre of the projection #{\pi : \Sigma_{(x : A)}P(x) \to A} at some #{x : A} is equivalent to #{P(x)}. By assumption
we have the each #{P(x)} is singleton, and therefore so is each fibre of #{\pi}, thus it is an equivelence. }

% ```agda
\agda{
fibre-straighten : ∀ {𝓤 𝓥} {A : Type 𝓤} (P : A → Type 𝓥) → ∀ x → fibre (fst {B = P}) x ≃ P x
fibre-straighten P x = equiv←qiso lem where
  lem : fibre fst x ≅ P x
  lem ._≅_.fwd ((a , p) , refl) = p
  lem ._≅_.fwd-iso .fst p = (x , p) , refl
  lem ._≅_.fwd-iso .snd .fst (_ , refl) = refl
  lem ._≅_.fwd-iso .snd .snd a = refl

Σ-contr : ∀ {𝓤 𝓥} {A : Type 𝓤} {P : A → Type 𝓥} → (∀ x → is-singleton (P x)) → Σ A P ≃ A
Σ-contr {P = P} sngl = fst , is-equiv←is-contr-map (λ b → singleton←equiv-to-singleton (fibre-straighten P b e⁻¹) (sngl b))

HoTT4-9-3 : ∀ {𝓤} (_ : is-univalent 𝓤) {A : Type 𝓤} {P : A → Type 𝓤} (P-sing : ∀ a → is-singleton (P a)) → (A → Σ A P) ≃ (A → A)
HoTT4-9-3 uu Ps = postcomp-equiv uu (Σ-contr Ps)
}
% ```
}
}

\subtree[stt-000T]{

\taxon{theorem}
\title{Univalence implies weak funext}

\meta{HoTT}{4.9.4}

\proof{

% ```agda
\agda{
module _ {𝓤} (uu : is-univalent 𝓤) {A : Type 𝓤} {P : A → Type 𝓤} (P-sing : ∀ a → is-singleton (P a)) where
  private
    α : (A → Σ A P) → A → A
    α = HoTT4-9-3 uu P-sing ._≃_.fwd

    α-is-eqv : is-equiv α
    α-is-eqv = HoTT4-9-3 uu P-sing ._≃_.has-is-eqv

  HoTT4-9-4 : ((a : A) → P a) ≃ fibre α id
  HoTT4-9-4 = equiv←qiso lem where
    lem : ((a : A) → P a) ≅ fibre α id
    lem ._≅_.fwd f = (λ a → (a , f a)) , refl
    lem ._≅_.fwd-iso .fst (f , p) a = tr P (happly p a) (snd (f a))
    lem ._≅_.fwd-iso .snd .fst f = refl
    lem ._≅_.fwd-iso .snd .snd a = is-prop←is-single
      (is-contr-map←is-equiv (α-is-eqv) id) _ a

  weak-funext : is-singleton ((a : A) → P a)
  weak-funext = singleton←equiv-to-singleton (HoTT4-9-4 e⁻¹) (is-contr-map←is-equiv α-is-eqv id)
}
% ```
}
}

\subtree[stt-000U]{
\taxon{theorem}
\title{Weak funext gives full funext}

% ```agda
\agda{
Weak-FunExt : ∀ 𝓤 → Type (lsuc 𝓤)
Weak-FunExt 𝓤 = ∀ {A : Type 𝓤} {B : A → Type 𝓤} → (∀ a → is-singleton (B a)) → is-singleton ((a : A) → B a)

funext←weak-funext : ∀ {𝓤} → Weak-FunExt 𝓤 → FunExt 𝓤 𝓤
funext←weak-funext wfe {A = A} {B} {f} {g} = is-fibrewise-equiv←is-total-equiv fun-equiv g where
  fun : (Σ ((a : A) → B a) λ g → f ＝ g) → (Σ ((a : A) → B a) λ g → f ~ g)
  fun = totalisation (λ _ → happly)

  I : is-singleton (Σ ((a : A) → B a) (λ g → f ~ g))
  I = singleton←equiv-to-singleton (Σ-Π-swap≃ _ λ x bx → f x ＝ bx) (wfe λ _ → Sing-is-singleton)
  
  fun-equiv : is-equiv fun
  fun-equiv = is-equiv←single-dom←prop-cod Sing-is-singleton
    (is-prop←is-single I)
    fun
}
% ```
}


\subtree[stt-000V]{
\taxon{corollary}
\title{Univalence implies function extensionality}

\p{We have show that univalence gives weak function extensionality, and weak fun-ext gives full fun-ext, so as an easy
corollary we have the univalence for a particular universe gives function extensionality for that universe}

% ```agda
\agda{
FunExt←UU : ∀ {𝓤} → is-univalent 𝓤 → FunExt 𝓤 𝓤
FunExt←UU uu = funext←weak-funext (weak-funext uu)
}
% ```
}

