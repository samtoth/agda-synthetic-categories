\date{2025-06-17}
\title{Localisations}
\taxon{module}
\meta{module}{\startverb modalities.instances.Localisation \stopverb}
\author{samueltoth}
\import{stt-macros}

%```agda
\agda{
module modalities.instances.Localisation where

open import ufAxioms
open import foundations.Prelude
open import core.Orthogonal
open import ergonomics.notations.Orthogonality
open core.Orthogonal.notation
}
%```

\subtree[stt-005F]{
\taxon{definition}
\title{Local types}

\p{Given a family of maps #{f_i : A_i \to B_i}, we say that a type
is #{f}-local if it is [orthogonal](stt-004O) to each map.}

%```agda
\agda{
is-local : ∀ {𝓘 𝓤 𝓥 𝓦} {I : Type 𝓘} {A : I → Type 𝓤} {B : I → Type 𝓥}
               → (f : (i : I) → A i → B i)
               → Type 𝓦
               → Type (𝓘 ⊔ 𝓤 ⊔ 𝓥 ⊔ 𝓦)
is-local f A = ∀ i → orthogonal-type (f i) A
}
%```
}


\subtree[stt-005G]{
\taxon{definition}
\title{Null types}

\p{Given a family of types #{A_i}, we say a type #{X} is #{A} null if
it is right orthogonal to each #{A_i}. Or equivalently, if the
obvious maps #{X \to (A_i \to X)} are equivalences for each #{i}.}

%```agda
\agda{
is-null : ∀ {𝓘 𝓤 𝓥} {I : Type 𝓘} (A : I → Type 𝓤)
            → Type 𝓥 → Type (𝓘 ⊔ 𝓤 ⊔ 𝓥)
is-null A X = ∀ i → is-equiv (const X (A i))
}
%```
}

\subtree[stt-005H]{
\taxon{theorem}
\title{Null types are #{!\rm{-local}}}

\p{A type is #{A_i}-null iff it is #{(! : A_i \to 1)\rm{-local}}.}

\proof{
\p{A type #{X} is #{!\rm{-local}} when the map #{- \circ\ ! : (1 \to X) \to (A_i \to X)}
is an equivalence.}
}

%```agda
\agda{
is-local←is-null : ∀ {𝓘 𝓤 𝓥} {I : Type 𝓘} {A : I → Type 𝓤}
                   → {X : Type 𝓥}
                   → is-null A X
                   → is-local (λ i → ! {A = A i}) X
is-local←is-null eq i = 3-for-2' (is-equiv⁻¹ unit-ev-is-equiv) (eq i)

is-null←is-local : ∀ {𝓘 𝓤 𝓥} {I : Type 𝓘} {A : I → Type 𝓤}
                   → {X : Type 𝓥}
                   → is-local (λ i → ! {A = A i}) X
                   → is-null A X
is-null←is-local eq i = is-equiv-∘ (eq i) unit-const-is-equiv
}
%```
}
